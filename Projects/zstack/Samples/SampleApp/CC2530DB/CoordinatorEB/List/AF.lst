###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               31/May/2018  15:13:14
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  E:\anti-lost-dev-code\Components\stack\af\AF.c
#    Command line       =  
#        -f C:\Users\libx\AppData\Local\Temp\EW6661.tmp
#        (E:\anti-lost-dev-code\Components\stack\af\AF.c -D ZTOOL_P1 -D MT_TASK
#        -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        -lA
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\AF.lst
#    Object file        =  
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\AF.r51
#
###############################################################################

E:\anti-lost-dev-code\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2011-11-18 16:03:29 -0800 (Fri, 18 Nov 2011) $
      4            Revision:       $Revision: 28423 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afSend
     67           *
     68           * @brief   Helper macro for V1 API to invoke V2 API.
     69           *
     70           * input parameters
     71           *
     72           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     73           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     74           * @param   cID - A valid cluster ID as specified by the Profile.
     75           * @param   len - Number of bytes of data pointed to by next param.
     76           * @param  *buf - A pointer to the data bytes to send.
     77           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     78           * @param  *transID - A pointer to a byte which can be modified and which will
     79           *                    be used as the transaction sequence number of the msg.
     80           *
     81           * output parameters
     82           *
     83           * @param  *transID - Incremented by one if the return value is success.
     84           *
     85           * @return  afStatus_t - See previous definition of afStatus_... types.
     86           */
     87          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     88                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     89                                    (cID), (len), (buf), (transID), (options), (radius) )
     90          
     91          /*********************************************************************
     92           * GLOBAL VARIABLES
     93           */
     94          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTIONS
     99           */
    100          
    101          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    102                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    103                          uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp );
    104          
    105          static epList_t *afFindEndPointDescList( uint8 EndPoint );
    106          
    107          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    108          
    109          /*********************************************************************
    110           * PUBLIC FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * @fn      afInit
    115           *
    116           * @brief   Initialization function for the AF.
    117           *
    118           * @param   none
    119           *
    120           * @return  none
    121          void afInit( void )
    122          {
    123          }
    124           */
    125          
    126          /*********************************************************************
    127           * @fn      afRegisterExtended
    128           *
    129           * @brief   Register an Application's EndPoint description.
    130           *
    131           * @param   epDesc - pointer to the Application's endpoint descriptor.
    132           * @param   descFn - pointer to descriptor callback function
    133           *
    134           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    135           *
    136           * @return  Pointer to epList_t on success, NULL otherwise.
    137           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    138          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
   \                     afRegisterExtended:
    139          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    140            epList_t *ep = osal_mem_alloc(sizeof(epList_t));
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A09         MOV       R2,#0x9
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    141          
    142            if (ep != NULL)
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   6030         JZ        ??afRegisterExtended_0
    143            {
    144              ep->nextDesc = epList;
   \   000018   90....       MOV       DPTR,#epList
   \   00001B   12....       LCALL     ?Subroutine8 & 0xFFFF
    145              epList = ep;
   \                     ??CrossCallReturnLabel_2:
   \   00001E   90....       MOV       DPTR,#epList
   \   000021   12....       LCALL     ?Subroutine30 & 0xFFFF
    146              ep->epDesc = epDesc;
   \                     ??CrossCallReturnLabel_42:
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E5..         MOV       A,?V0
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E5..         MOV       A,?V1
   \   000030   12....       LCALL     ?Subroutine29 & 0xFFFF
    147              ep->pfnDescCB = descFn;
    148              ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
    149              ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
    150              ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
    151            }
   \                     ??CrossCallReturnLabel_40:
   \   000033   EE           MOV       A,R6
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   EF           MOV       A,R7
   \   000037   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   7432         MOV       A,#0x32
   \   00003E   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000041   7401         MOV       A,#0x1
   \   000043   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000046   A3           INC       DPTR
   \   000047   F0           MOVX      @DPTR,A
    152          
    153            return ep;
   \                     ??afRegisterExtended_0:
   \   000048   02....       LJMP      ?Subroutine0 & 0xFFFF
    154          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine48_0
   \   000003                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   E8           MOV       A,R0
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   E9           MOV       A,R1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET
    155          
    156          /*********************************************************************
    157           * @fn      afRegister
    158           *
    159           * @brief   Register an Application's EndPoint description.
    160           *
    161           * @param   epDesc - pointer to the Application's endpoint descriptor.
    162           *
    163           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    164           *
    165           * @return  afStatus_SUCCESS - Registered
    166           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    167           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    168           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    169          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    170          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    171            if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   6004         JZ        ??afRegister_0
    172            {
    173              return afStatus_INVALID_PARAMETER;
   \   000014   7902         MOV       R1,#0x2
   \   000016   8015         SJMP      ??afRegister_1
    174            }
    175          
    176            return ((NULL == afRegisterExtended(epDesc, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   000018                ; Setup parameters for call to function afRegisterExtended
   \   000018   7C00         MOV       R4,#0x0
   \   00001A   7D00         MOV       R5,#0x0
   \   00001C   EE           MOV       A,R6
   \   00001D   FA           MOV       R2,A
   \   00001E   EF           MOV       A,R7
   \   00001F   FB           MOV       R3,A
   \   000020   12....       LCALL     `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   000023   EA           MOV       A,R2
   \   000024   4B           ORL       A,R3
   \   000025   7004         JNZ       ??afRegister_2
   \   000027   7910         MOV       R1,#0x10
   \   000029   8002         SJMP      ??afRegister_1
   \                     ??afRegister_2:
   \   00002B   7900         MOV       R1,#0x0
   \                     ??afRegister_1:
   \   00002D   02....       LJMP      ?Subroutine1 & 0xFFFF
    177          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    178          
    179          /*********************************************************************
    180           * @fn      afDelete
    181           *
    182           * @brief   Delete an Application's EndPoint descriptor and frees the memory
    183           *
    184           * @param   EndPoint - Application Endpoint to delete
    185           *
    186           * @return  afStatus_SUCCESS - endpoint deleted
    187           *          afStatus_INVALID_PARAMETER - endpoint not found
    188           *          afStatus_FAILED - endpoint list empty
    189           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    190          afStatus_t afDelete( uint8 EndPoint )
   \                     afDelete:
    191          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    192            epList_t *epCurrent;
    193            epList_t *epPrevious;
    194          
    195            if (epList != NULL)
   \   000007   90....       MOV       DPTR,#epList
   \   00000A   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00000D   604C         JZ        ??afDelete_0
    196            {
    197              epPrevious = epCurrent = epList;
   \   00000F   90....       MOV       DPTR,#epList
   \   000012   12....       LCALL     ??Subroutine51_0 & 0xFFFF
    198          
    199              // first element of the list matches
    200              if (epCurrent->epDesc->endPoint == EndPoint)
   \                     ??CrossCallReturnLabel_113:
   \   000015   8882         MOV       DPL,R0
   \   000017   F583         MOV       DPH,A
   \   000019   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00001C   8882         MOV       DPL,R0
   \   00001E   8983         MOV       DPH,R1
   \   000020   700C         JNZ       ??afDelete_1
    201              {
    202                epList = epCurrent->nextDesc;
   \   000022   12....       LCALL     ??Subroutine47_0 & 0xFFFF
    203                osal_mem_free(epCurrent);
    204          
    205                return (afStatus_SUCCESS);
    206              }
   \                     ??CrossCallReturnLabel_85:
   \   000025   90....       MOV       DPTR,#epList
   \   000028   E8           MOV       A,R0
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   E9           MOV       A,R1
   \   00002C   8025         SJMP      ??afDelete_2
    207              else
    208              {
    209                // search the list
    210                for (epCurrent = epPrevious->nextDesc; epCurrent != NULL; epPrevious = epCurrent)
   \                     ??afDelete_1:
   \   00002E   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000031   7008         JNZ       ??afDelete_3
    211                {
    212                  if (epCurrent->epDesc->endPoint == EndPoint)
    213                  {
    214                    epPrevious->nextDesc = epCurrent->nextDesc;
    215                    osal_mem_free(epCurrent);
    216          
    217                    // delete the entry and free the memory
    218                    return (afStatus_SUCCESS);
    219                  }
    220                }
    221              }
    222          
    223              // no endpoint found
    224              return (afStatus_INVALID_PARAMETER);
   \   000033   7902         MOV       R1,#0x2
   \   000035   8026         SJMP      ??afDelete_4
   \                     ??afDelete_5:
   \   000037   EA           MOV       A,R2
   \   000038   F8           MOV       R0,A
   \   000039   EB           MOV       A,R3
   \   00003A   F9           MOV       R1,A
   \                     ??afDelete_3:
   \   00003B   8A82         MOV       DPL,R2
   \   00003D   8B83         MOV       DPH,R3
   \   00003F   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000042   70F3         JNZ       ??afDelete_5
   \   000044   8A82         MOV       DPL,R2
   \   000046   8B83         MOV       DPH,R3
   \   000048   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00004B   8882         MOV       DPL,R0
   \   00004D   8983         MOV       DPH,R1
   \   00004F   EC           MOV       A,R4
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   ED           MOV       A,R5
   \                     ??afDelete_2:
   \   000053   F0           MOVX      @DPTR,A
   \   000054                ; Setup parameters for call to function osal_mem_free
   \   000054   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000057   7900         MOV       R1,#0x0
   \   000059   8002         SJMP      ??afDelete_4
    225            }
    226            else
    227            {
    228              // epList is empty
    229              return (afStatus_FAILED);
   \                     ??afDelete_0:
   \   00005B   7901         MOV       R1,#0x1
    230            }
   \                     ??afDelete_4:
   \   00005D                REQUIRE ?Subroutine2
   \   00005D                ; // Fall through to label ?Subroutine2
    231          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   FC           MOV       R4,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F583         MOV       DPH,A
   \   000008   8C82         MOV       DPL,R4
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6E           XRL       A,R6
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   22           RET
    232          
    233          /*********************************************************************
    234           * @fn          afDataConfirm
    235           *
    236           * @brief       This function will generate the Data Confirm back to
    237           *              the application.
    238           *
    239           * @param       endPoint - confirm end point
    240           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    241           * @param       status - status of APSDE_DATA_REQUEST
    242           *
    243           * @return      none
    244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    245          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    246          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
   \   000009   8B..         MOV       ?V0,R3
    247            endPointDesc_t *epDesc;
    248            afDataConfirm_t *msgPtr;
    249          
    250            // Find the endpoint description
    251            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00000E   8A..         MOV       ?V4,R2
   \   000010   8B..         MOV       ?V5,R3
    252            if ( epDesc == NULL )
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   602A         JZ        ??CrossCallReturnLabel_4
    253              return;
    254          
    255            // Determine the incoming command type
    256            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   000016                ; Setup parameters for call to function osal_msg_allocate
   \   000016   7A04         MOV       R2,#0x4
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    257            if ( msgPtr )
   \   00001D   EA           MOV       A,R2
   \   00001E   4B           ORL       A,R3
   \   00001F   601F         JZ        ??CrossCallReturnLabel_4
    258            {
    259              // Build the Data Confirm message
    260              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   74FD         MOV       A,#-0x3
   \   000027   F0           MOVX      @DPTR,A
    261              msgPtr->hdr.status = status;
   \   000028   A3           INC       DPTR
   \   000029   E5..         MOV       A,?V0
   \   00002B   F0           MOVX      @DPTR,A
    262              msgPtr->endpoint = endPoint;
   \   00002C   EE           MOV       A,R6
   \   00002D   8A82         MOV       DPL,R2
   \   00002F   8B83         MOV       DPH,R3
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   F0           MOVX      @DPTR,A
    263              msgPtr->transID = transID;
   \   000034   EF           MOV       A,R7
   \   000035   8A82         MOV       DPL,R2
   \   000037   8B83         MOV       DPH,R3
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   F0           MOVX      @DPTR,A
    264          
    265          #if defined ( MT_AF_CB_FUNC )
    266              /* If MT has subscribed for this callback, don't send as a message. */
    267              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    268              {
    269                /* Send callback if it's subscribed */
    270                MT_AfDataConfirm ((void *)msgPtr);
    271                /* Release the memory. */
    272                osal_msg_deallocate( (void *)msgPtr );
    273              }
    274              else
    275          #endif
    276              {
    277                /* send message through task message */
    278                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   00003D                ; Setup parameters for call to function osal_msg_send
   \   00003D   12....       LCALL     ?Subroutine9 & 0xFFFF
    279              }
    280            }
    281          }
   \                     ??CrossCallReturnLabel_4:
   \   000040   7F06         MOV       R7,#0x6
   \   000042   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00000A   F9           MOV       R1,A
   \   00000B   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine49_0
   \   000001                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET
    282          
    283          /*********************************************************************
    284           * @fn          afIncomingData
    285           *
    286           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    287           *
    288           * @param       aff  - pointer to APS frame format
    289           * @param       SrcAddress  - Source address
    290           * @param       SrcPanId  - Source PAN ID
    291           * @param       sig - incoming message's link quality
    292           * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
    293           * @param       SecurityUse - Security enable/disable
    294           * @param       timestamp - the MAC Timer2 timestamp at Rx.
    295           *
    296           * @return      none
    297           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    298          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    299                               NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp )
    300          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000012   7407         MOV       A,#0x7
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   EC           MOV       A,R4
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   ED           MOV       A,R5
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   7406         MOV       A,#0x6
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E9           MOV       A,R1
   \   000022   F0           MOVX      @DPTR,A
    301            endPointDesc_t *epDesc = NULL;
    302            epList_t *pList = epList;
   \   000023   90....       MOV       DPTR,#epList
   \   000026   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000029   7403         MOV       A,#0x3
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    303          #if !defined ( APS_NO_GROUPS )
    304            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \                     ??CrossCallReturnLabel_73:
   \   000031   85..82       MOV       DPL,?XSP + 0
   \   000034   85..83       MOV       DPH,?XSP + 1
   \   000037   74FE         MOV       A,#-0x2
   \   000039   F0           MOVX      @DPTR,A
    305          #endif
    306          
    307            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   00003A   7401         MOV       A,#0x1
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000042   7021         JNZ       ??afIncomingData_0
    308            {
    309          #if !defined ( APS_NO_GROUPS )
    310              // Find the first endpoint for this group
    311              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000044                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000044   79FE         MOV       R1,#-0x2
   \   000046   7401         MOV       A,#0x1
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ?Subroutine7 & 0xFFFF
    312              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \                     ??CrossCallReturnLabel_0:
   \   00004E   7003         JNZ       $+5
   \   000050   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    313                return;   // No endpoint found
    314          
    315              epDesc = afFindEndPointDesc( grpEp );
   \   000053                ; Setup parameters for call to function afFindEndPointDesc
   \   000053   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000056   8A..         MOV       ?V0,R2
   \   000058   8B..         MOV       ?V1,R3
   \   00005A   AE..         MOV       R6,?V0
   \   00005C   AF..         MOV       R7,?V1
    316              if ( epDesc == NULL )
   \   00005E   EA           MOV       A,R2
   \   00005F   4F           ORL       A,R7
   \   000060   7049         JNZ       ??afIncomingData_2
    317                return;   // Endpoint descriptor not found
   \   000062   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    318          
    319              pList = afFindEndPointDescList( epDesc->endPoint );
    320          #else
    321              return; // Not supported
    322          #endif
    323            }
    324            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   000065   7401         MOV       A,#0x1
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00006D   7021         JNZ       ??afIncomingData_3
    325            {
    326              // Set the list
    327              if ( pList != NULL )
   \   00006F   7403         MOV       A,#0x3
   \   000071   12....       LCALL     ?XSTACK_DISP0_8
   \   000074   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000077   7003         JNZ       $+5
   \   000079   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    328              {
    329                epDesc = pList->epDesc;
   \   00007C   7403         MOV       A,#0x3
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   12....       LCALL     ?Subroutine12 & 0xFFFF
    330              }
    331            }
   \                     ??CrossCallReturnLabel_10:
   \   000084   741E         MOV       A,#0x1e
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   78..         MOV       R0,#?V0
   \   00008B   12....       LCALL     ?L_MOV_X
   \   00008E   802F         SJMP      ??CrossCallReturnLabel_11
    332            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   000090                ; Setup parameters for call to function afFindEndPointDesc
   \   000090   7401         MOV       A,#0x1
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   12....       LCALL     ??Subroutine44_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   F9           MOV       R1,A
   \   00009C   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00009F   8B..         MOV       ?V1,R3
   \   0000A1   A9..         MOV       R1,?V1
   \   0000A3   EA           MOV       A,R2
   \   0000A4   FE           MOV       R6,A
   \   0000A5   EB           MOV       A,R3
   \   0000A6   FF           MOV       R7,A
   \   0000A7   EA           MOV       A,R2
   \   0000A8   49           ORL       A,R1
   \   0000A9   60D9         JZ        ??CrossCallReturnLabel_10
    333            {
    334              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_2:
   \   0000AB                ; Setup parameters for call to function afFindEndPointDescList
   \   0000AB   8E82         MOV       DPL,R6
   \   0000AD   8F83         MOV       DPH,R7
   \   0000AF   12....       LCALL     ?Subroutine24 & 0xFFFF
    335            }
   \                     ??CrossCallReturnLabel_31:
   \   0000B2   7403         MOV       A,#0x3
   \   0000B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B7   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000BA   80C8         SJMP      ??CrossCallReturnLabel_10
    336          
    337            while ( epDesc )
    338            {
    339              uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
    340          
    341              if ( pList->pfnDescCB )
    342              {
    343                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    344                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    345                if ( pID )
    346                {
    347                  epProfileID = *pID;
    348                  osal_mem_free( pID );
    349                }
    350              }
    351              else if ( epDesc->simpleDesc )
    352              {
    353                epProfileID = epDesc->simpleDesc->AppProfId;
    354              }
    355          
    356              if ( (aff->ProfileID == epProfileID) ||
    357                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
    358              {
    359                {
    360                  // Save original endpoint
    361                  uint8 endpoint = aff->DstEndPoint;
    362          
    363                  // overwrite with descriptor's endpoint
    364                  aff->DstEndPoint = epDesc->endPoint;
    365          
    366                  afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
    367                                     nwkSeqNum, SecurityUse, timestamp );
    368          
    369                  // Restore with original endpoint
    370                  aff->DstEndPoint = endpoint;
    371                }
    372              }
    373          
    374              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    375              {
    376          #if !defined ( APS_NO_GROUPS )
    377                // Find the next endpoint for this group
    378                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    379                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    380                  return;   // No endpoint found
    381          
    382                epDesc = afFindEndPointDesc( grpEp );
    383                if ( epDesc == NULL )
    384                  return;   // Endpoint descriptor not found
    385          
    386                pList = afFindEndPointDescList( epDesc->endPoint );
    387          #else
    388                return;
    389          #endif
    390              }
    391              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    392              {
    393                pList = pList->nextDesc;
    394                if ( pList )
    395                  epDesc = pList->epDesc;
   \                     ??afIncomingData_4:
   \   0000BC   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000BF   EE           MOV       A,R6
   \   0000C0   4F           ORL       A,R7
   \   0000C1   7003         JNZ       $+5
   \   0000C3   02....       LJMP      ??afIncomingData_1 & 0xFFFF
   \   0000C6   800F         SJMP      ??CrossCallReturnLabel_45
   \                     ??afIncomingData_5:
   \   0000C8                ; Setup parameters for call to function afFindEndPointDescList
   \   0000C8   8A82         MOV       DPL,R2
   \   0000CA   8B83         MOV       DPH,R3
   \   0000CC   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000CF   7403         MOV       A,#0x3
   \   0000D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D4   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000D7   75..FF       MOV       ?V6,#-0x1
   \   0000DA   75..FF       MOV       ?V7,#-0x1
   \   0000DD   7403         MOV       A,#0x3
   \   0000DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E2   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   0000E5   A3           INC       DPTR
   \   0000E6   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0000E9   8E82         MOV       DPL,R6
   \   0000EB   8F83         MOV       DPH,R7
   \   0000ED   6022         JZ        ??afIncomingData_6
   \   0000EF                ; Setup parameters for indirect call
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   FA           MOV       R2,A
   \   0000F1   7902         MOV       R1,#0x2
   \   0000F3   7403         MOV       A,#0x3
   \   0000F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F8   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000FB   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0000FE   12....       LCALL     ?CALL_IND
   \   000101   EA           MOV       A,R2
   \   000102   4B           ORL       A,R3
   \   000103   601C         JZ        ??CrossCallReturnLabel_20
   \   000105   8A82         MOV       DPL,R2
   \   000107   8B83         MOV       DPH,R3
   \   000109   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00010C                ; Setup parameters for call to function osal_mem_free
   \   00010C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00010F   8010         SJMP      ??CrossCallReturnLabel_20
   \                     ??afIncomingData_6:
   \   000111   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000114   600B         JZ        ??CrossCallReturnLabel_20
   \   000116   8E82         MOV       DPL,R6
   \   000118   8F83         MOV       DPH,R7
   \   00011A   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00011D   A3           INC       DPTR
   \   00011E   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000121   7401         MOV       A,#0x1
   \   000123   12....       LCALL     ?XSTACK_DISP0_8
   \   000126   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   65..         XRL       A,?V6
   \   00012C   7004         JNZ       ??afIncomingData_7
   \   00012E   A3           INC       DPTR
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   65..         XRL       A,?V7
   \                     ??afIncomingData_7:
   \   000132   6017         JZ        ??afIncomingData_8
   \   000134   8E82         MOV       DPL,R6
   \   000136   8F83         MOV       DPH,R7
   \   000138   E0           MOVX      A,@DPTR
   \   000139   6003         JZ        $+5
   \   00013B   02....       LJMP      ??CrossCallReturnLabel_34 & 0xFFFF
   \   00013E   7401         MOV       A,#0x1
   \   000140   12....       LCALL     ?XSTACK_DISP0_8
   \   000143   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000146   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000149   7074         JNZ       ??CrossCallReturnLabel_34
   \                     ??afIncomingData_8:
   \   00014B   7401         MOV       A,#0x1
   \   00014D   12....       LCALL     ?XSTACK_DISP0_8
   \   000150   E0           MOVX      A,@DPTR
   \   000151   2402         ADD       A,#0x2
   \   000153   F5..         MOV       ?V6,A
   \   000155   A3           INC       DPTR
   \   000156   E0           MOVX      A,@DPTR
   \   000157   3400         ADDC      A,#0x0
   \   000159   F5..         MOV       ?V7,A
   \   00015B   85..82       MOV       DPL,?V6
   \   00015E   F583         MOV       DPH,A
   \   000160   E0           MOVX      A,@DPTR
   \   000161   C0E0         PUSH      A
   \   000163   7405         MOV       A,#0x5
   \   000165   12....       LCALL     ?XSTACK_DISP0_8
   \   000168   D0E0         POP       A
   \   00016A   F0           MOVX      @DPTR,A
   \   00016B   8E82         MOV       DPL,R6
   \   00016D   8F83         MOV       DPH,R7
   \   00016F   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000172                ; Setup parameters for call to function afBuildMSGIncoming
   \   000172   78..         MOV       R0,#?V0
   \   000174   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000177   7421         MOV       A,#0x21
   \   000179   12....       LCALL     ?XSTACK_DISP0_8
   \   00017C   E0           MOVX      A,@DPTR
   \   00017D   F5..         MOV       ?V4,A
   \   00017F   78..         MOV       R0,#?V4
   \   000181   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000184   7420         MOV       A,#0x20
   \   000186   12....       LCALL     ?XSTACK_DISP0_8
   \   000189   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00018C   7420         MOV       A,#0x20
   \   00018E   12....       LCALL     ?XSTACK_DISP0_8
   \   000191   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000194   7410         MOV       A,#0x10
   \   000196   12....       LCALL     ?XSTACK_DISP0_8
   \   000199   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00019C   7411         MOV       A,#0x11
   \   00019E   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A1   E0           MOVX      A,@DPTR
   \   0001A2   F9           MOV       R1,A
   \   0001A3   EE           MOV       A,R6
   \   0001A4   FC           MOV       R4,A
   \   0001A5   EF           MOV       A,R7
   \   0001A6   FD           MOV       R5,A
   \   0001A7   740C         MOV       A,#0xc
   \   0001A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AC   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0001AF   12....       LCALL     `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   0001B2   740B         MOV       A,#0xb
   \   0001B4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B7   7405         MOV       A,#0x5
   \   0001B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BC   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0001BF   7401         MOV       A,#0x1
   \   0001C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C4   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001C7   7026         JNZ       ??afIncomingData_9
   \   0001C9                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0001C9   85..82       MOV       DPL,?XSP + 0
   \   0001CC   85..83       MOV       DPH,?XSP + 1
   \   0001CF   E0           MOVX      A,@DPTR
   \   0001D0   F9           MOV       R1,A
   \   0001D1   7401         MOV       A,#0x1
   \   0001D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D6   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0001D9   603E         JZ        ??afIncomingData_1
   \   0001DB                ; Setup parameters for call to function afFindEndPointDesc
   \   0001DB   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0001DE   8A..         MOV       ?V4,R2
   \   0001E0   8B..         MOV       ?V5,R3
   \   0001E2   AE..         MOV       R6,?V4
   \   0001E4   AF..         MOV       R7,?V5
   \   0001E6   EA           MOV       A,R2
   \   0001E7   4F           ORL       A,R7
   \   0001E8   6003         JZ        $+5
   \   0001EA   02....       LJMP      ??afIncomingData_5 & 0xFFFF
   \   0001ED   802A         SJMP      ??afIncomingData_1
   \                     ??afIncomingData_9:
   \   0001EF   7401         MOV       A,#0x1
   \   0001F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F4   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0001F7   7020         JNZ       ??afIncomingData_1
   \   0001F9   7403         MOV       A,#0x3
   \   0001FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FE   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000201   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000204   7403         MOV       A,#0x3
   \   000206   12....       LCALL     ?XSTACK_DISP0_8
   \   000209   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00020C   7403         MOV       A,#0x3
   \   00020E   12....       LCALL     ?XSTACK_DISP0_8
   \   000211   E0           MOVX      A,@DPTR
   \   000212   F8           MOV       R0,A
   \   000213   49           ORL       A,R1
   \   000214   6003         JZ        $+5
   \   000216   02....       LJMP      ??afIncomingData_4 & 0xFFFF
    396                else
    397                  epDesc = NULL;
    398              }
    399              else
    400                epDesc = NULL;
    401            }
    402          }
   \                     ??afIncomingData_1:
   \   000219   7409         MOV       A,#0x9
   \   00021B                REQUIRE ?Subroutine3
   \   00021B                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V6
   \   000004   85..83       MOV       DPH,?V7
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine44_0
   \   000003                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine45_0
   \   000001                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003   F4           CPL       A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000003   FE           MOV       R6,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FF           MOV       R7,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   C8           XCH       A,R0
   \   000004   2408         ADD       A,#0x8
   \   000006   F582         MOV       DPL,A
   \   000008   E4           CLR       A
   \   000009   38           ADDC      A,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003   540C         ANL       A,#0xc
   \   000005   640C         XRL       A,#0xc
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FA           MOV       R2,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FB           MOV       R3,A
   \   000009   12....       LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   00000C   E9           MOV       A,R1
   \   00000D   85..82       MOV       DPL,?XSP + 0
   \   000010   85..83       MOV       DPH,?XSP + 1
   \   000013   F0           MOVX      @DPTR,A
   \   000014   64FE         XRL       A,#0xfe
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V6,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V7,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine53_0
   \   000001                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET
    403          
    404          /*********************************************************************
    405           * @fn          afBuildMSGIncoming
    406           *
    407           * @brief       Build the message for the app
    408           *
    409           * @param
    410           *
    411           * @return      pointer to next in data buffer
    412           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    413          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    414                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    415                           uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp )
    416          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V4,R4
   \   000010   8D..         MOV       ?V5,R5
   \   000012   89..         MOV       ?V6,R1
    417            afIncomingMSGPacket_t *MSGpkt;
    418            const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    419            uint8 *asdu = aff->asdu;
   \   000014   EA           MOV       A,R2
   \   000015   240E         ADD       A,#0xe
   \   000017   F582         MOV       DPL,A
   \   000019   E4           CLR       A
   \   00001A   35..         ADDC      A,?V1
   \   00001C   F583         MOV       DPH,A
   \   00001E   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000021   85..82       MOV       DPL,?XSP + 0
   \   000024   85..83       MOV       DPH,?XSP + 1
   \   000027   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    420            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \                     ??CrossCallReturnLabel_75:
   \   00002A                ; Setup parameters for call to function osal_msg_allocate
   \   00002A   EA           MOV       A,R2
   \   00002B   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00002E   2424         ADD       A,#0x24
   \   000030   FA           MOV       R2,A
   \   000031   7B00         MOV       R3,#0x0
   \   000033   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000036   8A..         MOV       ?V2,R2
   \   000038   8B..         MOV       ?V3,R3
   \   00003A   AE..         MOV       R6,?V2
   \   00003C   AF..         MOV       R7,?V3
    421          
    422            if ( MSGpkt == NULL )
   \   00003E   EA           MOV       A,R2
   \   00003F   4F           ORL       A,R7
   \   000040   7003         JNZ       $+5
   \   000042   02....       LJMP      ??CrossCallReturnLabel_5 & 0xFFFF
    423            {
    424              return;
    425            }
    426          
    427            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000045   8A82         MOV       DPL,R2
   \   000047   8B83         MOV       DPH,R3
   \   000049   741A         MOV       A,#0x1a
   \   00004B   12....       LCALL     ?Subroutine28 & 0xFFFF
    428            MSGpkt->groupId = aff->GroupID;
   \                     ??CrossCallReturnLabel_37:
   \   00004E   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000051   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    429            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_76:
   \   000054   85..82       MOV       DPL,?V0
   \   000057   85..83       MOV       DPH,?V1
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    430            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_77:
   \   000064                ; Setup parameters for call to function afCopyAddress
   \   000064   7411         MOV       A,#0x11
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00006C   EA           MOV       A,R2
   \   00006D   2406         ADD       A,#0x6
   \   00006F   FA           MOV       R2,A
   \   000070   E4           CLR       A
   \   000071   3F           ADDC      A,R7
   \   000072   FB           MOV       R3,A
   \   000073   12....       LCALL     `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    431            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   000076   85..82       MOV       DPL,?V0
   \   000079   85..83       MOV       DPH,?V1
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   C0E0         PUSH      A
   \   000082   EE           MOV       A,R6
   \   000083   240F         ADD       A,#0xf
   \   000085   F582         MOV       DPL,A
   \   000087   E4           CLR       A
   \   000088   3F           ADDC      A,R7
   \   000089   F583         MOV       DPH,A
   \   00008B   D0E0         POP       A
   \   00008D   F0           MOVX      @DPTR,A
    432            MSGpkt->endPoint = epDesc->endPoint;
   \   00008E   85..82       MOV       DPL,?V4
   \   000091   85..83       MOV       DPH,?V5
   \   000094   E0           MOVX      A,@DPTR
   \   000095   C0E0         PUSH      A
   \   000097   EE           MOV       A,R6
   \   000098   2414         ADD       A,#0x14
   \   00009A   F582         MOV       DPL,A
   \   00009C   E4           CLR       A
   \   00009D   3F           ADDC      A,R7
   \   00009E   F583         MOV       DPH,A
   \   0000A0   D0E0         POP       A
   \   0000A2   F0           MOVX      @DPTR,A
    433            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000A3   E5..         MOV       A,?V0
   \   0000A5   240C         ADD       A,#0xc
   \   0000A7   F582         MOV       DPL,A
   \   0000A9   E4           CLR       A
   \   0000AA   35..         ADDC      A,?V1
   \   0000AC   F583         MOV       DPH,A
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   C0E0         PUSH      A
   \   0000B1   EE           MOV       A,R6
   \   0000B2   2415         ADD       A,#0x15
   \   0000B4   F582         MOV       DPL,A
   \   0000B6   E4           CLR       A
   \   0000B7   3F           ADDC      A,R7
   \   0000B8   F583         MOV       DPH,A
   \   0000BA   D0E0         POP       A
   \   0000BC   F0           MOVX      @DPTR,A
   \   0000BD   7415         MOV       A,#0x15
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL     ??Subroutine47_0 & 0xFFFF
    434            MSGpkt->LinkQuality = sig->LinkQuality;
   \                     ??CrossCallReturnLabel_89:
   \   0000C5   8882         MOV       DPL,R0
   \   0000C7   F583         MOV       DPH,A
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   C0E0         PUSH      A
   \   0000CC   EE           MOV       A,R6
   \   0000CD   2416         ADD       A,#0x16
   \   0000CF   F582         MOV       DPL,A
   \   0000D1   E4           CLR       A
   \   0000D2   3F           ADDC      A,R7
   \   0000D3   F583         MOV       DPH,A
   \   0000D5   D0E0         POP       A
   \   0000D7   F0           MOVX      @DPTR,A
    435            MSGpkt->correlation = sig->correlation;
   \   0000D8   8882         MOV       DPL,R0
   \   0000DA   8983         MOV       DPH,R1
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   C0E0         PUSH      A
   \   0000E0   EE           MOV       A,R6
   \   0000E1   2417         ADD       A,#0x17
   \   0000E3   F582         MOV       DPL,A
   \   0000E5   E4           CLR       A
   \   0000E6   3F           ADDC      A,R7
   \   0000E7   F583         MOV       DPH,A
   \   0000E9   D0E0         POP       A
   \   0000EB   F0           MOVX      @DPTR,A
    436            MSGpkt->rssi = sig->rssi;
   \   0000EC   8882         MOV       DPL,R0
   \   0000EE   8983         MOV       DPH,R1
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   E0           MOVX      A,@DPTR
   \   0000F3   C0E0         PUSH      A
   \   0000F5   EE           MOV       A,R6
   \   0000F6   2418         ADD       A,#0x18
   \   0000F8   F582         MOV       DPL,A
   \   0000FA   E4           CLR       A
   \   0000FB   3F           ADDC      A,R7
   \   0000FC   F583         MOV       DPH,A
   \   0000FE   D0E0         POP       A
   \   000100   F0           MOVX      @DPTR,A
    437            MSGpkt->SecurityUse = SecurityUse;
   \   000101   7417         MOV       A,#0x17
   \   000103   12....       LCALL     ?XSTACK_DISP0_8
   \   000106   E0           MOVX      A,@DPTR
   \   000107   C0E0         PUSH      A
   \   000109   EE           MOV       A,R6
   \   00010A   2419         ADD       A,#0x19
   \   00010C   F582         MOV       DPL,A
   \   00010E   E4           CLR       A
   \   00010F   3F           ADDC      A,R7
   \   000110   F583         MOV       DPH,A
   \   000112   D0E0         POP       A
   \   000114   F0           MOVX      @DPTR,A
    438            MSGpkt->timestamp = timestamp;
   \   000115   7418         MOV       A,#0x18
   \   000117   12....       LCALL     ?XSTACK_DISP0_8
   \   00011A   12....       LCALL     ?XLOAD_R0123
   \   00011D   EE           MOV       A,R6
   \   00011E   241A         ADD       A,#0x1a
   \   000120   F582         MOV       DPL,A
   \   000122   E4           CLR       A
   \   000123   3F           ADDC      A,R7
   \   000124   F583         MOV       DPH,A
   \   000126   12....       LCALL     ?XSTORE_R0123
    439            MSGpkt->nwkSeqNum = nwkSeqNum;
   \   000129   EE           MOV       A,R6
   \   00012A   241E         ADD       A,#0x1e
   \   00012C   F582         MOV       DPL,A
   \   00012E   E4           CLR       A
   \   00012F   3F           ADDC      A,R7
   \   000130   F583         MOV       DPH,A
   \   000132   E5..         MOV       A,?V6
   \   000134   12....       LCALL     ?Subroutine28 & 0xFFFF
    440            MSGpkt->macDestAddr = aff->macDestAddr;
   \                     ??CrossCallReturnLabel_38:
   \   000137   A3           INC       DPTR
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   A3           INC       DPTR
   \   00013B   A3           INC       DPTR
   \   00013C   A3           INC       DPTR
   \   00013D   A3           INC       DPTR
   \   00013E   A3           INC       DPTR
   \   00013F   A3           INC       DPTR
   \   000140   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000143   EE           MOV       A,R6
   \   000144   2412         ADD       A,#0x12
   \   000146   12....       LCALL     ?Subroutine26 & 0xFFFF
    441            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_83:
   \   000149   7413         MOV       A,#0x13
   \   00014B   12....       LCALL     ?XSTACK_DISP0_8
   \   00014E   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000151   EE           MOV       A,R6
   \   000152   2410         ADD       A,#0x10
   \   000154   12....       LCALL     ?Subroutine26 & 0xFFFF
    442            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_84:
   \   000157   EE           MOV       A,R6
   \   000158   241F         ADD       A,#0x1f
   \   00015A   F582         MOV       DPL,A
   \   00015C   E4           CLR       A
   \   00015D   3F           ADDC      A,R7
   \   00015E   F583         MOV       DPH,A
   \   000160   E4           CLR       A
   \   000161   F0           MOVX      @DPTR,A
   \   000162   E5..         MOV       A,?V0
   \   000164   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000167   F8           MOV       R0,A
   \   000168   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00016B   E8           MOV       A,R0
   \   00016C   F0           MOVX      @DPTR,A
   \   00016D   A3           INC       DPTR
   \   00016E   E4           CLR       A
   \   00016F   F0           MOVX      @DPTR,A
    443            MSGpkt->cmd.DataLength = aff->asduLength;
    444          
    445            if ( MSGpkt->cmd.DataLength )
   \   000170   E8           MOV       A,R0
   \   000171   6032         JZ        ??afBuildMSGIncoming_0
    446            {
    447              MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   000173   EE           MOV       A,R6
   \   000174   2424         ADD       A,#0x24
   \   000176   FA           MOV       R2,A
   \   000177   E4           CLR       A
   \   000178   3F           ADDC      A,R7
   \   000179   FB           MOV       R3,A
   \   00017A   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00017D   12....       LCALL     ?Subroutine30 & 0xFFFF
    448              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \                     ??CrossCallReturnLabel_46:
   \   000180                ; Setup parameters for call to function osal_memcpy
   \   000180   85..82       MOV       DPL,?XSP + 0
   \   000183   85..83       MOV       DPH,?XSP + 1
   \   000186   E0           MOVX      A,@DPTR
   \   000187   F5..         MOV       ?V0,A
   \   000189   A3           INC       DPTR
   \   00018A   E0           MOVX      A,@DPTR
   \   00018B   F5..         MOV       ?V1,A
   \   00018D   75..00       MOV       ?V2,#0x0
   \   000190   78..         MOV       R0,#?V0
   \   000192   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000195   12....       LCALL     ?Subroutine35 & 0xFFFF
    449            }
   \                     ??CrossCallReturnLabel_58:
   \   000198   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00019B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00019E   7403         MOV       A,#0x3
   \   0001A0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A3   8007         SJMP      ??afBuildMSGIncoming_1
    450            else
    451            {
    452              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_0:
   \   0001A5   12....       LCALL     ?Subroutine36 & 0xFFFF
    453            }
   \                     ??CrossCallReturnLabel_60:
   \   0001A8   E4           CLR       A
   \   0001A9   F0           MOVX      @DPTR,A
   \   0001AA   A3           INC       DPTR
   \   0001AB   F0           MOVX      @DPTR,A
    454          
    455          #if defined ( MT_AF_CB_FUNC )
    456            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    457            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    458            {
    459              MT_AfIncomingMsg( (void *)MSGpkt );
    460              // Release the memory.
    461              osal_msg_deallocate( (void *)MSGpkt );
    462            }
    463            else
    464          #endif
    465            {
    466              // Send message through task message.
    467              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_1:
   \   0001AC                ; Setup parameters for call to function osal_msg_send
   \   0001AC   EE           MOV       A,R6
   \   0001AD   FA           MOV       R2,A
   \   0001AE   EF           MOV       A,R7
   \   0001AF   FB           MOV       R3,A
   \   0001B0   12....       LCALL     ?Subroutine9 & 0xFFFF
    468            }
    469          }
   \                     ??CrossCallReturnLabel_5:
   \   0001B3   7402         MOV       A,#0x2
   \   0001B5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B8                REQUIRE ?Subroutine4
   \   0001B8                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   EE           MOV       A,R6
   \   000001   2422         ADD       A,#0x22
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   EE           MOV       A,R6
   \   000001   2420         ADD       A,#0x20
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   2410         ADD       A,#0x10
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   35..         ADDC      A,?V1
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine46_0
   \   000006                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine47_0
   \   000001                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET
    470          
    471          /*********************************************************************
    472           * @fn      AF_DataRequest
    473           *
    474           * @brief   Common functionality for invoking APSDE_DataReq() for both
    475           *          SendMulti and MSG-Send.
    476           *
    477           * input parameters
    478           *
    479           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    480           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    481           * @param   cID - A valid cluster ID as specified by the Profile.
    482           * @param   len - Number of bytes of data pointed to by next param.
    483           * @param  *buf - A pointer to the data bytes to send.
    484           * @param  *transID - A pointer to a byte which can be modified and which will
    485           *                    be used as the transaction sequence number of the msg.
    486           * @param   options - Valid bit mask of Tx options.
    487           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    488           *
    489           * output parameters
    490           *
    491           * @param  *transID - Incremented by one if the return value is success.
    492           *
    493           * @return  afStatus_t - See previous definition of afStatus_... types.
    494           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    495          uint8 AF_DataRequestDiscoverRoute = TRUE;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    496          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    497                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    498                                     uint8 options, uint8 radius )
    499          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV       A,#-0x1e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   \   000012   89..         MOV       ?V2,R1
    500            pDescCB pfnDescCB;
    501            ZStatus_t stat;
    502            APSDE_DataReq_t req;
    503            afDataReqMTU_t mtu;
    504          
    505            // Verify source end point
    506            if ( srcEP == NULL )
   \   000014   EC           MOV       A,R4
   \   000015   4D           ORL       A,R5
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??AF_DataRequest_0 & 0xFFFF
    507            {
    508              return afStatus_INVALID_PARAMETER;
    509            }
    510          
    511          #if !defined( REFLECTOR )
    512            if ( dstAddr->addrMode == afAddrNotPresent )
    513            {
    514              return afStatus_INVALID_PARAMETER;
    515            }
    516          #endif
    517          
    518            // Check if route is available before sending data
    519            if ( options & AF_LIMIT_CONCENTRATOR  )
   \   00001B   E9           MOV       A,R1
   \   00001C   A2E3         MOV       C,0xE0 /* A   */.3
   \   00001E   5036         JNC       ??AF_DataRequest_1
    520            {
    521              if ( dstAddr->addrMode != afAddr16Bit )
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   6402         XRL       A,#0x2
   \   00002F   6003         JZ        $+5
   \   000031   02....       LJMP      ??AF_DataRequest_0 & 0xFFFF
    522              {
    523                return ( afStatus_INVALID_PARAMETER );
    524              }
    525          
    526              // First, make sure the destination is not its self, then check for an existing route.
    527              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    528                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \   000034                ; Setup parameters for call to function NLME_GetShortAddr
   \   000034   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   68           XRL       A,R0
   \   00003D   7003         JNZ       ??AF_DataRequest_2
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   69           XRL       A,R1
   \                     ??AF_DataRequest_2:
   \   000042   6012         JZ        ??AF_DataRequest_1
   \   000044                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000044   7C03         MOV       R4,#0x3
   \   000046   7901         MOV       R1,#0x1
   \   000048   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00004B   12....       LCALL     `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   00004E   E9           MOV       A,R1
   \   00004F   6005         JZ        ??AF_DataRequest_1
    529              {
    530                // A valid route to a concentrator wasn't found
    531                return ( afStatus_NO_ROUTE );
   \   000051   79CD         MOV       R1,#-0x33
   \   000053   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    532              }
    533            }
    534          
    535            // Validate broadcasting
    536            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    537                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_1:
   \   000056   8E82         MOV       DPL,R6
   \   000058   8F83         MOV       DPH,R7
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   6402         XRL       A,#0x2
   \   000065   6011         JZ        ??AF_DataRequest_4
   \   000067   8E82         MOV       DPL,R6
   \   000069   8F83         MOV       DPH,R7
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   640F         XRL       A,#0xf
   \   000076   7047         JNZ       ??AF_DataRequest_5
    538            {
    539              // Check for valid broadcast values
    540              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_4:
   \   000078                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000078   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   00007B   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00007E   E9           MOV       A,R1
   \   00007F   8E82         MOV       DPL,R6
   \   000081   8F83         MOV       DPH,R7
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   602B         JZ        ??AF_DataRequest_6
    541              {
    542                // Force mode to broadcast
    543                dstAddr->addrMode = afAddrBroadcast;
   \   00008D   740F         MOV       A,#0xf
   \   00008F   F0           MOVX      @DPTR,A
    544              }
    545              else
    546              {
    547                // Address is not a valid broadcast type
    548                if ( dstAddr->addrMode == afAddrBroadcast )
    549                {
    550                  return afStatus_INVALID_PARAMETER;
    551                }
    552              }
    553            }
    554            else if ( dstAddr->addrMode != afAddr64Bit &&
    555                      dstAddr->addrMode != afAddrGroup &&
    556                      dstAddr->addrMode != afAddrNotPresent )
    557            {
    558              return afStatus_INVALID_PARAMETER;
    559            }
    560          
    561            // Set destination address
    562            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_7:
   \   000090   EE           MOV       A,R6
   \   000091   2408         ADD       A,#0x8
   \   000093   F8           MOV       R0,A
   \   000094   E4           CLR       A
   \   000095   3F           ADDC      A,R7
   \   000096   F9           MOV       R1,A
   \   000097   8882         MOV       DPL,R0
   \   000099   F583         MOV       DPH,A
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   C0E0         PUSH      A
   \   00009E   740A         MOV       A,#0xa
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   D0E0         POP       A
   \   0000A5   12....       LCALL     ?Subroutine31 & 0xFFFF
    563            if ( dstAddr->addrMode == afAddr64Bit )
   \                     ??CrossCallReturnLabel_48:
   \   0000A8   704B         JNZ       ??AF_DataRequest_8
    564              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   0000AA                ; Setup parameters for call to function sAddrExtCpy
   \   0000AA   EE           MOV       A,R6
   \   0000AB   FC           MOV       R4,A
   \   0000AC   EF           MOV       A,R7
   \   0000AD   FD           MOV       R5,A
   \   0000AE   7402         MOV       A,#0x2
   \   0000B0   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B3   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000B6   804C         SJMP      ??CrossCallReturnLabel_78
   \                     ??AF_DataRequest_6:
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   640F         XRL       A,#0xf
   \   0000BB   70D3         JNZ       ??AF_DataRequest_7
   \   0000BD   8031         SJMP      ??AF_DataRequest_0
   \                     ??AF_DataRequest_5:
   \   0000BF   8E82         MOV       DPL,R6
   \   0000C1   8F83         MOV       DPH,R7
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   A3           INC       DPTR
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   6403         XRL       A,#0x3
   \   0000CE   60C0         JZ        ??AF_DataRequest_7
   \   0000D0   8E82         MOV       DPL,R6
   \   0000D2   8F83         MOV       DPH,R7
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   6401         XRL       A,#0x1
   \   0000DF   60AF         JZ        ??AF_DataRequest_7
   \   0000E1   8E82         MOV       DPL,R6
   \   0000E3   8F83         MOV       DPH,R7
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   60A0         JZ        ??AF_DataRequest_7
   \                     ??AF_DataRequest_0:
   \   0000F0   7902         MOV       R1,#0x2
   \   0000F2   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    565            else
    566              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_8:
   \   0000F5   8E82         MOV       DPL,R6
   \   0000F7   8F83         MOV       DPH,R7
   \   0000F9   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0000FC   7402         MOV       A,#0x2
   \   0000FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000101   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    567          
    568            req.profileID = ZDO_PROFILE_ID;
   \                     ??CrossCallReturnLabel_78:
   \   000104   7411         MOV       A,#0x11
   \   000106   12....       LCALL     ?XSTACK_DISP0_8
   \   000109   E4           CLR       A
   \   00010A   F0           MOVX      @DPTR,A
   \   00010B   A3           INC       DPTR
   \   00010C   F0           MOVX      @DPTR,A
    569          
    570            if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   00010D   90....       MOV       DPTR,#epList
   \                     ??AF_DataRequest_9:
   \   000110   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000113   604C         JZ        ??AF_DataRequest_10
   \   000115   8882         MOV       DPL,R0
   \   000117   8983         MOV       DPH,R1
   \   000119   A3           INC       DPTR
   \   00011A   A3           INC       DPTR
   \   00011B   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00011E   E5..         MOV       A,?V0
   \   000120   6A           XRL       A,R2
   \   000121   7003         JNZ       ??AF_DataRequest_11
   \   000123   E5..         MOV       A,?V1
   \   000125   6B           XRL       A,R3
   \                     ??AF_DataRequest_11:
   \   000126   8882         MOV       DPL,R0
   \   000128   8983         MOV       DPH,R1
   \   00012A   70E4         JNZ       ??AF_DataRequest_9
   \   00012C   A3           INC       DPTR
   \   00012D   A3           INC       DPTR
   \   00012E   A3           INC       DPTR
   \   00012F   A3           INC       DPTR
   \   000130   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000133   FD           MOV       R5,A
   \   000134   E8           MOV       A,R0
   \   000135   4D           ORL       A,R5
   \   000136   6029         JZ        ??AF_DataRequest_10
    571            {
    572              uint16 *pID = (uint16 *)(pfnDescCB(
    573                                           AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   000138                ; Setup parameters for indirect call
   \   000138   85..82       MOV       DPL,?V0
   \   00013B   85..83       MOV       DPH,?V1
   \   00013E   E0           MOVX      A,@DPTR
   \   00013F   FA           MOV       R2,A
   \   000140   7902         MOV       R1,#0x2
   \   000142   8882         MOV       DPL,R0
   \   000144   8D83         MOV       DPH,R5
   \   000146   12....       LCALL     ?CALL_IND
    574              if ( pID )
   \   000149   EA           MOV       A,R2
   \   00014A   4B           ORL       A,R3
   \   00014B   6033         JZ        ??CrossCallReturnLabel_80
    575              {
    576                req.profileID = *pID;
   \   00014D   8A82         MOV       DPL,R2
   \   00014F   8B83         MOV       DPH,R3
   \   000151   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000154   7411         MOV       A,#0x11
   \   000156   12....       LCALL     ?XSTACK_DISP0_8
   \   000159   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    577                osal_mem_free( pID );
   \                     ??CrossCallReturnLabel_79:
   \   00015C                ; Setup parameters for call to function osal_mem_free
   \   00015C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00015F   801F         SJMP      ??CrossCallReturnLabel_80
    578              }
    579            }
    580            else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_10:
   \   000161   85..82       MOV       DPL,?V0
   \   000164   85..83       MOV       DPH,?V1
   \   000167   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00016A   6014         JZ        ??CrossCallReturnLabel_80
    581            {
    582              req.profileID = srcEP->simpleDesc->AppProfId;
   \   00016C   85..82       MOV       DPL,?V0
   \   00016F   85..83       MOV       DPH,?V1
   \   000172   12....       LCALL     ?Subroutine23 & 0xFFFF
    583            }
   \                     ??CrossCallReturnLabel_72:
   \   000175   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000178   7411         MOV       A,#0x11
   \   00017A   12....       LCALL     ?XSTACK_DISP0_8
   \   00017D   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    584          
    585            req.txOptions = 0;
   \                     ??CrossCallReturnLabel_80:
   \   000180   7417         MOV       A,#0x17
   \   000182   12....       LCALL     ?XSTACK_DISP0_8
   \   000185   E4           CLR       A
   \   000186   F0           MOVX      @DPTR,A
   \   000187   A3           INC       DPTR
   \   000188   F0           MOVX      @DPTR,A
    586          
    587            if ( ( options & AF_ACK_REQUEST              ) &&
    588                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    589                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   000189   E5..         MOV       A,?V2
   \   00018B   A2E4         MOV       C,0xE0 /* A   */.4
   \   00018D   501A         JNC       ??AF_DataRequest_12
   \   00018F   740A         MOV       A,#0xa
   \   000191   12....       LCALL     ?XSTACK_DISP0_8
   \   000194   E0           MOVX      A,@DPTR
   \   000195   640F         XRL       A,#0xf
   \   000197   6010         JZ        ??AF_DataRequest_12
   \   000199   E0           MOVX      A,@DPTR
   \   00019A   6401         XRL       A,#0x1
   \   00019C   600B         JZ        ??AF_DataRequest_12
    590            {
    591              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   00019E   7417         MOV       A,#0x17
   \   0001A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A3   7404         MOV       A,#0x4
   \   0001A5   F0           MOVX      @DPTR,A
   \   0001A6   A3           INC       DPTR
   \   0001A7   E4           CLR       A
   \   0001A8   F0           MOVX      @DPTR,A
    592            }
    593          
    594            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_12:
   \   0001A9   E5..         MOV       A,?V2
   \   0001AB   A2E7         MOV       C,0xE0 /* A   */.7
   \   0001AD   5009         JNC       ??AF_DataRequest_13
    595            {
    596              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   0001AF   7417         MOV       A,#0x17
   \   0001B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B4   E0           MOVX      A,@DPTR
   \   0001B5   4410         ORL       A,#0x10
   \   0001B7   F0           MOVX      @DPTR,A
    597            }
    598          
    599            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_13:
   \   0001B8   E5..         MOV       A,?V2
   \   0001BA   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001BC   5012         JNC       ??AF_DataRequest_14
    600            {
    601              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   0001BE   7417         MOV       A,#0x17
   \   0001C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C3   E0           MOVX      A,@DPTR
   \   0001C4   4401         ORL       A,#0x1
   \   0001C6   F0           MOVX      @DPTR,A
    602              mtu.aps.secure = TRUE;
   \   0001C7   7401         MOV       A,#0x1
   \   0001C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CC   7401         MOV       A,#0x1
   \   0001CE   8006         SJMP      ??AF_DataRequest_15
    603            }
    604            else
    605            {
    606              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_14:
   \   0001D0   7401         MOV       A,#0x1
   \   0001D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D5   E4           CLR       A
   \                     ??AF_DataRequest_15:
   \   0001D6   F0           MOVX      @DPTR,A
    607            }
    608          
    609            if ( options & AF_PREPROCESS )
   \   0001D7   E5..         MOV       A,?V2
   \   0001D9   A2E2         MOV       C,0xE0 /* A   */.2
   \   0001DB   5009         JNC       ??AF_DataRequest_16
    610            {
    611              req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
   \   0001DD   7417         MOV       A,#0x17
   \   0001DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E2   E0           MOVX      A,@DPTR
   \   0001E3   4440         ORL       A,#0x40
   \   0001E5   F0           MOVX      @DPTR,A
    612            }
    613          
    614            mtu.kvp = FALSE;
   \                     ??AF_DataRequest_16:
   \   0001E6   85..82       MOV       DPL,?XSP + 0
   \   0001E9   85..83       MOV       DPH,?XSP + 1
   \   0001EC   E4           CLR       A
   \   0001ED   F0           MOVX      @DPTR,A
   \   0001EE   7434         MOV       A,#0x34
   \   0001F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F3   12....       LCALL     ?Subroutine19 & 0xFFFF
    615          
    616            req.transID       = *transID;
   \                     ??CrossCallReturnLabel_21:
   \   0001F6   85..82       MOV       DPL,?V6
   \   0001F9   F583         MOV       DPH,A
   \   0001FB   E0           MOVX      A,@DPTR
   \   0001FC   C0E0         PUSH      A
   \   0001FE   7419         MOV       A,#0x19
   \   000200   12....       LCALL     ?XSTACK_DISP0_8
   \   000203   D0E0         POP       A
   \   000205   12....       LCALL     ?Subroutine28 & 0xFFFF
    617            req.srcEP         = srcEP->endPoint;
   \                     ??CrossCallReturnLabel_39:
   \   000208   E0           MOVX      A,@DPTR
   \   000209   C0E0         PUSH      A
   \   00020B   740B         MOV       A,#0xb
   \   00020D   12....       LCALL     ?XSTACK_DISP0_8
   \   000210   D0E0         POP       A
   \   000212   F0           MOVX      @DPTR,A
    618            req.dstEP         = dstAddr->endPoint;
   \   000213   8E82         MOV       DPL,R6
   \   000215   8F83         MOV       DPH,R7
   \   000217   A3           INC       DPTR
   \   000218   A3           INC       DPTR
   \   000219   A3           INC       DPTR
   \   00021A   A3           INC       DPTR
   \   00021B   A3           INC       DPTR
   \   00021C   A3           INC       DPTR
   \   00021D   A3           INC       DPTR
   \   00021E   A3           INC       DPTR
   \   00021F   A3           INC       DPTR
   \   000220   E0           MOVX      A,@DPTR
   \   000221   C0E0         PUSH      A
   \   000223   740C         MOV       A,#0xc
   \   000225   12....       LCALL     ?XSTACK_DISP0_8
   \   000228   D0E0         POP       A
   \   00022A   F0           MOVX      @DPTR,A
    619            req.clusterID     = cID;
   \   00022B   742E         MOV       A,#0x2e
   \   00022D   12....       LCALL     ?XSTACK_DISP0_8
   \   000230   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000233   740F         MOV       A,#0xf
   \   000235   12....       LCALL     ?XSTACK_DISP0_8
   \   000238   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00023B   7430         MOV       A,#0x30
   \   00023D   12....       LCALL     ?XSTACK_DISP0_8
   \   000240   E0           MOVX      A,@DPTR
   \   000241   FE           MOV       R6,A
   \   000242   A3           INC       DPTR
   \   000243   E0           MOVX      A,@DPTR
   \   000244   FF           MOV       R7,A
    620            req.asduLen       = len;
   \   000245   7413         MOV       A,#0x13
   \   000247   12....       LCALL     ?XSTACK_DISP0_8
   \   00024A   EE           MOV       A,R6
   \   00024B   F0           MOVX      @DPTR,A
   \   00024C   A3           INC       DPTR
   \   00024D   EF           MOV       A,R7
   \   00024E   F0           MOVX      @DPTR,A
    621            req.asdu          = buf;
   \   00024F   7432         MOV       A,#0x32
   \   000251   12....       LCALL     ?XSTACK_DISP0_8
   \   000254   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000257   7415         MOV       A,#0x15
   \   000259   12....       LCALL     ?XSTACK_DISP0_8
   \   00025C   12....       LCALL     ??Subroutine46_0 & 0xFFFF
    622            req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
   \                     ??CrossCallReturnLabel_82:
   \   00025F   90....       MOV       DPTR,#AF_DataRequestDiscoverRoute
   \   000262   E0           MOVX      A,@DPTR
   \   000263   C0E0         PUSH      A
   \   000265   741A         MOV       A,#0x1a
   \   000267   12....       LCALL     ?XSTACK_DISP0_8
   \   00026A   D0E0         POP       A
   \   00026C   F0           MOVX      @DPTR,A
    623            req.radiusCounter = radius;
   \   00026D   7436         MOV       A,#0x36
   \   00026F   12....       LCALL     ?XSTACK_DISP0_8
   \   000272   E0           MOVX      A,@DPTR
   \   000273   C0E0         PUSH      A
   \   000275   741B         MOV       A,#0x1b
   \   000277   12....       LCALL     ?XSTACK_DISP0_8
   \   00027A   D0E0         POP       A
   \   00027C   F0           MOVX      @DPTR,A
    624          #if defined ( INTER_PAN )
    625            req.dstPanId      = dstAddr->panId;
    626          
    627            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    628            {
    629              if ( len > INTERP_DataReqMTU() )
    630              {
    631                stat = afStatus_INVALID_PARAMETER;
    632              }
    633              else
    634              {
    635                stat = INTERP_DataReq( &req );
    636              }
    637            }
    638            else
    639          #endif // INTER_PAN
    640            {
    641              if (len > afDataReqMTU( &mtu ) )
   \   00027D                ; Setup parameters for call to function afDataReqMTU
   \   00027D   AA..         MOV       R2,?XSP + 0
   \   00027F   AB..         MOV       R3,?XSP + 1
   \   000281   12....       LCALL     `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   000284   E9           MOV       A,R1
   \   000285   C3           CLR       C
   \   000286   9E           SUBB      A,R6
   \   000287   E4           CLR       A
   \   000288   9F           SUBB      A,R7
   \   000289   5019         JNC       ??AF_DataRequest_17
    642              {
    643                if (apsfSendFragmented)
   \   00028B   90....       MOV       DPTR,#apsfSendFragmented
   \   00028E   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000291   600D         JZ        ??AF_DataRequest_18
    644                {
    645                  stat = (*apsfSendFragmented)( &req );
   \   000293                ; Setup parameters for indirect call
   \   000293   7402         MOV       A,#0x2
   \   000295   12....       LCALL     ?XSTACK_DISP101_8
   \   000298   12....       LCALL     ??Subroutine45_0 & 0xFFFF
    646                }
   \                     ??CrossCallReturnLabel_69:
   \   00029B   12....       LCALL     ?CALL_IND
   \   00029E   800C         SJMP      ??AF_DataRequest_19
    647                else
    648                {
    649                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_18:
   \   0002A0   7E02         MOV       R6,#0x2
   \   0002A2   800A         SJMP      ??AF_DataRequest_20
    650                }
    651              }
    652              else
    653              {
    654                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_17:
   \   0002A4                ; Setup parameters for call to function APSDE_DataReq
   \   0002A4   7402         MOV       A,#0x2
   \   0002A6   12....       LCALL     ?XSTACK_DISP101_8
   \   0002A9   12....       LCALL     `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \                     ??AF_DataRequest_19:
   \   0002AC   E9           MOV       A,R1
   \   0002AD   FE           MOV       R6,A
    655              }
    656            }
    657          
    658            /*
    659             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    660             * get added to the NWK databufs. So it will not go OTA and it will not get
    661             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    662             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    663             * message with the first in line TransSeqNumber, even on a multi message.
    664             * Also note that a reflected msg will not have its confirmation generated
    665             * here.
    666             */
    667            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    668                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_20:
   \   0002AE   740A         MOV       A,#0xa
   \   0002B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B3   E0           MOVX      A,@DPTR
   \   0002B4   6402         XRL       A,#0x2
   \   0002B6   7026         JNZ       ??AF_DataRequest_21
   \   0002B8                ; Setup parameters for call to function NLME_GetShortAddr
   \   0002B8   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0002BB   7402         MOV       A,#0x2
   \   0002BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C0   E0           MOVX      A,@DPTR
   \   0002C1   68           XRL       A,R0
   \   0002C2   7003         JNZ       ??AF_DataRequest_22
   \   0002C4   A3           INC       DPTR
   \   0002C5   E0           MOVX      A,@DPTR
   \   0002C6   69           XRL       A,R1
   \                     ??AF_DataRequest_22:
   \   0002C7   7015         JNZ       ??AF_DataRequest_21
    669            {
    670              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   0002C9                ; Setup parameters for call to function afDataConfirm
   \   0002C9   EE           MOV       A,R6
   \   0002CA   FB           MOV       R3,A
   \   0002CB   85..82       MOV       DPL,?V6
   \   0002CE   85..83       MOV       DPH,?V7
   \   0002D1   E0           MOVX      A,@DPTR
   \   0002D2   FA           MOV       R2,A
   \   0002D3   85..82       MOV       DPL,?V0
   \   0002D6   85..83       MOV       DPH,?V1
   \   0002D9   E0           MOVX      A,@DPTR
   \   0002DA   F9           MOV       R1,A
   \   0002DB   12....       LCALL     `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    671            }
    672          
    673            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_21:
   \   0002DE   EE           MOV       A,R6
   \   0002DF   7009         JNZ       ??AF_DataRequest_23
    674            {
    675              (*transID)++;
   \   0002E1   85..82       MOV       DPL,?V6
   \   0002E4   85..83       MOV       DPH,?V7
   \   0002E7   E0           MOVX      A,@DPTR
   \   0002E8   04           INC       A
   \   0002E9   F0           MOVX      @DPTR,A
    676            }
    677          
    678            return (afStatus_t)stat;
   \                     ??AF_DataRequest_23:
   \   0002EA   EE           MOV       A,R6
   \   0002EB   F9           MOV       R1,A
   \                     ??AF_DataRequest_3:
   \   0002EC   741E         MOV       A,#0x1e
   \   0002EE   02....       LJMP      ?Subroutine3 & 0xFFFF
    679          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000003   8A..         MOV       ?V4,R2
   \   000005   8B..         MOV       ?V5,R3
   \   000007   A8..         MOV       R0,?V4
   \   000009   A9..         MOV       R1,?V5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine51_0
   \   000004                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   E0           MOVX      A,@DPTR
   \   000006   6403         XRL       A,#0x3
   \   000008   22           RET
    680          
    681          #if defined ( ZIGBEE_SOURCE_ROUTING )
    682          /*********************************************************************
    683           * @fn      AF_DataRequestSrcRtg
    684           *
    685           * @brief   Common functionality for invoking APSDE_DataReq() for both
    686           *          SendMulti and MSG-Send.
    687           *
    688           * input parameters
    689           *
    690           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    691           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    692           * @param   cID - A valid cluster ID as specified by the Profile.
    693           * @param   len - Number of bytes of data pointed to by next param.
    694           * @param  *buf - A pointer to the data bytes to send.
    695           * @param  *transID - A pointer to a byte which can be modified and which will
    696           *                    be used as the transaction sequence number of the msg.
    697           * @param   options - Valid bit mask of Tx options.
    698           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    699           * @param   relayCnt - Number of devices in the relay list
    700           * @param   pRelayList - Pointer to the relay list
    701           *
    702           * output parameters
    703           *
    704           * @param  *transID - Incremented by one if the return value is success.
    705           *
    706           * @return  afStatus_t - See previous definition of afStatus_... types.
    707           */
    708          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    709          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    710                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    711                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    712          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   \   00000D   89..         MOV       ?V0,R1
    713            uint8 status;
    714          
    715            /* Add the source route to the source routing table */
    716            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
    717                                                   pRelayList );
   \   00000F                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000017   7415         MOV       A,#0x15
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00001F   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000022   12....       LCALL     `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   000025   E9           MOV       A,R1
   \   000026   F9           MOV       R1,A
    718          
    719            if( status == RTG_SUCCESS)
   \   000027   7043         JNZ       ??AF_DataRequestSrcRtg_0
    720            {
    721              /* Call AF_DataRequest to send the data */
    722              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   7414         MOV       A,#0x14
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F5..         MOV       ?V1,A
   \   000031   78..         MOV       R0,#?V1
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000036   7413         MOV       A,#0x13
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003E   7413         MOV       A,#0x13
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000046   7413         MOV       A,#0x13
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00004E   7413         MOV       A,#0x13
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000056   A9..         MOV       R1,?V0
   \   000058   AC..         MOV       R4,?V2
   \   00005A   AD..         MOV       R5,?V3
   \   00005C   EE           MOV       A,R6
   \   00005D   FA           MOV       R2,A
   \   00005E   EF           MOV       A,R7
   \   00005F   FB           MOV       R3,A
   \   000060   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000063   7409         MOV       A,#0x9
   \   000065   12....       LCALL     ?DEALLOC_XSTACK8
   \   000068   E9           MOV       A,R1
   \   000069   F9           MOV       R1,A
   \   00006A   800B         SJMP      ??AF_DataRequestSrcRtg_1
    723            }
    724            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   00006C   7405         MOV       A,#0x5
   \   00006E   69           XRL       A,R1
   \   00006F   7004         JNZ       ??AF_DataRequestSrcRtg_2
    725            {
    726              /* The source route relay count is exceeding the network limit */
    727              status = afStatus_INVALID_PARAMETER;
   \   000071   7902         MOV       R1,#0x2
   \   000073   8002         SJMP      ??AF_DataRequestSrcRtg_1
    728            }
    729            else
    730            {
    731              /* The guaranteed adding entry fails due to memory failure */
    732              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   000075   7910         MOV       R1,#0x10
    733            }
    734            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   000077   02....       LJMP      ?Subroutine0 & 0xFFFF
    735          }
    736          
    737          #endif
    738          
    739          /*********************************************************************
    740           * @fn      afFindEndPointDescList
    741           *
    742           * @brief   Find the endpoint description entry from the endpoint
    743           *          number.
    744           *
    745           * @param   EndPoint - Application Endpoint to look for
    746           *
    747           * @return  the address to the endpoint/interface description entry
    748           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    749          static epList_t *afFindEndPointDescList( uint8 EndPoint )
   \                     afFindEndPointDescList:
    750          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    751            epList_t *epSearch;
    752          
    753            for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
   \   000004   90....       MOV       DPTR,#epList
   \   000007   8004         SJMP      ??afFindEndPointDescList_0
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??afFindEndPointDescList_0:
   \   00000D   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000010   600B         JZ        ??afFindEndPointDescList_2
    754            {
    755              if (epSearch->epDesc->endPoint == EndPoint)
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   12....       LCALL     ?Subroutine18 & 0xFFFF
    756              {
    757                break;
    758              }
    759            }
   \                     ??CrossCallReturnLabel_124:
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   69           XRL       A,R1
   \   00001B   70EC         JNZ       ??afFindEndPointDescList_1
    760          
    761            return epSearch;
   \                     ??afFindEndPointDescList_2:
   \   00001D                REQUIRE ?Subroutine5
   \   00001D                ; // Fall through to label ?Subroutine5
    762          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine52_0
   \   000001                ; // Fall through to label ??Subroutine52_0
    763          
    764          /*********************************************************************
    765           * @fn      afFindEndPointDesc
    766           *
    767           * @brief   Find the endpoint description entry from the endpoint
    768           *          number.
    769           *
    770           * @param   EndPoint - Application Endpoint to look for
    771           *
    772           * @return  the address to the endpoint/interface description entry
    773           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    774          endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
   \                     afFindEndPointDesc:
    775          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    776            epList_t *epSearch;
    777          
    778            // Look for the endpoint
    779            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     ?Subroutine32 & 0xFFFF
    780          
    781            if ( epSearch )
   \                     ??CrossCallReturnLabel_50:
   \   000008   6007         JZ        ??afFindEndPointDesc_0
    782              return ( epSearch->epDesc );
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00000F   8004         SJMP      ??afFindEndPointDesc_1
    783            else
    784              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   000011   7A00         MOV       R2,#0x0
   \   000013   7B00         MOV       R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   000015   02....       LJMP      ?Subroutine1 & 0xFFFF
    785          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   E582         MOV       A,DPL
   \   000009   4583         ORL       A,DPH
   \   00000B   22           RET
    786          
    787          /*********************************************************************
    788           * @fn      afFindSimpleDesc
    789           *
    790           * @brief   Find the Simple Descriptor from the endpoint number.
    791           *
    792           * @param   EP - Application Endpoint to look for.
    793           *
    794           * @return  Non-zero to indicate that the descriptor memory must be freed.
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
   \                     afFindSimpleDesc:
    797          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
    798            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV       ?V2,R2
   \   000010   8B..         MOV       ?V3,R3
   \   000012   AC..         MOV       R4,?V2
   \   000014   AD..         MOV       R5,?V3
    799            uint8 rtrn = FALSE;
   \   000016   7900         MOV       R1,#0x0
    800          
    801            if ( epItem )
   \   000018   EA           MOV       A,R2
   \   000019   4D           ORL       A,R5
   \   00001A   603D         JZ        ??afFindSimpleDesc_0
    802            {
    803              if ( epItem->pfnDescCB )
   \   00001C   8A82         MOV       DPL,R2
   \   00001E   8B83         MOV       DPH,R3
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000027   601A         JZ        ??afFindSimpleDesc_1
    804              {
    805                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   000029                ; Setup parameters for indirect call
   \   000029   AA..         MOV       R2,?V0
   \   00002B   09           INC       R1
   \   00002C   8C82         MOV       DPL,R4
   \   00002E   8D83         MOV       DPH,R5
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000035   12....       LCALL     ?CALL_IND
   \   000038   8E82         MOV       DPL,R6
   \   00003A   8F83         MOV       DPH,R7
   \   00003C   12....       LCALL     ?Subroutine30 & 0xFFFF
    806                rtrn = TRUE;
   \                     ??CrossCallReturnLabel_47:
   \   00003F   7901         MOV       R1,#0x1
   \   000041   801E         SJMP      ??afFindSimpleDesc_2
    807              }
    808              else
    809              {
    810                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000043   8C82         MOV       DPL,R4
   \   000045   8D83         MOV       DPH,R5
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   12....       LCALL     ?Subroutine17 & 0xFFFF
    811              }
    812            }
   \                     ??CrossCallReturnLabel_18:
   \   00004C   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   EA           MOV       A,R2
   \   000054   F0           MOVX      @DPTR,A
   \   000055   A3           INC       DPTR
   \   000056   EB           MOV       A,R3
   \   000057   8007         SJMP      ??afFindSimpleDesc_3
    813            else
    814            {
    815              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   E4           CLR       A
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \                     ??afFindSimpleDesc_3:
   \   000060   F0           MOVX      @DPTR,A
    816            }
    817          
    818            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   000061                REQUIRE ?Subroutine0
   \   000061                ; // Fall through to label ?Subroutine0
    819          }
    820          
    821          /*********************************************************************
    822           * @fn      afGetDescCB
    823           *
    824           * @brief   Get the Descriptor callback function.
    825           *
    826           * @param   epDesc - pointer to the endpoint descriptor
    827           *
    828           * @return  function pointer or NULL
    829           */
    830          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    831          {
    832            epList_t *epSearch;
    833          
    834            // Start at the beginning
    835            epSearch = epList;
    836          
    837            // Look through the list until the end
    838            while ( epSearch )
    839            {
    840              // Is there a match?
    841              if ( epSearch->epDesc == epDesc )
    842              {
    843                return ( epSearch->pfnDescCB );
    844              }
    845              else
    846                epSearch = epSearch->nextDesc;  // Next entry
    847            }
    848          
    849            return ( (pDescCB)NULL );
    850          }
    851          
    852          /*********************************************************************
    853           * @fn      afDataReqMTU
    854           *
    855           * @brief   Get the Data Request MTU(Max Transport Unit).
    856           *
    857           * @param   fields - afDataReqMTU_t
    858           *
    859           * @return  uint8(MTU)
    860           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    861          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    862          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    863            uint8 len;
    864            uint8 hdr;
    865          
    866            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6401         XRL       A,#0x1
   \   00000C   7004         JNZ       ??afDataReqMTU_0
    867            {
    868              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV       R6,#0x8
   \   000010   8002         SJMP      ??afDataReqMTU_1
    869            }
    870            else
    871            {
    872              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV       R6,#0x0
    873            }
    874          
    875            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
    876          
    877            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC       DPTR
   \   000015   AA82         MOV       R2,DPL
   \   000017   AB83         MOV       R3,DPH
   \   000019   12....       LCALL     `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   00001C   E9           MOV       A,R1
   \   00001D   C3           CLR       C
   \   00001E   9E           SUBB      A,R6
   \   00001F   F9           MOV       R1,A
   \   000020   02....       LJMP      ?Subroutine2 & 0xFFFF
    878          }
    879          
    880          /*********************************************************************
    881           * @fn      afGetMatch
    882           *
    883           * @brief   Set the allow response flag.
    884           *
    885           * @param   ep - Application Endpoint to look for
    886           * @param   action - true - allow response, false - no response
    887           *
    888           * @return  TRUE allow responses, FALSE no response
    889           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    890          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    891          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    892            epList_t *epSearch;
    893          
    894            // Look for the endpoint
    895            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     ?Subroutine32 & 0xFFFF
    896          
    897            if ( epSearch )
   \                     ??CrossCallReturnLabel_51:
   \   000008   6011         JZ        ??afGetMatch_0
    898            {
    899              if ( epSearch->flags & eEP_AllowMatch )
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   A2E0         MOV       C,0xE0 /* A   */.0
   \   000015   5004         JNC       ??afGetMatch_0
    900                return ( TRUE );
   \   000017   7901         MOV       R1,#0x1
   \   000019   8002         SJMP      ??afGetMatch_1
    901              else
    902                return ( FALSE );
    903            }
    904            else
    905              return ( FALSE );
   \                     ??afGetMatch_0:
   \   00001B   7900         MOV       R1,#0x0
   \                     ??afGetMatch_1:
   \   00001D                REQUIRE ?Subroutine1
   \   00001D                ; // Fall through to label ?Subroutine1
    906          }
    907          
    908          /*********************************************************************
    909           * @fn      afSetMatch
    910           *
    911           * @brief   Set the allow response flag.
    912           *
    913           * @param   ep - Application Endpoint to look for
    914           * @param   action - true - allow response, false - no response
    915           *
    916           * @return  TRUE if success, FALSE if endpoint not found
    917           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    918          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
    919          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FF           MOV       R7,A
    920            epList_t *epSearch;
    921          
    922            // Look for the endpoint
    923            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL     ?Subroutine32 & 0xFFFF
    924          
    925            if ( epSearch )
   \                     ??CrossCallReturnLabel_52:
   \   00000A   6018         JZ        ??afSetMatch_0
    926            {
    927              if ( action )
   \   00000C   EF           MOV       A,R7
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   6005         JZ        ??afSetMatch_1
    928              {
    929                epSearch->flags |= eEP_AllowMatch;
   \   000017   E0           MOVX      A,@DPTR
   \   000018   D2E0         SETB      0xE0 /* A   */.0
   \   00001A   8003         SJMP      ??afSetMatch_2
    930              }
    931              else
    932              {
    933                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   C2E0         CLR       0xE0 /* A   */.0
   \                     ??afSetMatch_2:
   \   00001F   F0           MOVX      @DPTR,A
    934              }
    935              return ( TRUE );
   \   000020   7901         MOV       R1,#0x1
   \   000022   8002         SJMP      ??afSetMatch_3
    936            }
    937            else
    938              return ( FALSE );
   \                     ??afSetMatch_0:
   \   000024   7900         MOV       R1,#0x0
   \                     ??afSetMatch_3:
   \   000026   80..         SJMP      ?Subroutine1
    939          }
    940          
    941          /*********************************************************************
    942           * @fn      afNumEndPoints
    943           *
    944           * @brief   Returns the number of endpoints defined (including 0)
    945           *
    946           * @param   none
    947           *
    948           * @return  number of endpoints
    949           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    950          uint8 afNumEndPoints( void )
   \                     afNumEndPoints:
    951          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    952            epList_t *epSearch;
    953            uint8 endpoints;
    954          
    955            // Start at the beginning
    956            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00000A   8882         MOV       DPL,R0
   \   00000C   F583         MOV       DPH,A
    957            endpoints = 0;
   \   00000E   7900         MOV       R1,#0x0
   \   000010   8009         SJMP      ??afNumEndPoints_0
    958          
    959            while ( epSearch )
    960            {
    961              endpoints++;
   \                     ??afNumEndPoints_1:
   \   000012   09           INC       R1
    962              epSearch = epSearch->nextDesc;
   \   000013   E0           MOVX      A,@DPTR
   \   000014   FA           MOV       R2,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   8A82         MOV       DPL,R2
   \   000019   F583         MOV       DPH,A
    963            }
   \                     ??afNumEndPoints_0:
   \   00001B   E582         MOV       A,DPL
   \   00001D   4583         ORL       A,DPH
   \   00001F   70F1         JNZ       ??afNumEndPoints_1
    964          
    965            return ( endpoints );
   \   000021   02....       LJMP      ?Subroutine5 & 0xFFFF
    966          }
    967          
    968          /*********************************************************************
    969           * @fn      afEndPoints
    970           *
    971           * @brief   Fills in the passed in buffer with the endpoint (numbers).
    972           *          Use afNumEndPoints to find out how big a buffer to supply.
    973           *
    974           * @param   epBuf - pointer to mem used
    975           *
    976           * @return  void
    977           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    978          void afEndPoints( uint8 *epBuf, uint8 skipZDO )
   \                     afEndPoints:
    979          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
    980            epList_t *epSearch;
    981            uint8 endPoint;
    982          
    983            // Start at the beginning
    984            epSearch = epList;
   \   000006   90....       MOV       DPTR,#epList
   \   000009   8025         SJMP      ??afEndPoints_0
    985          
    986            while ( epSearch )
    987            {
    988              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   00000B   8882         MOV       DPL,R0
   \   00000D   8983         MOV       DPH,R1
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FD           MOV       R5,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F583         MOV       DPH,A
   \   000017   8D82         MOV       DPL,R5
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FD           MOV       R5,A
    989          
    990              if ( !skipZDO || endPoint != 0 )
   \   00001B   EC           MOV       A,R4
   \   00001C   6003         JZ        ??afEndPoints_2
   \   00001E   ED           MOV       A,R5
   \   00001F   600B         JZ        ??afEndPoints_3
    991                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   000021   ED           MOV       A,R5
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   F0           MOVX      @DPTR,A
   \   000027   A3           INC       DPTR
   \   000028   AA82         MOV       R2,DPL
   \   00002A   AB83         MOV       R3,DPH
    992          
    993              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   00002C   8882         MOV       DPL,R0
   \   00002E   8983         MOV       DPH,R1
    994            }
   \                     ??afEndPoints_0:
   \   000030   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000033   70D6         JNZ       ??afEndPoints_1
    995          }
   \   000035   02....       LJMP      ?Subroutine5 & 0xFFFF
    996          
    997          /*********************************************************************
    998           * @fn      afCopyAddress
    999           *
   1000           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
   1001           *          from the zAddrType_t parameter.
   1002           *
   1003           * @param   epBuf - pointer to mem used
   1004           *
   1005           * @return  void
   1006           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1007          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
   1008          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1009            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000009   EC           MOV       A,R4
   \   00000A   2408         ADD       A,#0x8
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3D           ADDC      A,R5
   \   00000F   F9           MOV       R1,A
   \   000010   8882         MOV       DPL,R0
   \   000012   F583         MOV       DPH,A
   \   000014   E0           MOVX      A,@DPTR
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   12....       LCALL     ?Subroutine31 & 0xFFFF
   1010            if ( zAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_49:
   \   000024   7005         JNZ       ??afCopyAddress_0
   1011            {
   1012              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   000026                ; Setup parameters for call to function sAddrExtCpy
   \   000026   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000029   8007         SJMP      ??CrossCallReturnLabel_3
   1013            }
   1014            else
   1015            {
   1016              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   00002B   8C82         MOV       DPL,R4
   \   00002D   8D83         MOV       DPH,R5
   \   00002F   12....       LCALL     ?Subroutine8 & 0xFFFF
   1017            }
   1018          
   1019            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1020            afAddr->panId = 0;
   \                     ??CrossCallReturnLabel_3:
   \   000032   8E82         MOV       DPL,R6
   \   000034   8F83         MOV       DPH,R7
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E4           CLR       A
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   F0           MOVX      @DPTR,A
   1021          }
   \   000044   02....       LJMP      ?Subroutine2 & 0xFFFF
   1022          
   1023          /**************************************************************************************************
   1024           * @fn          afAPSF_ConfigGet
   1025           *
   1026           * @brief       This function ascertains the fragmentation configuration that corresponds to
   1027           *              the specified EndPoint.
   1028           *
   1029           * input parameters
   1030           *
   1031           * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
   1032           *
   1033           * output parameters
   1034           *
   1035           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1036           *
   1037           * @return      None.
   1038           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1039          void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigGet:
   1040          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1041            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   A9..         MOV       R1,?V1
   1042          
   1043            if (pList == NULL)
   \   000010   EA           MOV       A,R2
   \   000011   49           ORL       A,R1
   \   000012   700D         JNZ       ??afAPSF_ConfigGet_0
   1044            {
   1045              pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   7432         MOV       A,#0x32
   \   00001A   F0           MOVX      @DPTR,A
   1046              pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   00001B   A3           INC       DPTR
   \   00001C   7401         MOV       A,#0x1
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   8021         SJMP      ??afAPSF_ConfigGet_1
   1047            }
   1048            else
   1049            {
   1050              (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigGet_0:
   \   000021                ; Setup parameters for call to function osal_memcpy
   \   000021   EA           MOV       A,R2
   \   000022   2406         ADD       A,#0x6
   \   000024   F5..         MOV       ?V0,A
   \   000026   E4           CLR       A
   \   000027   39           ADDC      A,R1
   \   000028   F5..         MOV       ?V1,A
   \   00002A   75..00       MOV       ?V2,#0x0
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000032   7C02         MOV       R4,#0x2
   \   000034   7D00         MOV       R5,#0x0
   \   000036   EE           MOV       A,R6
   \   000037   FA           MOV       R2,A
   \   000038   EF           MOV       A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003D   7403         MOV       A,#0x3
   \   00003F   12....       LCALL     ?DEALLOC_XSTACK8
   1051            }
   1052          }
   \                     ??afAPSF_ConfigGet_1:
   \   000042   02....       LJMP      ?Subroutine0 & 0xFFFF
   1053          
   1054          /**************************************************************************************************
   1055           * @fn          afAPSF_ConfigSet
   1056           *
   1057           * @brief       This function attempts to set the fragmentation configuration that corresponds to
   1058           *              the specified EndPoint.
   1059           *
   1060           * input parameters
   1061           *
   1062           * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
   1063           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1064           *
   1065           * output parameters
   1066           *
   1067           * None.
   1068           *
   1069           * @return      afStatus_SUCCESS for success.
   1070           *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
   1071           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1072          afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigSet:
   1073          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1074            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   1075          
   1076            if (pList == NULL)
   \   00000C   EA           MOV       A,R2
   \   00000D   4B           ORL       A,R3
   \   00000E   7004         JNZ       ??afAPSF_ConfigSet_0
   1077            {
   1078              return afStatus_INVALID_PARAMETER;
   \   000010   7902         MOV       R1,#0x2
   \   000012   8021         SJMP      ??afAPSF_ConfigSet_1
   1079            }
   1080          
   1081            (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigSet_0:
   \   000014                ; Setup parameters for call to function osal_memcpy
   \   000014   8E..         MOV       ?V4,R6
   \   000016   8F..         MOV       ?V5,R7
   \   000018   75..00       MOV       ?V6,#0x0
   \   00001B   78..         MOV       R0,#?V4
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000020   7C02         MOV       R4,#0x2
   \   000022   7D00         MOV       R5,#0x0
   \   000024   EA           MOV       A,R2
   \   000025   2406         ADD       A,#0x6
   \   000027   FA           MOV       R2,A
   \   000028   5001         JNC       ??afAPSF_ConfigSet_2
   \   00002A   0B           INC       R3
   \                     ??afAPSF_ConfigSet_2:
   \   00002B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002E   7403         MOV       A,#0x3
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   1082            return afStatus_SUCCESS;
   \   000033   7900         MOV       R1,#0x0
   \                     ??afAPSF_ConfigSet_1:
   \   000035   02....       LJMP      ?Subroutine4 & 0xFFFF
   1083          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegisterExtended::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDelete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afIncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afBuildMSGIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDescList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afNumEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afCopyAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigSet
   1084          
   1085          /**************************************************************************************************
   1086          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     67   AF_DataRequest
        0     46   -> APSDE_DataReq
        0     46   -> NLME_GetShortAddr
        0     46   -> NLME_IsAddressBroadcast
        0     46   -> RTG_CheckRtStatus
        0     46   -> afDataConfirm
        0     46   -> afDataReqMTU
        0     46   -> osal_mem_free
        0     46   -> sAddrExtCpy
      0     33   AF_DataRequestSrcRtg
        0     21   -> AF_DataRequest
        0     12   -> RTG_AddSrcRtgEntry_Guaranteed
      0     15   afAPSF_ConfigGet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      0     18   afAPSF_ConfigSet
        0     15   -> afFindEndPointDescList
        0     18   -> osal_memcpy
      1     56   afBuildMSGIncoming
        0     17   -> afCopyAddress
        0     20   -> osal_memcpy
        0     17   -> osal_msg_allocate
        0     17   -> osal_msg_send
      1     26   afCopyAddress
        0      9   -> sAddrExtCpy
      1     60   afDataConfirm
        0     14   -> afFindEndPointDesc
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0     55   afDataReqMTU
        0      9   -> APSDE_DataReqMTU
      0      9   afDelete
        0      9   -> osal_mem_free
      3      0   afEndPoints
      0     35   afFindEndPointDesc
        0     10   -> afFindEndPointDescList
      2     25   afFindEndPointDescList
      0     12   afFindSimpleDesc
        0     12   -> afFindEndPointDescList
      0     10   afGetMatch
        0     10   -> afFindEndPointDescList
      1     45   afIncomingData
        0     36   -> afBuildMSGIncoming
        0     25   -> afFindEndPointDesc
        0     25   -> afFindEndPointDescList
        0     25   -> aps_FindGroupForEndpoint
        0     25   -> osal_mem_free
      2      0   afNumEndPoints
      0     10   afRegister
        0     10   -> afFindEndPointDescList
        0     10   -> afRegisterExtended
      0     22   afRegisterExtended
        0     12   -> osal_mem_alloc
      0     10   afSetMatch
        0     10   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
       1  ??Subroutine44_0
       4  ??Subroutine45_0
       6  ??Subroutine46_0
       5  ??Subroutine47_0
       7  ??Subroutine48_0
       6  ??Subroutine49_0
       7  ??Subroutine50_0
       6  ??Subroutine51_0
       1  ??Subroutine52_0
       8  ??Subroutine53_0
       5  ?Subroutine0
       5  ?Subroutine1
       8  ?Subroutine10
      13  ?Subroutine11
       8  ?Subroutine12
       8  ?Subroutine13
       4  ?Subroutine14
      10  ?Subroutine15
       1  ?Subroutine16
       6  ?Subroutine17
       1  ?Subroutine18
       8  ?Subroutine19
       5  ?Subroutine2
      13  ?Subroutine20
       6  ?Subroutine21
       5  ?Subroutine22
       3  ?Subroutine23
       6  ?Subroutine24
       9  ?Subroutine25
       6  ?Subroutine26
       7  ?Subroutine27
       8  ?Subroutine28
       4  ?Subroutine29
       8  ?Subroutine3
       6  ?Subroutine30
       9  ?Subroutine31
      12  ?Subroutine32
      12  ?Subroutine33
      11  ?Subroutine34
      10  ?Subroutine35
      10  ?Subroutine36
      10  ?Subroutine37
       3  ?Subroutine38
       7  ?Subroutine39
       5  ?Subroutine4
       7  ?Subroutine40
       7  ?Subroutine41
       5  ?Subroutine42
       1  ?Subroutine43
       7  ?Subroutine5
       3  ?Subroutine6
      23  ?Subroutine7
       9  ?Subroutine8
      15  ?Subroutine9
     753  AF_DataRequest
       6  AF_DataRequest::?relay
       1  AF_DataRequestDiscoverRoute
     122  AF_DataRequestSrcRtg
       6  AF_DataRequestSrcRtg::?relay
      69  afAPSF_ConfigGet
       6  afAPSF_ConfigGet::?relay
      56  afAPSF_ConfigSet
       6  afAPSF_ConfigSet::?relay
     440  afBuildMSGIncoming
       6  afBuildMSGIncoming::?relay
      71  afCopyAddress
       6  afCopyAddress::?relay
      69  afDataConfirm
       6  afDataConfirm::?relay
      35  afDataReqMTU
       6  afDataReqMTU::?relay
      93  afDelete
       6  afDelete::?relay
      56  afEndPoints
       6  afEndPoints::?relay
      24  afFindEndPointDesc
       6  afFindEndPointDesc::?relay
      29  afFindEndPointDescList
       6  afFindEndPointDescList::?relay
      97  afFindSimpleDesc
       6  afFindSimpleDesc::?relay
      29  afGetMatch
       6  afGetMatch::?relay
     539  afIncomingData
       6  afIncomingData::?relay
      36  afNumEndPoints
       6  afNumEndPoints::?relay
      48  afRegister
       6  afRegister::?relay
      75  afRegisterExtended
       6  afRegisterExtended::?relay
      40  afSetMatch
       6  afSetMatch::?relay
       2  epList

 
 3 061 bytes in segment BANKED_CODE
   114 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
   115 bytes of CODE     memory
 3 061 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
