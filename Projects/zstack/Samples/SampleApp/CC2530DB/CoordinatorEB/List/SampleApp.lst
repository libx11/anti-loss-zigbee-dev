###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               31/May/2018  15:13:26
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#    Command line       =  
#        -f C:\Users\libx\AppData\Local\Temp\EW939F.tmp
#        (E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        -lA
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\SampleApp.lst
#    Object file        =  
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\SampleApp.r51
#
###############################################################################

E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2          Filename:       SampleApp.c
      3          Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4          Revision:       $Revision: 19453 $
      5          
      6          Description:    Sample Application (no Profile).
      7          
      8          
      9          Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11          IMPORTANT: Your use of this Software is limited to those specific rights
     12          granted under the terms of a software license agreement between the user
     13          who downloaded the software, his/her employer (which must be your employer)
     14          and Texas Instruments Incorporated (the "License").  You may not use this
     15          Software unless you agree to abide by the terms of the License. The License
     16          limits your use, and you acknowledge, that the Software may not be modified,
     17          copied or distributed unless embedded on a Texas Instruments microcontroller
     18          or used solely and exclusively in conjunction with a Texas Instruments radio
     19          frequency transceiver, which is integrated into your product.  Other than for
     20          the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21          works of, modify, distribute, perform, display or sell this Software and/or
     22          its documentation for any purpose.
     23          
     24          YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25          PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26          INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27          NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28          TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29          NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30          LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31          INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32          OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33          OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34          (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36          Should you have any questions regarding your right to use this Software,
     37          contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41          This application isn't intended to do anything useful, it is
     42          intended to be a simple example of an application's structure.
     43          
     44          This application sends it's messages either as broadcast or
     45          broadcast filtered group messages.  The other (more normal)
     46          message addressing is unicast.  Most of the other sample
     47          applications are written to support the unicast message model.
     48          
     49          Key control:
     50          SW1:  Sends a flash command to all devices in Group 1.
     51          SW2:  Adds/Removes (toggles) this device in and out
     52          of Group 1.  This will enable and disable the
     53          reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57          * INCLUDES
     58          */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xcb
   \   unsigned char volatile __sfr T3CTL
   \                     T3CTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xda
   \   unsigned char volatile __sfr T1CC0L
   \                     T1CC0L:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xdb
   \   unsigned char volatile __sfr T1CC0H
   \                     T1CC0H:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe4
   \   unsigned char volatile __sfr T1CTL
   \                     T1CTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          #include "stdlib.h"
     78          
     79          /*********************************************************************
     80          * MACROS
     81          */
     82          
     83          /*********************************************************************
     84          * CONSTANTS
     85          */
     86          
     87          /*********************************************************************
     88          * TYPEDEFS
     89          */
     90          
     91          /*********************************************************************
     92          * GLOBAL VARIABLES
     93          */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     94          uint8 AppTitle[] = "ALD2530 LED"; //Ó¦ÓÃ³ÌÐòÃû³Æ
   \                     AppTitle:
   \   000000                DS 12
   \   00000C                REQUIRE `?<Initializer for AppTitle>`
   \   00000C                REQUIRE __INIT_XDATA_I
     95          
     96          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     97          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
     98          {
     99              SAMPLEAPP_PERIODIC_CLUSTERID,
    100              SAMPLEAPP_FLASH_CLUSTERID,
    101              SAMPLEAPP_SINGLE_CLUSTERID
    102          };
    103          

   \                                 In  segment XDATA_ROM_C, align 1
    104          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
    105          {
    106              SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    107              SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    108              SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    109              SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    110              SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    111              SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    112              (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    113              SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    114              (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    115          };
    116          
    117          // This is the Endpoint/Interface description.  It is defined here, but
    118          // filled-in in SampleApp_Init().  Another way to go would be to fill
    119          // in the structure here and make it a "const" (in code space).  The
    120          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    122          
    123          /*********************************************************************
    124          * EXTERNAL VARIABLES
    125          */
    126          
    127          /*********************************************************************
    128          * EXTERNAL FUNCTIONS
    129          */
    130          
    131          /*********************************************************************
    132          * LOCAL VARIABLES
    133          */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          // This variable will be received when
    136          // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          afAddrType_t SampleApp_Single_DstAddr;
   \                     SampleApp_Single_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint16 device[32] = {0};
   \                     device:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint32 long_addr[32] = {0};
   \                     long_addr:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 online[32] = {0};
   \                     online:
   \   000000                DS 32
   \   000020                REQUIRE __INIT_XDATA_Z
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          int sel_dev = 0;
   \                     sel_dev:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    155          int main_flag = 1;
   \                     main_flag:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for main_flag>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          int beep_flag = 0;
   \                     beep_flag:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          int time_flag = 0;
   \                     time_flag:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          int distance_flag = 0;
   \                     distance_flag:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          int count = 0;
   \                     count:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          int period_count = 0;
   \                     period_count:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          int device_num = 0;
   \                     device_num:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          int freq_count = 0;
   \                     freq_count:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          uint16 dst_dev = 0x0000;
   \                     dst_dev:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    164          
    165          #define BEEP P0_7  //·äÃùÆ÷£»
    166          
    167          /*********************************************************************
    168          * LOCAL FUNCTIONS
    169          */
    170          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    171          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    172          void SampleApp_SendPeriodicMessage( void );
    173          void SampleApp_SendFlashMessage( uint16 flashTime,uint16 data);
    174          void SApp_ProcessMsgCBs( zdoIncomingMsg_t *msgPtr );
    175          void SampleApp_SendAddrMessage(uint8 dev[], int dev_num);
    176          void SampleApp_SendBeepMessage(uint16 dst, uint8 s);
    177          
    178          
    179          
    180          void InitT1(void);
    181          void InitT3(void);
    182          __interrupt void T3_ISR(void);
    183          void beep0(void);
    184          void beep1(void);
    185          void beep2(void);
    186          void mode_change(void);
    187          void call_dev_change(void);
    188          
    189          
    190          /*********************************************************************
    191          * NETWORK LAYER CALLBACKS
    192          */
    193          
    194          /*********************************************************************
    195          * PUBLIC FUNCTIONS
    196          */
    197          
    198          /*********************************************************************
    199          * @fn      SampleApp_Init
    200          *
    201          * @brief   Initialization function for the Generic App Task.
    202          *          This is called during initialization and should contain
    203          *          any application specific initialization (ie. hardware
    204          *          initialization/setup, table initialization, power up
    205          *          notificaiton ... ).
    206          *
    207          * @param   task_id - the ID assigned by OSAL.  This ID should be
    208          *                    used to send messages and set timers.
    209          *
    210          * @return  none
    211          */
    212          
    213          
    214          
    215          /****************************************************************************
    216          * Ãû    ³Æ: InitT1()
    217          * ¹¦    ÄÜ: ¶¨Ê±Æ÷³õÊ¼»¯£¬TICKSPD ÊÇ16 MHzÏµÍ³²»ÅäÖÃÊ±Ä¬ÈÏÊÇ2·ÖÆµ£¬¼´16MHz
    218          * Èë¿Ú²ÎÊý: ÎÞ
    219          * ³ö¿Ú²ÎÊý: ÎÞ
    220          ****************************************************************************/
    221          
    222          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    223          void InitT1(void)
   \                     InitT1:
    224          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    225              CLKCONCMD &= ~0x40;      //ÉèÖÃÏµÍ³Ê±ÖÓÔ´Îª32MHZ¾§Õñ
   \   000004   53C6BF       ANL       0xc6,#0xbf
    226              while(CLKCONSTA & 0x40); //µÈ´ý¾§ÕñÎÈ¶¨Îª32M
   \                     ??InitT1_0:
   \   000007   E59E         MOV       A,0x9e
   \   000009   A2E6         MOV       C,0xE0 /* A   */.6
   \   00000B   40FA         JC        ??InitT1_0
    227              CLKCONCMD &= ~0x07;      //ÉèÖÃÏµÍ³Ö÷Ê±ÖÓÆµÂÊÎª32MHZ
   \   00000D   53C6F8       ANL       0xc6,#0xf8
    228              CLKCONCMD |= 0x38;       //Ê±ÖÓËÙ¶È32 MHz ¶¨Ê±Æ÷±ê¼ÇÊä³öÉèÖÃ[5:3]250kHz
   \   000010   43C638       ORL       0xc6,#0x38
    229          
    230              PERCFG |= 0x40;          //¶¨Ê±Æ÷1 µÄIOÎ»ÖÃ   1:±¸ÓÃÎ»ÖÃ2
   \   000013   43F140       ORL       0xf1,#0x40
    231              P2SEL &= ~0x10;          //¶¨Ê±Æ÷1ÓÅÏÈ
   \   000016   53F5EF       ANL       0xf5,#0xef
    232              P2DIR |= 0xC0;           //µÚ1ÓÅÏÈ¼¶£º¶¨Ê±Æ÷1Í¨µÀ2-3
   \   000019   43FFC0       ORL       0xff,#0xc0
    233          
    234              P0DIR |= 0x80;           //¶Ë¿Ú1ÎªÊä³ö
   \   00001C   43FD80       ORL       0xfd,#0x80
    235              P0SEL |= 0x80;           //timer1 Í¨µÀ2Ó³Éä¿ÚP1_0
   \   00001F   43F380       ORL       0xf3,#0x80
    236          
    237              T1CC3H = 0x00;           //20%Õ¼¿Õ±ÈÎª200us
   \   000022   9062AD       MOV       DPTR,#0x62ad
   \   000025   E4           CLR       A
   \   000026   F0           MOVX      @DPTR,A
    238              T1CC3L = 0x00;           //ÐÞ¸ÄT1CC2L¿Éµ÷ÕûledµÄÁÁ¶È
   \   000027   9062AC       MOV       DPTR,#0x62ac
   \   00002A   F0           MOVX      @DPTR,A
    239              T1CC0H = 0x00;           //1msµÄÖÜÆÚÊ±ÖÓ,ÆµÂÊÎª976.516HZ
   \   00002B   75DB00       MOV       0xdb,#0x0
    240              T1CC0L = 0x00;
   \   00002E   75DA00       MOV       0xda,#0x0
    241              T1CCTL3 = 0x34;          // Ä£Ê½Ñ¡Ôñ Í¨µÀ2±È½ÏÄ£Ê½
   \   000031   9062A3       MOV       DPTR,#0x62a3
   \   000034   7434         MOV       A,#0x34
   \   000036   F0           MOVX      @DPTR,A
    242              T1CTL |= 0x03;            //250KHz 1·ÖÆµ
   \   000037   43E403       ORL       0xe4,#0x3
    243          
    244          }
   \   00003A   D083         POP       DPH
   \   00003C   D082         POP       DPL
   \   00003E   02....       LJMP      ?BRET
   \   000041                REQUIRE CLKCONCMD
   \   000041                REQUIRE CLKCONSTA
   \   000041                REQUIRE PERCFG
   \   000041                REQUIRE P2SEL
   \   000041                REQUIRE P2DIR
   \   000041                REQUIRE P0DIR
   \   000041                REQUIRE P0SEL
   \   000041                REQUIRE T1CC0H
   \   000041                REQUIRE T1CC0L
   \   000041                REQUIRE T1CTL
    245          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void InitT3(void)
   \                     InitT3:
    247          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    248              T3CTL |= 0x08 ;          //¿ªÒç³öÖÐ¶Ï
   \   000000   43CB08       ORL       0xcb,#0x8
    249              T3IE = 1;                //¿ª×ÜÖÐ¶ÏºÍT3ÖÐ¶Ï
   \   000003   D2BB         SETB      0xb8.3
    250              T3CTL |= 0xE0;           //128·ÖÆµ,128/16000000*N=0.5S,N=62500
   \   000005   43CBE0       ORL       0xcb,#0xe0
    251              T3CTL &= ~0x03;          //×Ô¶¯ÖØ×° 00£­>0xff  62500/255=245(´Î)
   \   000008   53CBFC       ANL       0xcb,#0xfc
    252              T3CTL |= 0x10;           //Æô¶¯
   \   00000B   43CB10       ORL       0xcb,#0x10
    253              EA = 1;                  //¿ª×ÜÖÐ¶Ï
   \   00000E   D2AF         SETB      0xa8.7
    254          }
   \   000010   02....       LJMP      ?BRET
   \   000013                REQUIRE T3CTL
   \   000013                REQUIRE _A_IEN1
   \   000013                REQUIRE _A_IEN0
    255          #pragma vector = T3_VECTOR

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    256          __interrupt void T3_ISR(void)
   \                     T3_ISR:
    257          {
   \   000000   C0E0         PUSH      A
   \   000002   74F2         MOV       A,#-0xe
   \   000004   12....       LCALL     ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 14
   \   000007                ; Auto size: 0
    258          
    259          
    260              IRCON = 0x00;            //ÇåÖÐ¶Ï±êÖ¾, Ò²¿ÉÓÉÓ²¼þ×Ô¶¯Íê³É
   \   000007   75C000       MOV       0xc0,#0x0
    261          
    262          
    263              if(period_count++ > 150)//¾¯±¨àÖàÖàÖµÄÖÜÆÚ
   \   00000A   90....       MOV       DPTR,#period_count
   \   00000D   12....       LCALL     ?Subroutine27
   \                     ??CrossCallReturnLabel_36:
   \   000010   90....       MOV       DPTR,#period_count
   \   000013   EA           MOV       A,R2
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   EB           MOV       A,R3
   \   000017   F0           MOVX      @DPTR,A
   \   000018   C3           CLR       C
   \   000019   E8           MOV       A,R0
   \   00001A   9497         SUBB      A,#-0x69
   \   00001C   E9           MOV       A,R1
   \   00001D   9400         SUBB      A,#0x0
   \   00001F   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000021   65D0         XRL       A,PSW
   \   000023   33           RLC       A
   \   000024   4007         JC        ??T3_ISR_0
    264              {
    265                  period_count = 0;
   \   000026   90....       MOV       DPTR,#period_count
   \   000029   E4           CLR       A
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   F0           MOVX      @DPTR,A
    266              }
    267          
    268          
    269              if(count++ > 2)          //ÉùÒôÆµÂÊ
   \                     ??T3_ISR_0:
   \   00002D   90....       MOV       DPTR,#count
   \   000030   12....       LCALL     ?Subroutine27
   \                     ??CrossCallReturnLabel_37:
   \   000033   90....       MOV       DPTR,#count
   \   000036   EA           MOV       A,R2
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   EB           MOV       A,R3
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   C3           CLR       C
   \   00003C   E8           MOV       A,R0
   \   00003D   9403         SUBB      A,#0x3
   \   00003F   E9           MOV       A,R1
   \   000040   9400         SUBB      A,#0x0
   \   000042   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000044   65D0         XRL       A,PSW
   \   000046   33           RLC       A
   \   000047   4034         JC        ??T3_ISR_1
    270              {
    271                  count = 0;          //¼ÆÊýÇåÁã
   \   000049   90....       MOV       DPTR,#count
   \   00004C   E4           CLR       A
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   A3           INC       DPTR
   \   00004F   F0           MOVX      @DPTR,A
    272          
    273                  if(beep_flag == 1)
   \   000050   90....       MOV       DPTR,#beep_flag
   \   000053   E0           MOVX      A,@DPTR
   \   000054   6401         XRL       A,#0x1
   \   000056   7002         JNZ       ??T3_ISR_2
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \                     ??T3_ISR_2:
   \   00005A   7021         JNZ       ??T3_ISR_1
    274                      if(time_flag == 0)
   \   00005C   90....       MOV       DPTR,#time_flag
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F8           MOV       R0,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   E8           MOV       A,R0
   \   000065   49           ORL       A,R1
   \   000066   90....       MOV       DPTR,#time_flag
   \   000069   700B         JNZ       ??T3_ISR_3
    275                      {
    276                          time_flag = 1;
   \   00006B   7401         MOV       A,#0x1
   \   00006D   F0           MOVX      @DPTR,A
   \   00006E   A3           INC       DPTR
   \   00006F   E4           CLR       A
   \   000070   F0           MOVX      @DPTR,A
    277                          beep1();
   \   000071                ; Setup parameters for call to function beep1
   \   000071   12....       LCALL     `??beep1::?relay`; Banked call to: beep1
   \   000074   8007         SJMP      ??T3_ISR_1
    278                      }
    279                      else
    280                      {
    281                          time_flag = 0;
   \                     ??T3_ISR_3:
   \   000076   E4           CLR       A
   \   000077   F0           MOVX      @DPTR,A
   \   000078   A3           INC       DPTR
   \   000079   F0           MOVX      @DPTR,A
    282                          beep0();
   \   00007A                ; Setup parameters for call to function beep0
   \   00007A   12....       LCALL     `??beep0::?relay`; Banked call to: beep0
    283                      }
    284              }
    285          }
   \                     ??T3_ISR_1:
   \   00007D   7F01         MOV       R7,#0x1
   \   00007F   02....       LJMP      ?INTERRUPT_LEAVE_XSP
   \   000082                REQUIRE _A_IRCON

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   2401         ADD       A,#0x1
   \   000008   FA           MOV       R2,A
   \   000009   E4           CLR       A
   \   00000A   39           ADDC      A,R1
   \   00000B   FB           MOV       R3,A
   \   00000C   22           RET
    286          
    287          
    288          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    289          void beep0(void)
   \                     beep0:
    290          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    291              T1CC0H = 0x00;           //0msµÄÖÜÆÚÊ±ÖÓ
   \   000000   75DB00       MOV       0xdb,#0x0
    292              T1CC0L = 0x00;
   \   000003   75DA00       MOV       0xda,#0x0
    293          }
   \   000006   02....       LJMP      ?BRET
   \   000009                REQUIRE T1CC0H
   \   000009                REQUIRE T1CC0L

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    294          void beep1(void)
   \                     beep1:
    295          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    296              T1CC0H = 0x00;           //1msµÄÖÜÆÚÊ±ÖÓ
   \   000000   75DB00       MOV       0xdb,#0x0
    297              T1CC0L = 0xff;
   \   000003                REQUIRE ?Subroutine0
   \   000003                REQUIRE T1CC0H
   \   000003                REQUIRE T1CC0L
   \   000003                ; // Fall through to label ?Subroutine0
    298          
    299          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   75DAFF       MOV       0xda,#-0x1
   \   000003   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    300          void beep2(void)
   \                     beep2:
    301          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    302              T1CC0H = 0x01;           //2msµÄÖÜÆÚÊ±ÖÓ
   \   000000   75DB01       MOV       0xdb,#0x1
    303              T1CC0L = 0xff;
   \   000003   80..         SJMP      ?Subroutine0
   \   000005                REQUIRE T1CC0H
   \   000005                REQUIRE T1CC0L
    304          }
    305          
    306          
    307          
    308          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    310          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    311              SampleApp_TaskID = task_id;   //osal·ÖÅäµÄÈÎÎñIDËæ×ÅÓÃ»§Ìí¼ÓÈÎÎñµÄÔö¶à¶ø¸Ä±ä
   \   000006   90....       MOV       DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX      @DPTR,A
    312              SampleApp_NwkState = DEV_INIT;//Éè±¸×´Ì¬Éè¶¨ÎªZDO²ãÖÐ¶¨ÒåµÄ³õÊ¼»¯×´Ì¬
   \   00000A   90....       MOV       DPTR,#SampleApp_NwkState
   \   00000D   7401         MOV       A,#0x1
   \   00000F   F0           MOVX      @DPTR,A
    313              SampleApp_TransID = 0;        //ÏûÏ¢·¢ËÍID£¨¶àÏûÏ¢Ê±ÓÐË³ÐòÖ®·Ö£©
   \   000010   90....       MOV       DPTR,#SampleApp_TransID
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
    314          
    315              // Device hardware initialization can be added here or in main() (Zmain.c).
    316              // If the hardware is application specific - add it here.
    317              // If the hardware is other parts of the device add it in main().
    318          
    319          #if defined ( BUILD_ALL_DEVICES )
    320              // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    321              // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    322              // together - if they are - we will start up a coordinator. Otherwise,
    323              // the device will start as a router.
    324              if ( readCoordinatorJumper() )
    325                  zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    326              else
    327                  zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    328          #endif // BUILD_ALL_DEVICES
    329          
    330              //¸Ã¶ÎµÄÒâË¼ÊÇ£¬Èç¹ûÉèÖÃÁËHOLD_AUTO_STARTºê¶¨Òå£¬½«»áÔÚÆô¶¯Ð¾Æ¬µÄÊ±ºò»áÔÝÍ£Æô¶¯
    331              //Á÷³Ì£¬Ö»ÓÐÍâ²¿´¥·¢ÒÔºó²Å»áÆô¶¯Ð¾Æ¬¡£ÆäÊµ¾ÍÊÇÐèÒªÒ»¸ö°´Å¥´¥·¢ËüµÄÆô¶¯Á÷³Ì¡£
    332          #if defined ( HOLD_AUTO_START )
    333              // HOLD_AUTO_START is a compile option that will surpress ZDApp
    334              //  from starting the device and wait for the application to
    335              //  start the device.
    336              ZDOInitDevice(0);
    337          #endif
    338          
    339              // Setup for the periodic message's destination address ÉèÖÃ·¢ËÍÊý¾ÝµÄ·½Ê½ºÍÄ¿µÄµØÖ·Ñ°Ö·Ä£Ê½
    340              // Broadcast to everyone ·¢ËÍÄ£Ê½:¹ã²¥·¢ËÍ
    341              SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;//¹ã²¥
   \   000015   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000018   740F         MOV       A,#0xf
   \   00001A   F0           MOVX      @DPTR,A
    342              SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   00001B   A3           INC       DPTR
   \   00001C   7414         MOV       A,#0x14
   \   00001E   F0           MOVX      @DPTR,A
    343              SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;//Ö¸¶¨Ä¿µÄÍøÂçµØÖ·Îª¹ã²¥µØÖ·
   \   00001F   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr
   \   000022   74FF         MOV       A,#-0x1
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   F0           MOVX      @DPTR,A
    344          
    345              // Setup for the flash command's destination address - Group 1 ×é²¥·¢ËÍ
    346              SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup; //×éÑ°Ö·
   \   000027   90....       MOV       DPTR,#SampleApp_Flash_DstAddr + 8
   \   00002A   7401         MOV       A,#0x1
   \   00002C   F0           MOVX      @DPTR,A
    347              SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   00002D   A3           INC       DPTR
   \   00002E   7414         MOV       A,#0x14
   \   000030   F0           MOVX      @DPTR,A
    348              SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;//×éºÅ0x0001
   \   000031   90....       MOV       DPTR,#SampleApp_Flash_DstAddr
   \   000034   7401         MOV       A,#0x1
   \   000036   F0           MOVX      @DPTR,A
   \   000037   A3           INC       DPTR
   \   000038   E4           CLR       A
   \   000039   F0           MOVX      @DPTR,A
    349          
    350              SampleApp_Single_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00003A   90....       MOV       DPTR,#SampleApp_Single_DstAddr + 8
   \   00003D   7402         MOV       A,#0x2
   \   00003F   F0           MOVX      @DPTR,A
    351              SampleApp_Single_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000040   A3           INC       DPTR
   \   000041   7414         MOV       A,#0x14
   \   000043   F0           MOVX      @DPTR,A
    352              SampleApp_Single_DstAddr.addr.shortAddr = 0x0000;
   \   000044   90....       MOV       DPTR,#SampleApp_Single_DstAddr
   \   000047   E4           CLR       A
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   F0           MOVX      @DPTR,A
    353          
    354              // Fill out the endpoint description. ¶¨Òå±¾Éè±¸ÓÃÀ´Í¨ÐÅµÄAPS²ã¶ËµãÃèÊö·û
    355              SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT; //Ö¸¶¨¶ËµãºÅ
   \   00004B   90....       MOV       DPTR,#SampleApp_epDesc
   \   00004E   7414         MOV       A,#0x14
   \   000050   F0           MOVX      @DPTR,A
    356              SampleApp_epDesc.task_id = &SampleApp_TaskID;   //SampleApp ÃèÊö·ûµÄÈÎÎñID
   \   000051   A3           INC       DPTR
   \   000052   74..         MOV       A,#SampleApp_TaskID & 0xff
   \   000054   F0           MOVX      @DPTR,A
   \   000055   A3           INC       DPTR
   \   000056   74..         MOV       A,#(SampleApp_TaskID >> 8) & 0xff
   \   000058   F0           MOVX      @DPTR,A
    357              SampleApp_epDesc.simpleDesc
    358                  = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;//SampleApp¼òµ¥ÃèÊö·û
   \   000059   A3           INC       DPTR
   \   00005A   74..         MOV       A,#SampleApp_SimpleDesc & 0xff
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   A3           INC       DPTR
   \   00005E   74..         MOV       A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000060   F0           MOVX      @DPTR,A
    359              SampleApp_epDesc.latencyReq = noLatencyReqs;    //ÑÓÊ±²ßÂÔ
   \   000061   A3           INC       DPTR
   \   000062   E4           CLR       A
   \   000063   F0           MOVX      @DPTR,A
    360          
    361              // Register the endpoint description with the AF
    362              afRegister( &SampleApp_epDesc );    //ÏòAF²ãµÇ¼ÇÃèÊö·û
   \   000064                ; Setup parameters for call to function afRegister
   \   000064   7A..         MOV       R2,#SampleApp_epDesc & 0xff
   \   000066   7B..         MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000068   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    363          
    364              // Register for all key events - This app will handle all key events
    365              RegisterForKeys( SampleApp_TaskID ); // µÇ¼ÇËùÓÐµÄ°´¼üÊÂ¼þ
   \   00006B                ; Setup parameters for call to function RegisterForKeys
   \   00006B   90....       MOV       DPTR,#SampleApp_TaskID
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F9           MOV       R1,A
   \   000070   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    366          
    367              // By default, all devices start out in Group 1
    368              SampleApp_Group.ID = 0x0001;//×éºÅ
   \   000073   90....       MOV       DPTR,#SampleApp_Group
   \   000076   7401         MOV       A,#0x1
   \   000078   F0           MOVX      @DPTR,A
   \   000079   A3           INC       DPTR
   \   00007A   E4           CLR       A
   \   00007B   F0           MOVX      @DPTR,A
    369              osal_memcpy( SampleApp_Group.name, "Group 1", 7  );//Éè¶¨×éÃû
   \   00007C                ; Setup parameters for call to function osal_memcpy
   \   00007C   75....       MOV       ?V0,#`?<Constant "Group 1">` & 0xff
   \   00007F   75....       MOV       ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000082   F5..         MOV       ?V2,A
   \   000084   78..         MOV       R0,#?V0
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000089   7C07         MOV       R4,#0x7
   \   00008B   7D00         MOV       R5,#0x0
   \   00008D   7A..         MOV       R2,#(SampleApp_Group + 2) & 0xff
   \   00008F   7B..         MOV       R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000091   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000094   12....       LCALL     ?DEALLOC_XSTACK8
    370              aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );//°Ñ¸Ã×éµÇ¼ÇÌí¼Óµ½APSÖÐ
   \   000097                ; Setup parameters for call to function aps_AddGroup
   \   000097   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   000099   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   00009B   7914         MOV       R1,#0x14
   \   00009D   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    371          
    372          #if defined ( LCD_SUPPORTED )
    373              HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 ); //Èç¹ûÖ§³ÖLCD£¬ÏÔÊ¾ÌáÊ¾ÐÅÏ¢
   \   0000A0                ; Setup parameters for call to function HalLcdWriteString
   \   0000A0   7900         MOV       R1,#0x0
   \   0000A2   7A..         MOV       R2,#`?<Constant "SampleApp">` & 0xff
   \   0000A4   7B..         MOV       R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000A6   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    374          #endif
    375          
    376              // register for end device annce and simple descriptor responses
    377              ZDO_RegisterForZDOMsg( SampleApp_TaskID, Device_annce );
   \   0000A9                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000A9   7A13         MOV       R2,#0x13
   \   0000AB   7B00         MOV       R3,#0x0
   \   0000AD   90....       MOV       DPTR,#SampleApp_TaskID
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F9           MOV       R1,A
   \   0000B2   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    378          
    379              InitT1();
   \   0000B5                ; Setup parameters for call to function InitT1
   \   0000B5   12....       LCALL     `??InitT1::?relay`; Banked call to: InitT1
    380              InitT3();
   \   0000B8                ; Setup parameters for call to function InitT3
   \   0000B8   12....       LCALL     `??InitT3::?relay`; Banked call to: InitT3
    381          
    382          #if defined(ZDO_COORDINATOR)                      //Ð­µ÷Æ÷¶ÌµØÖ·Îª0000
    383              {
    384                  device[0] = 0x0000;
   \   0000BB   90....       MOV       DPTR,#device
   \   0000BE   E4           CLR       A
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   F0           MOVX      @DPTR,A
    385              }
    386          #endif
    387          }
   \   0000C2   7F03         MOV       R7,#0x3
   \   0000C4   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET
    388          
    389          /*********************************************************************
    390          * @fn      SampleApp_ProcessEvent
    391          *
    392          * @brief   Generic Application Task event processor.  This function
    393          *          is called to process all events for the task.  Events
    394          *          include timers, messages and any other user defined events.
    395          *
    396          * @param   task_id  - The OSAL assigned task ID.
    397          * @param   events - events to process.  This is a bit map and can
    398          *                   contain more than one event.
    399          *
    400          * @return  none
    401          */
    402          //ÓÃ»§Ó¦ÓÃÈÎÎñµÄÊÂ¼þ´¦Àíº¯Êý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    405              afIncomingMSGPacket_t *MSGpkt;
    406              (void)task_id;  // Intentionally unreferenced parameter
    407          
    408              if ( events & SYS_EVENT_MSG ) //½ÓÊÕÏµÍ³ÏûÏ¢ÔÙ½øÐÐÅÐ¶Ï
   \   000009   5480         ANL       A,#0x80
   \   00000B   6077         JZ        ??SampleApp_ProcessEvent_0
    409              {
    410                  //½ÓÊÕÊôÓÚ±¾Ó¦ÓÃÈÎÎñSampleAppµÄÏûÏ¢£¬ÒÔSampleApp_TaskID±ê¼Ç
    411                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   801D         SJMP      ??SampleApp_ProcessEvent_1
    412                  while ( MSGpkt )
    413                  {
    414                      switch ( MSGpkt->hdr.event )
    415                      {
    416                      // Received when a key is pressed
    417                      case KEY_CHANGE://°´¼üÊÂ¼þ
    418                          SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    419                          break;
    420          
    421                      // Received when a messages is received (OTA) for this endpoint
    422                      case AF_INCOMING_MSG_CMD://½ÓÊÕÊý¾ÝÊÂ¼þ,µ÷ÓÃº¯ÊýAF_DataRequest()½ÓÊÕÊý¾Ý
    423                          SampleApp_MessageMSGCB( MSGpkt );//µ÷ÓÃ»Øµ÷º¯Êý¶ÔÊÕµ½µÄÊý¾Ý½øÐÐ´¦Àí
    424                          break;
    425          
    426                      case ZDO_CB_MSG:
    427                          SApp_ProcessMsgCBs( (zdoIncomingMsg_t *)MSGpkt);
    428                          break;
    429          
    430          
    431                      case AF_DATA_CONFIRM_CMD:
    432          
    433          
    434                          break;
    435          
    436          
    437          
    438                      // Received whenever the device changes state in the network
    439                      case ZDO_STATE_CHANGE:
    440          
    441          
    442          
    443                          //Ö»ÒªÍøÂç×´Ì¬·¢Éú¸Ä±ä£¬¾ÍÍ¨¹ýZDO_STATE_CHANGEÊÂ¼þÍ¨ÖªËùÓÐµÄÈÎÎñ¡£
    444                          //Í¬Ê±Íê³É¶ÔÐ­µ÷Æ÷£¬Â·ÓÉÆ÷£¬ÖÕ¶ËµÄÉèÖÃ
    445                          SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   90....       MOV       DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX      @DPTR,A
    446          
    447          
    448                          /**********************************************\
    449          
    450                          if ( (SampleApp_NwkState == DEV_ZB_COORD)//ÊµÑéÖÐÐ­µ÷Æ÷Ö»½ÓÊÕÊý¾ÝËùÒÔÈ¡Ïû·¢ËÍÊÂ¼þ
    451                          if ( (SampleApp_NwkState == DEV_ROUTER) || (SampleApp_NwkState == DEV_END_DEVICE) )
    452                          //{
    453                          // Start sending the periodic message in a regular interval.
    454                          //Õâ¸ö¶¨Ê±Æ÷Ö»ÊÇÎª·¢ËÍÖÜÆÚÐÅÏ¢¿ªÆôµÄ£¬Éè±¸Æô¶¯³õÊ¼»¯ºó´ÓÕâÀï¿ªÊ¼
    455                          //´¥·¢µÚÒ»¸öÖÜÆÚÐÅÏ¢µÄ·¢ËÍ£¬È»ºóÖÜ¶ø¸´Ê¼ÏÂÈ¥
    456          
    457                          \***************************************************/
    458          
    459          
    460                          osal_start_timerEx( SampleApp_TaskID,
    461                                              SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    462                                              SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \   000015                ; Setup parameters for call to function osal_start_timerEx
   \   000015   7CB8         MOV       R4,#-0x48
   \   000017   7D0B         MOV       R5,#0xb
   \   000019   7A01         MOV       R2,#0x1
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   90....       MOV       DPTR,#SampleApp_TaskID
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    463          
    464          
    465          
    466                          /**********************************************\
    467          
    468                          }
    469                          else
    470                          {
    471                          // Device is no longer in the network
    472                          }
    473          
    474                          \***************************************************/
    475          
    476                          break;
    477          
    478                      default:
    479                          break;
    480                      }
    481          
    482                      // Release the memory ÊÂ¼þ´¦ÀíÍêÁË£¬ÊÍ·ÅÏûÏ¢Õ¼ÓÃµÄÄÚ´æ
    483                      osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   000025                ; Setup parameters for call to function osal_msg_deallocate
   \   000025   AA..         MOV       R2,?V0
   \   000027   AB..         MOV       R3,?V1
   \   000029   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    484          
    485                      // Next - if one is available Ö¸ÕëÖ¸ÏòÏÂÒ»¸ö·ÅÔÚ»º³åÇøµÄ´ý´¦ÀíµÄÊÂ¼þ£¬
    486                      //·µ»Øwhile ( MSGpkt )ÖØÐÂ´¦ÀíÊÂ¼þ£¬Ö±µ½»º³åÇøÃ»ÓÐµÈ´ý´¦ÀíÊÂ¼þÎªÖ¹
    487                      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00002C                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00002C   90....       MOV       DPTR,#SampleApp_TaskID
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000034   8A..         MOV       ?V0,R2
   \   000036   8B..         MOV       ?V1,R3
   \   000038   E5..         MOV       A,?V0
   \   00003A   45..         ORL       A,?V1
   \   00003C   603F         JZ        ??SampleApp_ProcessEvent_4
   \   00003E   85..82       MOV       DPL,?V0
   \   000041   85..83       MOV       DPH,?V1
   \   000044   E0           MOVX      A,@DPTR
   \   000045   24E6         ADD       A,#-0x1a
   \   000047   6022         JZ        ??SampleApp_ProcessEvent_5
   \   000049   245A         ADD       A,#0x5a
   \   00004B   600A         JZ        ??SampleApp_ProcessEvent_6
   \   00004D   24EF         ADD       A,#-0x11
   \   00004F   60BE         JZ        ??SampleApp_ProcessEvent_2
   \   000051   24FE         ADD       A,#-0x2
   \   000053   601F         JZ        ??SampleApp_ProcessEvent_7
   \   000055   80CE         SJMP      ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_6:
   \   000057                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   FA           MOV       R2,A
   \   00005C   85..82       MOV       DPL,?V0
   \   00005F   85..83       MOV       DPH,?V1
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F9           MOV       R1,A
   \   000066   12....       LCALL     `??SampleApp_HandleKeys::?relay`; Banked call to: SampleApp_HandleKeys
   \   000069   80BA         SJMP      ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   00006B                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   00006B   AA..         MOV       R2,?V0
   \   00006D   AB..         MOV       R3,?V1
   \   00006F   12....       LCALL     `??SampleApp_MessageMSGCB::?relay`; Banked call to: SampleApp_MessageMSGCB
   \   000072   80B1         SJMP      ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_7:
   \   000074                ; Setup parameters for call to function SApp_ProcessMsgCBs
   \   000074   AA..         MOV       R2,?V0
   \   000076   AB..         MOV       R3,?V1
   \   000078   12....       LCALL     `??SApp_ProcessMsgCBs::?relay`; Banked call to: SApp_ProcessMsgCBs
   \   00007B   80A8         SJMP      ??SampleApp_ProcessEvent_3
    488                  }
    489          
    490                  // return unprocessed events ·µ»ØÎ´´¦ÀíµÄÊÂ¼þ
    491                  return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   00007D   EE           MOV       A,R6
   \   00007E   FA           MOV       R2,A
   \   00007F   EF           MOV       A,R7
   \   000080   6480         XRL       A,#0x80
   \   000082   8024         SJMP      ??SampleApp_ProcessEvent_8
    492              }
    493          
    494              // Send a message out - This event is generated by a timer
    495              //  (setup in SampleApp_Init()).
    496              if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000084   EA           MOV       A,R2
   \   000085   A2E0         MOV       C,0xE0 /* A   */.0
   \   000087   5022         JNC       ??SampleApp_ProcessEvent_9
    497              {
    498                  // Send the periodic message ´¦ÀíÖÜÆÚÐÔÊÂ¼þ£¬
    499                  //ÀûÓÃSampleApp_SendPeriodicMessage()´¦ÀíÍêµ±Ç°µÄÖÜÆÚÐÔÊÂ¼þ£¬È»ºóÆô¶¯¶¨Ê±Æ÷
    500                  //¿ªÆôÏÂÒ»¸öÖÜÆÚÐÔÊÂÇé£¬ÕâÑùÒ»ÖÖÑ­»·ÏÂÈ¥£¬Ò²¼´ÊÇÉÏÃæËµµÄÖÜÆÚÐÔÊÂ¼þÁË£¬
    501                  //¿ÉÒÔ×öÎª´«¸ÐÆ÷¶¨Ê±²É¼¯¡¢ÉÏ´«ÈÎÎñ
    502                  SampleApp_SendPeriodicMessage();
   \   000089                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000089   12....       LCALL     `??SampleApp_SendPeriodicMessage::?relay`; Banked call to: SampleApp_SendPeriodicMessage
    503          
    504                  // Setup to send message again in normal period (+ a little jitter)
    505                  osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    506                                      (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00008C                ; Setup parameters for call to function osal_rand
   \   00008C   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00008F                ; Setup parameters for call to function osal_start_timerEx
   \   00008F   EA           MOV       A,R2
   \   000090   24B8         ADD       A,#-0x48
   \   000092   FC           MOV       R4,A
   \   000093   E4           CLR       A
   \   000094   340B         ADDC      A,#0xb
   \   000096   FD           MOV       R5,A
   \   000097   7A01         MOV       R2,#0x1
   \   000099   7B00         MOV       R3,#0x0
   \   00009B   90....       MOV       DPTR,#SampleApp_TaskID
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   F9           MOV       R1,A
   \   0000A0   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    507          
    508                  // return unprocessed events ·µ»ØÎ´´¦ÀíµÄÊÂ¼þ
    509                  return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A3   EE           MOV       A,R6
   \   0000A4   6401         XRL       A,#0x1
   \   0000A6   FA           MOV       R2,A
   \   0000A7   EF           MOV       A,R7
   \                     ??SampleApp_ProcessEvent_8:
   \   0000A8   FB           MOV       R3,A
   \   0000A9   8004         SJMP      ??SampleApp_ProcessEvent_10
    510              }
    511          
    512              // Discard unknown events
    513              return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7A00         MOV       R2,#0x0
   \   0000AD   7B00         MOV       R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000AF   02....       LJMP      ??Subroutine30_0 & 0xFFFF
    514          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    515          
    516          
    517          /*********************************************************************
    518          * Event Generation Functions
    519          */
    520          /*********************************************************************
    521          * @fn      SampleApp_HandleKeys
    522          *
    523          * @brief   Handles all key events for this device.
    524          *
    525          * @param   shift - true if in shift/alt.
    526          * @param   keys - bit field for key events. Valid entries:
    527          *                 HAL_KEY_SW_2
    528          *                 HAL_KEY_SW_1
    529          *
    530          * @return  none
    531          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    532          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    533          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
    534          
    535              (void)shift;  // Intentionally unreferenced parameter
    536          
    537              if ( keys & HAL_KEY_SW_1 )//key2
   \   000006   A2E0         MOV       C,0xE0 /* A   */.0
   \   000008   5005         JNC       ??SampleApp_HandleKeys_0
    538              {
    539          
    540                  //SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION, 2);
    541                  
    542                  call_dev_change();
   \   00000A                ; Setup parameters for call to function call_dev_change
   \   00000A   12....       LCALL     `??call_dev_change::?relay`; Banked call to: call_dev_change
   \   00000D   8007         SJMP      ??SampleApp_HandleKeys_1
    543              }
    544          
    545              else if ( keys & HAL_KEY_SW_6 )//key1
   \                     ??SampleApp_HandleKeys_0:
   \   00000F   A2E5         MOV       C,0xE0 /* A   */.5
   \   000011   5003         JNC       ??SampleApp_HandleKeys_1
    546              {
    547                mode_change();
   \   000013                ; Setup parameters for call to function mode_change
   \   000013   12....       LCALL     `??mode_change::?relay`; Banked call to: mode_change
    548              }
    549          }
   \                     ??SampleApp_HandleKeys_1:
   \   000016   7F01         MOV       R7,#0x1
   \   000018   02....       LJMP      ?BANKED_LEAVE_XDATA
    550          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    551          void call_dev_change(void)
   \                     call_dev_change:
    552          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    553              switch(sel_dev)
   \   000005   90....       MOV       DPTR,#sel_dev
   \   000008   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00000B   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for call_dev_change>_0`:
   \   00000E   0000         DW        0
   \   000010   09           DB        9
   \   000011   ....         DW        ??call_dev_change_0
   \   000013   ....         DW        ??call_dev_change_1
   \   000015   ....         DW        ??call_dev_change_2
   \   000017   ....         DW        ??call_dev_change_3
   \   000019   ....         DW        ??call_dev_change_4
   \   00001B   ....         DW        ??call_dev_change_5
   \   00001D   ....         DW        ??call_dev_change_6
   \   00001F   ....         DW        ??call_dev_change_7
   \   000021   ....         DW        ??call_dev_change_8
   \   000023   ....         DW        ??call_dev_change_9
   \   000025   ....         DW        ??call_dev_change_10
    554              {
    555              case 0:
    556                  sel_dev = 1;
   \                     ??call_dev_change_1:
   \   000027   90....       MOV       DPTR,#sel_dev
   \   00002A   7401         MOV       A,#0x1
   \   00002C   8036         SJMP      ??call_dev_change_11
    557                  break;
    558              case 1:
    559                  sel_dev = 2;
   \                     ??call_dev_change_2:
   \   00002E   90....       MOV       DPTR,#sel_dev
   \   000031   7402         MOV       A,#0x2
   \   000033   802F         SJMP      ??call_dev_change_11
    560                  break;
    561              case 2:
    562                  sel_dev = 3;
   \                     ??call_dev_change_3:
   \   000035   90....       MOV       DPTR,#sel_dev
   \   000038   7403         MOV       A,#0x3
   \   00003A   8028         SJMP      ??call_dev_change_11
    563                  break;
    564              case 3:
    565                  sel_dev = 4;
   \                     ??call_dev_change_4:
   \   00003C   90....       MOV       DPTR,#sel_dev
   \   00003F   7404         MOV       A,#0x4
   \   000041   8021         SJMP      ??call_dev_change_11
    566                  break;
    567              case 4:
    568                  sel_dev = 5;
   \                     ??call_dev_change_5:
   \   000043   90....       MOV       DPTR,#sel_dev
   \   000046   7405         MOV       A,#0x5
   \   000048   801A         SJMP      ??call_dev_change_11
    569                  break;
    570              case 5:
    571                  sel_dev = 6;
   \                     ??call_dev_change_6:
   \   00004A   90....       MOV       DPTR,#sel_dev
   \   00004D   7406         MOV       A,#0x6
   \   00004F   8013         SJMP      ??call_dev_change_11
    572                  break;
    573              case 6:
    574                  sel_dev = 7;
   \                     ??call_dev_change_7:
   \   000051   90....       MOV       DPTR,#sel_dev
   \   000054   7407         MOV       A,#0x7
   \   000056   800C         SJMP      ??call_dev_change_11
    575                  break;
    576              case 7:
    577                  sel_dev = 8;
   \                     ??call_dev_change_8:
   \   000058   90....       MOV       DPTR,#sel_dev
   \   00005B   7408         MOV       A,#0x8
   \   00005D   8005         SJMP      ??call_dev_change_11
    578                  break;
    579              case 8:
    580                  sel_dev = 9;
   \                     ??call_dev_change_9:
   \   00005F   90....       MOV       DPTR,#sel_dev
   \   000062   7409         MOV       A,#0x9
   \                     ??call_dev_change_11:
   \   000064   F0           MOVX      @DPTR,A
   \   000065   A3           INC       DPTR
   \   000066   E4           CLR       A
   \   000067   8006         SJMP      ??call_dev_change_12
    581                  break;
    582              case 9:
    583                  sel_dev = 0;
   \                     ??call_dev_change_10:
   \   000069   90....       MOV       DPTR,#sel_dev
   \   00006C   E4           CLR       A
   \   00006D   F0           MOVX      @DPTR,A
   \   00006E   A3           INC       DPTR
   \                     ??call_dev_change_12:
   \   00006F   F0           MOVX      @DPTR,A
    584                  break;
    585              }
    586          
    587              #if defined ( LCD_SUPPORTED )
    588              HalLcdWriteStringValue("sel_dev:", sel_dev, 10, 6);
   \                     ??call_dev_change_0:
   \   000070                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000070   90....       MOV       DPTR,#sel_dev
   \   000073   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000079   7C06         MOV       R4,#0x6
   \   00007B   790A         MOV       R1,#0xa
   \   00007D   7A..         MOV       R2,#`?<Constant "sel_dev:">` & 0xff
   \   00007F   7B..         MOV       R3,#(`?<Constant "sel_dev:">` >> 8) & 0xff
   \   000081   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
    589              #endif
    590          
    591              if(sel_dev < device_num)
   \   000087   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00008A   7583..       MOV       DPH,#(sel_dev >> 8) & 0xff
   \   00008D   7582..       MOV       DPL,#sel_dev & 0xff
   \   000090   C3           CLR       C
   \   000091   E0           MOVX      A,@DPTR
   \   000092   98           SUBB      A,R0
   \   000093   A3           INC       DPTR
   \   000094   E0           MOVX      A,@DPTR
   \   000095   99           SUBB      A,R1
   \   000096   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000098   65D0         XRL       A,PSW
   \   00009A   33           RLC       A
   \   00009B   5011         JNC       ??call_dev_change_13
    592              {
    593                  dst_dev = device[sel_dev];
   \   00009D   90....       MOV       DPTR,#sel_dev
   \   0000A0   12....       LCALL     ?Subroutine5 & 0xFFFF
    594              }
   \                     ??CrossCallReturnLabel_0:
   \   0000A3   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000A6   90....       MOV       DPTR,#dst_dev
   \   0000A9   E8           MOV       A,R0
   \   0000AA   F0           MOVX      @DPTR,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   E9           MOV       A,R1
   \   0000AD   F0           MOVX      @DPTR,A
    595          }
   \                     ??call_dev_change_13:
   \   0000AE   02....       LJMP      ??Subroutine30_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV       DPTR,#device_num
   \   000003                REQUIRE ??Subroutine28_0
   \   000003                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003   F5..         MOV       ?V2,A
   \   000005   F5..         MOV       ?V3,A
   \   000007   78..         MOV       R0,#?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   33           RLC       A
   \   000008   95E0         SUBB      A,0xE0 /* A   */
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   33           RLC       A
   \   000001   F9           MOV       R1,A
   \   000002   74..         MOV       A,#device & 0xff
   \   000004   28           ADD       A,R0
   \   000005   F582         MOV       DPL,A
   \   000007   74..         MOV       A,#(device >> 8) & 0xff
   \   000009   39           ADDC      A,R1
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   12....       LCALL     `??HalLcdWriteStringValue::?relay`; Banked call to: HalLcdWriteStringValue
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   28           ADD       A,R0
   \   000007   F8           MOV       R0,A
   \   000008   E9           MOV       A,R1
   \   000009   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00000C   22           RET
    596          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    597          void mode_change(void)
   \                     mode_change:
    598          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    599              if(main_flag == 0)
   \   000005   90....       MOV       DPTR,#main_flag
   \   000008   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00000B   E8           MOV       A,R0
   \   00000C   49           ORL       A,R1
   \   00000D   90....       MOV       DPTR,#main_flag
   \   000010   7007         JNZ       ??mode_change_0
    600              {
    601                  main_flag = 1;
   \   000012   7401         MOV       A,#0x1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   E4           CLR       A
   \   000017   8045         SJMP      ??mode_change_1
    602              }
    603              else if(main_flag == 1)
   \                     ??mode_change_0:
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   6401         XRL       A,#0x1
   \   00001C   7002         JNZ       ??mode_change_2
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \                     ??mode_change_2:
   \   000020   90....       MOV       DPTR,#main_flag
   \   000023   700A         JNZ       ??mode_change_3
    604              {
    605                  main_flag = 2;
   \   000025   7402         MOV       A,#0x2
   \   000027   F0           MOVX      @DPTR,A
   \   000028   A3           INC       DPTR
   \   000029   E4           CLR       A
   \   00002A   F0           MOVX      @DPTR,A
    606                  SampleApp_SendBeepMessage(dst_dev, 1);
   \   00002B                ; Setup parameters for call to function SampleApp_SendBeepMessage
   \   00002B   7901         MOV       R1,#0x1
   \   00002D   8013         SJMP      ??mode_change_4
    607              }
    608              else if(main_flag == 2)
   \                     ??mode_change_3:
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   6402         XRL       A,#0x2
   \   000032   7002         JNZ       ??mode_change_5
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \                     ??mode_change_5:
   \   000036   90....       MOV       DPTR,#main_flag
   \   000039   7014         JNZ       ??mode_change_6
    609              {
    610                  main_flag = 3;
   \   00003B   7403         MOV       A,#0x3
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   E4           CLR       A
   \   000040   F0           MOVX      @DPTR,A
    611                  SampleApp_SendBeepMessage(dst_dev, 0);
   \   000041                ; Setup parameters for call to function SampleApp_SendBeepMessage
   \   000041   F9           MOV       R1,A
   \                     ??mode_change_4:
   \   000042   90....       MOV       DPTR,#dst_dev
   \   000045   E0           MOVX      A,@DPTR
   \   000046   FA           MOV       R2,A
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   FB           MOV       R3,A
   \   00004A   12....       LCALL     `??SampleApp_SendBeepMessage::?relay`; Banked call to: SampleApp_SendBeepMessage
   \   00004D   8010         SJMP      ??mode_change_7
    612              }
    613              else if(main_flag == 3)
   \                     ??mode_change_6:
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   6403         XRL       A,#0x3
   \   000052   7002         JNZ       ??mode_change_8
   \   000054   A3           INC       DPTR
   \   000055   E0           MOVX      A,@DPTR
   \                     ??mode_change_8:
   \   000056   7007         JNZ       ??mode_change_7
    614              {
    615                  main_flag = 0;
   \   000058   90....       MOV       DPTR,#main_flag
   \   00005B   E4           CLR       A
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   A3           INC       DPTR
   \                     ??mode_change_1:
   \   00005E   F0           MOVX      @DPTR,A
    616              }
    617          
    618              #if defined ( LCD_SUPPORTED )
    619              HalLcdWriteStringValue("model:", main_flag, 10, 5);
   \                     ??mode_change_7:
   \   00005F                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00005F   90....       MOV       DPTR,#main_flag
   \   000062   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000068   7C05         MOV       R4,#0x5
   \   00006A   790A         MOV       R1,#0xa
   \   00006C   7A..         MOV       R2,#`?<Constant "model:">` & 0xff
   \   00006E   7B..         MOV       R3,#(`?<Constant "model:">` >> 8) & 0xff
   \   000070   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000073   80..         SJMP      ??Subroutine29_0
    620              #endif
    621          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine30_0
   \   000003                ; // Fall through to label ??Subroutine30_0
    622          
    623          
    624          
    625          /*********************************************************************
    626          * LOCAL FUNCTIONS
    627          */
    628          
    629          /*********************************************************************
    630          * @fn      SampleApp_MessageMSGCB
    631          *
    632          * @brief   Data message processor callback.  This function processes
    633          *          any incoming data - probably from other devices.  So, based
    634          *          on cluster ID, perform the intended action.
    635          *
    636          * @param   none
    637          *
    638          * @return  none
    639          */
    640          //½ÓÊÕÊý¾Ý£¬²ÎÊýÎª½ÓÊÕµ½µÄÊý¾Ý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    641          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    642          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    643              char i;
    644              byte buf[3];
    645          
    646              //  HalLcdWriteStringValue("GROUP:", group, 10, 4);
    647          
    648              switch ( pkt->clusterId ) //ÅÐ¶Ï´ØID
   \   00000E   8A82         MOV       DPL,R2
   \   000010   F583         MOV       DPH,A
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000019   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001C   0100         DW        1
   \   00001E   02           DB        2
   \   00001F   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000021   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000023   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000025   ....         DW        ??SampleApp_MessageMSGCB_2
    649              {
    650              case SAMPLEAPP_PERIODIC_CLUSTERID: //ÊÕµ½¹ã²¥Êý¾Ý
    651                  if(beep_flag == 1)
   \                     ??SampleApp_MessageMSGCB_1:
   \   000027   90....       MOV       DPTR,#beep_flag
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6401         XRL       A,#0x1
   \   00002D   7002         JNZ       ??SampleApp_MessageMSGCB_3
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \                     ??SampleApp_MessageMSGCB_3:
   \   000031   7003         JNZ       $+5
   \   000033   02....       LJMP      ??SampleApp_MessageMSGCB_0 & 0xFFFF
    652                      break;
    653                  osal_memset(buf, 0, 3);
   \   000036                ; Setup parameters for call to function osal_memset
   \   000036   7C03         MOV       R4,#0x3
   \   000038   7D00         MOV       R5,#0x0
   \   00003A   7900         MOV       R1,#0x0
   \   00003C   AA..         MOV       R2,?XSP + 0
   \   00003E   AB..         MOV       R3,?XSP + 1
   \   000040   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    654                  osal_memcpy(buf, pkt->cmd.Data, 3); //¸´ÖÆÊý¾Ýµ½»º³åÇøÖÐ
   \   000043                ; Setup parameters for call to function osal_memcpy
   \   000043   EE           MOV       A,R6
   \   000044   2422         ADD       A,#0x22
   \   000046   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004C   7C03         MOV       R4,#0x3
   \   00004E   7D00         MOV       R5,#0x0
   \   000050   EC           MOV       A,R4
   \   000051   12....       LCALL     ?XSTACK_DISP101_8
   \   000054   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
    655          
    656                  if(buf[0]=='D' && buf[1]=='1')      //¹ã²¥Êý¾Ý
   \   00005A   85..82       MOV       DPL,?XSP + 0
   \   00005D   85..83       MOV       DPH,?XSP + 1
   \   000060   E0           MOVX      A,@DPTR
   \   000061   6444         XRL       A,#0x44
   \   000063   6003         JZ        $+5
   \   000065   02....       LJMP      ??SampleApp_MessageMSGCB_4 & 0xFFFF
   \   000068   7401         MOV       A,#0x1
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   6431         XRL       A,#0x31
   \   000070   6003         JZ        $+5
   \   000072   02....       LJMP      ??SampleApp_MessageMSGCB_5 & 0xFFFF
    657                  {
    658          
    659                      //	if(group != buf[2])
    660                      //	  break;
    661          
    662                      #if defined ( LCD_SUPPORTED )
    663                      HalLcdWriteStringValue("rssi:", abs(pkt->rssi), 10, 6);
   \   000075                ; Setup parameters for call to function abs
   \   000075   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000078   FA           MOV       R2,A
   \   000079   33           RLC       A
   \   00007A   95E0         SUBB      A,0xE0 /* A   */
   \   00007C   FB           MOV       R3,A
   \   00007D   12....       LCALL     `??abs::?relay`  ; Banked call to: abs
   \   000080   8A..         MOV       ?V0,R2
   \   000082   8B..         MOV       ?V1,R3
   \   000084                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000084   EB           MOV       A,R3
   \   000085   33           RLC       A
   \   000086   95E0         SUBB      A,0xE0 /* A   */
   \   000088   F5..         MOV       ?V2,A
   \   00008A   F5..         MOV       ?V3,A
   \   00008C   78..         MOV       R0,#?V0
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000091   7C06         MOV       R4,#0x6
   \   000093   790A         MOV       R1,#0xa
   \   000095   7A..         MOV       R2,#`?<Constant "rssi:">` & 0xff
   \   000097   7B..         MOV       R3,#(`?<Constant "rssi:">` >> 8) & 0xff
   \   000099   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00009C   12....       LCALL     ?DEALLOC_XSTACK8
    664                      HalLcdWriteStringValue("src addr:", pkt->srcAddr.addr.shortAddr, 16, 5);
   \   00009F                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00009F   8E82         MOV       DPL,R6
   \   0000A1   8F83         MOV       DPH,R7
   \   0000A3   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0000A9   7C05         MOV       R4,#0x5
   \   0000AB   7910         MOV       R1,#0x10
   \   0000AD   7A..         MOV       R2,#`?<Constant "src addr:">` & 0xff
   \   0000AF   7B..         MOV       R3,#(`?<Constant "src addr:">` >> 8) & 0xff
   \   0000B1   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000B4   12....       LCALL     ?DEALLOC_XSTACK8
    665                      #endif
    666          
    667          
    668                      if(main_flag == 0)                	//model 0 Í£Ö¹
   \   0000B7   90....       MOV       DPTR,#main_flag
   \   0000BA   12....       LCALL     ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000BD   E8           MOV       A,R0
   \   0000BE   49           ORL       A,R1
   \   0000BF   607D         JZ        ??SampleApp_MessageMSGCB_6
    669                      {
    670                          beep0();
   \   0000C1                ; Setup parameters for call to function beep0
    671          
    672                      }
    673                      else if(main_flag == 1)         //mode 1 ±ê×¼Ä£Ê½ ¸ù¾Ý¾àÀëÖÇÄÜÅÐ¶ÏÊÇ·ñ¶ªÊ§
   \   0000C1   90....       MOV       DPTR,#main_flag
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   6401         XRL       A,#0x1
   \   0000C7   7002         JNZ       ??SampleApp_MessageMSGCB_7
   \   0000C9   A3           INC       DPTR
   \   0000CA   E0           MOVX      A,@DPTR
   \                     ??SampleApp_MessageMSGCB_7:
   \   0000CB   6003         JZ        $+5
   \   0000CD   02....       LJMP      ??SampleApp_MessageMSGCB_0 & 0xFFFF
    674                      {
    675                          for(i = 0; i <= device_num; i ++)
   \   0000D0   75..00       MOV       ?V0,#0x0
   \   0000D3   8022         SJMP      ??SampleApp_MessageMSGCB_8
    676                          {
    677                              if(pkt->srcAddr.addr.shortAddr == device[i])
   \                     ??SampleApp_MessageMSGCB_9:
   \   0000D5   8E82         MOV       DPL,R6
   \   0000D7   8F83         MOV       DPH,R7
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   FA           MOV       R2,A
   \   0000E1   A3           INC       DPTR
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   FB           MOV       R3,A
   \   0000E4   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000E7   7003         JNZ       ??SampleApp_MessageMSGCB_10
   \   0000E9   A3           INC       DPTR
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   6B           XRL       A,R3
   \                     ??SampleApp_MessageMSGCB_10:
   \   0000EC   7007         JNZ       ??SampleApp_MessageMSGCB_11
    678                              {
    679                                  online[i]++;
   \   0000EE   A8..         MOV       R0,?V0
   \   0000F0   12....       LCALL     ?Subroutine17 & 0xFFFF
    680                              }
    681                          }
   \                     ??CrossCallReturnLabel_22:
   \   0000F3   04           INC       A
   \   0000F4   F0           MOVX      @DPTR,A
   \                     ??SampleApp_MessageMSGCB_11:
   \   0000F5   05..         INC       ?V0
   \                     ??SampleApp_MessageMSGCB_8:
   \   0000F7   90....       MOV       DPTR,#device_num
   \   0000FA   A8..         MOV       R0,?V0
   \   0000FC   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000FF   50D4         JNC       ??SampleApp_MessageMSGCB_9
    682          
    683                          if(pkt->rssi < -80)
   \   000101   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000104   C3           CLR       C
   \   000105   94B0         SUBB      A,#-0x50
   \   000107   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000109   65D0         XRL       A,PSW
   \   00010B   33           RLC       A
   \   00010C   501E         JNC       ??SampleApp_MessageMSGCB_12
    684                          {
    685                              if(count < 3)
   \   00010E   90....       MOV       DPTR,#count
   \   000111   C3           CLR       C
   \   000112   E0           MOVX      A,@DPTR
   \   000113   9403         SUBB      A,#0x3
   \   000115   12....       LCALL     ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000118   5009         JNC       ??SampleApp_MessageMSGCB_13
    686                                  count++;
   \   00011A   90....       MOV       DPTR,#count
   \   00011D   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000120   02....       LJMP      ??SampleApp_MessageMSGCB_14 & 0xFFFF
    687                              else
    688                              {
    689                                  beep1();
   \                     ??SampleApp_MessageMSGCB_13:
   \   000123                ; Setup parameters for call to function beep1
   \   000123   12....       LCALL     `??beep1::?relay`; Banked call to: beep1
    690                                  count = 0;
   \   000126   90....       MOV       DPTR,#count
   \   000129   02....       LJMP      ??SampleApp_MessageMSGCB_15 & 0xFFFF
    691                              }
    692                          }
    693                          else if(pkt->rssi > -66)
   \                     ??SampleApp_MessageMSGCB_12:
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   C3           CLR       C
   \   00012E   94BF         SUBB      A,#-0x41
   \   000130   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000132   65D0         XRL       A,PSW
   \   000134   33           RLC       A
   \   000135   90....       MOV       DPTR,#count
   \   000138   400A         JC        ??SampleApp_MessageMSGCB_16
    694                          {
    695                              count = 0;
   \   00013A   E4           CLR       A
   \   00013B   F0           MOVX      @DPTR,A
   \   00013C   A3           INC       DPTR
   \   00013D   F0           MOVX      @DPTR,A
    696                              beep0();
   \   00013E                ; Setup parameters for call to function beep0
   \                     ??SampleApp_MessageMSGCB_6:
   \   00013E   12....       LCALL     `??beep0::?relay`; Banked call to: beep0
   \   000141   02....       LJMP      ??SampleApp_MessageMSGCB_0 & 0xFFFF
    697                          }
    698                          else
    699                              count = 0;
   \                     ??SampleApp_MessageMSGCB_16:
   \   000144   02....       LJMP      ??SampleApp_MessageMSGCB_15 & 0xFFFF
    700                      }
    701                      else                           //mode 2 ÊÖ¶¯¼°ÆäËûÄ£Ê½
    702                      {
    703          
    704                      }
    705          
    706          
    707                  }
    708                  else if(buf[0] == 0x00)         //Ð­µ÷Æ÷·¢À´µÄÉè±¸±í
   \                     ??SampleApp_MessageMSGCB_4:
   \   000147   E0           MOVX      A,@DPTR
   \   000148   6003         JZ        $+5
   \   00014A   02....       LJMP      ??SampleApp_MessageMSGCB_5 & 0xFFFF
    709                  {
    710                      osal_memcpy(device, pkt->cmd.Data, pkt->cmd.DataLength);
   \   00014D   EE           MOV       A,R6
   \   00014E   2420         ADD       A,#0x20
   \   000150   F5..         MOV       ?V0,A
   \   000152   E4           CLR       A
   \   000153   3F           ADDC      A,R7
   \   000154   F5..         MOV       ?V1,A
   \   000156                ; Setup parameters for call to function osal_memcpy
   \   000156   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   F5..         MOV       ?V4,A
   \   00015C   A3           INC       DPTR
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   F5..         MOV       ?V5,A
   \   000160   75..00       MOV       ?V6,#0x0
   \   000163   78..         MOV       R0,#?V4
   \   000165   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000168   85..82       MOV       DPL,?V0
   \   00016B   85..83       MOV       DPH,?V1
   \   00016E   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000171   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000174   12....       LCALL     ?DEALLOC_XSTACK8
    711                      device_num = pkt->cmd.DataLength/2;
   \   000177   85..82       MOV       DPL,?V0
   \   00017A   85..83       MOV       DPH,?V1
   \   00017D   E0           MOVX      A,@DPTR
   \   00017E   F8           MOV       R0,A
   \   00017F   A3           INC       DPTR
   \   000180   E0           MOVX      A,@DPTR
   \   000181   C3           CLR       C
   \   000182   13           RRC       A
   \   000183   F9           MOV       R1,A
   \   000184   E8           MOV       A,R0
   \   000185   13           RRC       A
   \   000186   90....       MOV       DPTR,#device_num
   \   000189   F0           MOVX      @DPTR,A
   \   00018A   A3           INC       DPTR
   \   00018B   E9           MOV       A,R1
   \   00018C   F0           MOVX      @DPTR,A
    712          
    713          #if defined ( LCD_SUPPORTED )
    714                      HalLcdWriteStringValue("total device:", device_num, 10, 4);
   \   00018D                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00018D   90....       MOV       DPTR,#device_num
   \   000190   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000193   F5..         MOV       ?V3,A
   \   000195   78..         MOV       R0,#?V0
   \   000197   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00019A   7C04         MOV       R4,#0x4
   \   00019C   790A         MOV       R1,#0xa
   \   00019E   7A..         MOV       R2,#`?<Constant "total device:">` & 0xff
   \   0001A0   7B..         MOV       R3,#(`?<Constant "total device:">` >> 8) & 0xff
   \   0001A2   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0001A5   12....       LCALL     ?DEALLOC_XSTACK8
    715          #endif
    716          
    717                      for(i = 0 ; i < device_num; i++)
   \   0001A8   75..00       MOV       ?V0,#0x0
   \                     ??SampleApp_MessageMSGCB_17:
   \   0001AB   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0001AE   C3           CLR       C
   \   0001AF   E5..         MOV       A,?V0
   \   0001B1   98           SUBB      A,R0
   \   0001B2   E4           CLR       A
   \   0001B3   99           SUBB      A,R1
   \   0001B4   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0001B6   65D0         XRL       A,PSW
   \   0001B8   33           RLC       A
   \   0001B9   4003         JC        $+5
   \   0001BB   02....       LJMP      ??SampleApp_MessageMSGCB_0 & 0xFFFF
    718                      {
    719                          if(device[i] == NLME_GetShortAddr())
   \   0001BE                ; Setup parameters for call to function NLME_GetShortAddr
   \   0001BE   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0001C1   A8..         MOV       R0,?V0
   \   0001C3   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0001C6   7003         JNZ       ??SampleApp_MessageMSGCB_18
   \   0001C8   A3           INC       DPTR
   \   0001C9   E0           MOVX      A,@DPTR
   \   0001CA   6B           XRL       A,R3
   \                     ??SampleApp_MessageMSGCB_18:
   \   0001CB   701B         JNZ       ??SampleApp_MessageMSGCB_19
    720          #if defined ( LCD_SUPPORTED )
    721                              HalLcdWriteStringValue("dev_NO.", i, 10, 2);
   \   0001CD                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0001CD   85....       MOV       ?V4,?V0
   \   0001D0   E4           CLR       A
   \   0001D1   F5..         MOV       ?V5,A
   \   0001D3   F5..         MOV       ?V7,A
   \   0001D5   78..         MOV       R0,#?V4
   \   0001D7   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0001DA   7C02         MOV       R4,#0x2
   \   0001DC   790A         MOV       R1,#0xa
   \   0001DE   7A..         MOV       R2,#`?<Constant "dev_NO.">` & 0xff
   \   0001E0   7B..         MOV       R3,#(`?<Constant "dev_NO.">` >> 8) & 0xff
   \   0001E2   12....       LCALL     ??Subroutine33_0 & 0xFFFF
    722          #endif
    723                      }
   \                     ??CrossCallReturnLabel_59:
   \   0001E5   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??SampleApp_MessageMSGCB_19:
   \   0001E8   05..         INC       ?V0
   \   0001EA   80BF         SJMP      ??SampleApp_MessageMSGCB_17
    724          
    725                  }
    726                  else
    727                  {
    728                      HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \                     ??SampleApp_MessageMSGCB_5:
   \   0001EC                ; Setup parameters for call to function HalLedSet
   \   0001EC   7A01         MOV       R2,#0x1
   \   0001EE   7901         MOV       R1,#0x1
   \   0001F0   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0001F3   8063         SJMP      ??SampleApp_MessageMSGCB_0
    729                  }
    730                  break;
    731          
    732              case SAMPLEAPP_FLASH_CLUSTERID: //ÊÕµ½×é²¥Êý¾Ý
    733          
    734                  break;
    735          
    736              case SAMPLEAPP_SINGLE_CLUSTERID:        //µã¶Ôµãºô½ÐÊý¾Ý
    737                  #if defined ( LCD_SUPPORTED )
    738                  HalLcdWriteStringValue("beep info:", pkt->srcAddr.addr.shortAddr, 16, 5);
   \                     ??SampleApp_MessageMSGCB_2:
   \   0001F5                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0001F5   8A82         MOV       DPL,R2
   \   0001F7   8B83         MOV       DPH,R3
   \   0001F9   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0001FC   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0001FF   7C05         MOV       R4,#0x5
   \   000201   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000204   12....       LCALL     ?DEALLOC_XSTACK8
    739                  #endif
    740                  osal_memset(buf, 0, 3);
   \   000207                ; Setup parameters for call to function osal_memset
   \   000207   7C03         MOV       R4,#0x3
   \   000209   7D00         MOV       R5,#0x0
   \   00020B   7900         MOV       R1,#0x0
   \   00020D   AA..         MOV       R2,?XSP + 0
   \   00020F   AB..         MOV       R3,?XSP + 1
   \   000211   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    741                  osal_memcpy(buf, pkt->cmd.Data, 3); //¸´ÖÆÊý¾Ýµ½»º³åÇøÖÐ
   \   000214                ; Setup parameters for call to function osal_memcpy
   \   000214   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000217   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00021A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00021D   7C03         MOV       R4,#0x3
   \   00021F   7D00         MOV       R5,#0x0
   \   000221   EC           MOV       A,R4
   \   000222   12....       LCALL     ?XSTACK_DISP101_8
   \   000225   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000228   12....       LCALL     ?DEALLOC_XSTACK8
    742          
    743                  if(buf[0]=='B' && buf[1]=='P')
   \   00022B   85..82       MOV       DPL,?XSP + 0
   \   00022E   85..83       MOV       DPH,?XSP + 1
   \   000231   E0           MOVX      A,@DPTR
   \   000232   6442         XRL       A,#0x42
   \   000234   7022         JNZ       ??SampleApp_MessageMSGCB_0
   \   000236   7401         MOV       A,#0x1
   \   000238   12....       LCALL     ?XSTACK_DISP0_8
   \   00023B   E0           MOVX      A,@DPTR
   \   00023C   6450         XRL       A,#0x50
   \   00023E   7018         JNZ       ??SampleApp_MessageMSGCB_0
    744                  {
    745                      if(buf[2] == 1)
   \   000240   7402         MOV       A,#0x2
   \   000242   12....       LCALL     ?XSTACK_DISP0_8
   \   000245   E0           MOVX      A,@DPTR
   \   000246   6401         XRL       A,#0x1
   \   000248   90....       MOV       DPTR,#beep_flag
   \   00024B   7007         JNZ       ??SampleApp_MessageMSGCB_15
    746                          beep_flag = 1;
   \   00024D   7401         MOV       A,#0x1
   \   00024F   F0           MOVX      @DPTR,A
   \   000250   A3           INC       DPTR
   \   000251   E4           CLR       A
   \   000252   8003         SJMP      ??SampleApp_MessageMSGCB_14
    747                      else
    748                          beep_flag = 0;
   \                     ??SampleApp_MessageMSGCB_15:
   \   000254   E4           CLR       A
   \   000255   F0           MOVX      @DPTR,A
   \   000256   A3           INC       DPTR
   \                     ??SampleApp_MessageMSGCB_14:
   \   000257   F0           MOVX      @DPTR,A
    749                  }
    750          
    751              }
    752          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000258   7403         MOV       A,#0x3
   \   00025A                REQUIRE ?Subroutine2
   \   00025A                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EE           MOV       A,R6
   \   000001   2422         ADD       A,#0x22
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   EE           MOV       A,R6
   \   000001   2418         ADD       A,#0x18
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E8           MOV       A,R0
   \   000001   28           ADD       A,R0
   \   000002   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000005   E0           MOVX      A,@DPTR
   \   000006   6A           XRL       A,R2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002                REQUIRE ??Subroutine31_0
   \   000002                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006                REQUIRE ??Subroutine32_0
   \   000006                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V2,A
   \   000006   F5..         MOV       ?V3,A
   \   000008   78..         MOV       R0,#?V0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   7910         MOV       R1,#0x10
   \   000002   7A..         MOV       R2,#`?<Constant "beep info:">` & 0xff
   \   000004   7B..         MOV       R3,#(`?<Constant "beep info:">` >> 8) & 0xff
   \   000006                REQUIRE ??Subroutine33_0
   \   000006                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   7A..         MOV       R2,#device & 0xff
   \   000007   7B..         MOV       R3,#(device >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000009   75..00       MOV       ?V2,#0x0
   \   00000C   78..         MOV       R0,#?V0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   C3           CLR       C
   \   000001   E0           MOVX      A,@DPTR
   \   000002   98           SUBB      A,R0
   \   000003                REQUIRE ??Subroutine34_0
   \   000003                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   9400         SUBB      A,#0x0
   \   000004   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000006   65D0         XRL       A,PSW
   \   000008   33           RLC       A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   74..         MOV       A,#online & 0xff
   \   000002   28           ADD       A,R0
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#(online >> 8) & 0xff
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2401         ADD       A,#0x1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   22           RET
    753          
    754          //´¦ÀíZDO²ã´«À´µÄÐÅÏ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    755          void SApp_ProcessMsgCBs( zdoIncomingMsg_t *msgPtr )
   \                     SApp_ProcessMsgCBs:
    756          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    757          #if defined(ZDO_COORDINATOR)
    758              {
    759                  char i;
    760                  uint32 l_addr;
    761                  char flag = 0;
    762                  uint16 nwk_addr;
    763                  byte buf[10];
    764                  //  HalLcdWriteStringValue("GROUP:", group, 10, 4);
    765          
    766                  switch ( msgPtr->clusterID ) //ÅÐ¶Ï´ØID
   \   00000E   EA           MOV       A,R2
   \   00000F   240C         ADD       A,#0xc
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6413         XRL       A,#0x13
   \   00001A   7002         JNZ       ??SApp_ProcessMsgCBs_0
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \                     ??SApp_ProcessMsgCBs_0:
   \   00001E   6003         JZ        $+5
   \   000020   02....       LJMP      ??SApp_ProcessMsgCBs_1 & 0xFFFF
    767                  {
    768                  case Device_annce:
    769          
    770                      osal_memset(buf, 0, 10);
   \   000023                ; Setup parameters for call to function osal_memset
   \   000023   7C0A         MOV       R4,#0xa
   \   000025   7D00         MOV       R5,#0x0
   \   000027   7900         MOV       R1,#0x0
   \   000029   AA..         MOV       R2,?XSP + 0
   \   00002B   AB..         MOV       R3,?XSP + 1
   \   00002D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    771                      osal_memcpy(buf, msgPtr->asdu, 10); //¸´ÖÆÊý¾Ýµ½»º³åÇøÖÐ
   \   000030                ; Setup parameters for call to function osal_memcpy
   \   000030   EE           MOV       A,R6
   \   000031   2413         ADD       A,#0x13
   \   000033   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000039   7C0A         MOV       R4,#0xa
   \   00003B   7D00         MOV       R5,#0x0
   \   00003D   7403         MOV       A,#0x3
   \   00003F   12....       LCALL     ?XSTACK_DISP101_8
   \   000042   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
    772                      nwk_addr = buf[1]*0x100 + buf[0];
   \   000048   7401         MOV       A,#0x1
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F9           MOV       R1,A
   \   00004F   85..82       MOV       DPL,?XSP + 0
   \   000052   85..83       MOV       DPH,?XSP + 1
   \   000055   E0           MOVX      A,@DPTR
   \   000056   FA           MOV       R2,A
   \   000057   FE           MOV       R6,A
   \   000058   E9           MOV       A,R1
   \   000059   FF           MOV       R7,A
    773                      l_addr = buf[5]*0x1000000 + buf[4]*0x10000 + buf[3]*0x100 + buf[2];
   \   00005A   7405         MOV       A,#0x5
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F5..         MOV       ?V0,A
   \   000062   E4           CLR       A
   \   000063   F5..         MOV       ?V1,A
   \   000065   F5..         MOV       ?V3,A
   \   000067   7418         MOV       A,#0x18
   \   000069   78..         MOV       R0,#?V0
   \   00006B   12....       LCALL     ?L_SHL
   \   00006E   7404         MOV       A,#0x4
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000076   7410         MOV       A,#0x10
   \   000078   78..         MOV       R0,#?V4
   \   00007A   12....       LCALL     ?L_SHL
   \   00007D   78..         MOV       R0,#?V0
   \   00007F   79..         MOV       R1,#?V4
   \   000081   12....       LCALL     ?L_ADD
   \   000084   7403         MOV       A,#0x3
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   F5..         MOV       ?V4,A
   \   00008C   E4           CLR       A
   \   00008D   C5..         XCH       A,?V4
   \   00008F   F5..         MOV       ?V5,A
   \   000091   33           RLC       A
   \   000092   95E0         SUBB      A,0xE0 /* A   */
   \   000094   F5..         MOV       ?V6,A
   \   000096   F5..         MOV       ?V7,A
   \   000098   78..         MOV       R0,#?V0
   \   00009A   79..         MOV       R1,#?V4
   \   00009C   12....       LCALL     ?L_ADD
   \   00009F   7402         MOV       A,#0x2
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000A7   78..         MOV       R0,#?V0
   \   0000A9   79..         MOV       R1,#?V4
   \   0000AB   12....       LCALL     ?L_ADD
    774                      #if defined ( LCD_SUPPORTED )
    775                      HalLcdWriteStringValue("DevAnnce:", nwk_addr, 16, 4);
   \   0000AE                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000AE   8A..         MOV       ?V4,R2
   \   0000B0   8F..         MOV       ?V5,R7
   \   0000B2   78..         MOV       R0,#?V4
   \   0000B4   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0000B7   7C04         MOV       R4,#0x4
   \   0000B9   7910         MOV       R1,#0x10
   \   0000BB   7A..         MOV       R2,#`?<Constant "DevAnnce:">` & 0xff
   \   0000BD   7B..         MOV       R3,#(`?<Constant "DevAnnce:">` >> 8) & 0xff
   \   0000BF   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000C2   12....       LCALL     ?DEALLOC_XSTACK8
    776                      HalLcdWriteStringValue("l_addr:", l_addr, 16, 3);
   \   0000C5                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000C5   78..         MOV       R0,#?V0
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0000CA   7C03         MOV       R4,#0x3
   \   0000CC   7910         MOV       R1,#0x10
   \   0000CE   7A..         MOV       R2,#`?<Constant "l_addr:">` & 0xff
   \   0000D0   7B..         MOV       R3,#(`?<Constant "l_addr:">` >> 8) & 0xff
   \   0000D2   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000D5   12....       LCALL     ?DEALLOC_XSTACK8
    777                      #endif
    778          
    779                      for(i = 0; i <= device_num; i++)
   \   0000D8   7900         MOV       R1,#0x0
   \   0000DA   8001         SJMP      ??SApp_ProcessMsgCBs_2
   \                     ??SApp_ProcessMsgCBs_3:
   \   0000DC   09           INC       R1
   \                     ??SApp_ProcessMsgCBs_2:
   \   0000DD   90....       MOV       DPTR,#device_num
   \   0000E0   E9           MOV       A,R1
   \   0000E1   FA           MOV       R2,A
   \   0000E2   C3           CLR       C
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   9A           SUBB      A,R2
   \   0000E5   12....       LCALL     ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000E8   4021         JC        ??SApp_ProcessMsgCBs_4
    780                      {
    781                          if(long_addr[i] == l_addr)
   \   0000EA   E9           MOV       A,R1
   \   0000EB   F5..         MOV       ?V4,A
   \   0000ED   75..00       MOV       ?V5,#0x0
   \   0000F0   7402         MOV       A,#0x2
   \   0000F2   78..         MOV       R0,#?V4
   \   0000F4   12....       LCALL     ?S_SHL
   \   0000F7   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000FA   12....       LCALL     ?L_EQ_X
   \   0000FD   70DD         JNZ       ??SApp_ProcessMsgCBs_3
    782                          {
    783                              flag = 1;
    784                              device[i] = nwk_addr;
   \   0000FF   E9           MOV       A,R1
   \   000100   2A           ADD       A,R2
   \   000101   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000104   EE           MOV       A,R6
   \   000105   F0           MOVX      @DPTR,A
   \   000106   A3           INC       DPTR
   \   000107   EF           MOV       A,R7
   \   000108   F0           MOVX      @DPTR,A
    785                              break;
   \   000109   8028         SJMP      ??SApp_ProcessMsgCBs_5
    786                          }
    787                      }
    788                      if(flag == 0)
    789                      {
    790                          device[++device_num] = nwk_addr;
   \                     ??SApp_ProcessMsgCBs_4:
   \   00010B   90....       MOV       DPTR,#device_num
   \   00010E   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000111   90....       MOV       DPTR,#device_num
   \   000114   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000117   EE           MOV       A,R6
   \   000118   F0           MOVX      @DPTR,A
   \   000119   A3           INC       DPTR
   \   00011A   EF           MOV       A,R7
   \   00011B   F0           MOVX      @DPTR,A
    791                          long_addr[device_num] = l_addr;
   \   00011C   90....       MOV       DPTR,#device_num
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   F5..         MOV       ?V4,A
   \   000122   A3           INC       DPTR
   \   000123   E0           MOVX      A,@DPTR
   \   000124   F5..         MOV       ?V5,A
   \   000126   7402         MOV       A,#0x2
   \   000128   78..         MOV       R0,#?V4
   \   00012A   12....       LCALL     ?S_SHL
   \   00012D   12....       LCALL     ?Subroutine20 & 0xFFFF
    792                      }
   \                     ??CrossCallReturnLabel_29:
   \   000130   12....       LCALL     ?L_MOV_TO_X
    793          
    794                      SampleApp_SendAddrMessage( (uint8 *)device, device_num );
   \                     ??SApp_ProcessMsgCBs_5:
   \   000133                ; Setup parameters for call to function SampleApp_SendAddrMessage
   \   000133   90....       MOV       DPTR,#device_num
   \   000136   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000139   12....       LCALL     `??SampleApp_SendAddrMessage::?relay`; Banked call to: SampleApp_SendAddrMessage
    795          
    796          
    797                      //      flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    798                      //      HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
    799                      break;
    800          
    801                  }
    802              }
    803          #endif
    804          
    805          }
   \                     ??SApp_ProcessMsgCBs_1:
   \   00013C   740A         MOV       A,#0xa
   \   00013E   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   74..         MOV       A,#long_addr & 0xff
   \   000002   25..         ADD       A,?V4
   \   000004   F582         MOV       DPL,A
   \   000006   74..         MOV       A,#(long_addr >> 8) & 0xff
   \   000008   35..         ADDC      A,?V5
   \   00000A   F583         MOV       DPH,A
   \   00000C   78..         MOV       R0,#?V0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V5,A
   \   000006   F5..         MOV       ?V6,A
   \   000008   F5..         MOV       ?V7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    806          
    807          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7403         MOV       A,#0x3
   \   000002                REQUIRE ??Subroutine29_0
   \   000002                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    808          void SampleApp_SendBeepMessage(uint16 dst, uint8 s)
   \                     SampleApp_SendBeepMessage:
    809          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    810              //#if defined(ZDO_COORDINATOR)
    811              SampleApp_Single_DstAddr.addr.shortAddr = dst;
   \   00000A   90....       MOV       DPTR,#SampleApp_Single_DstAddr
   \   00000D   EA           MOV       A,R2
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   EB           MOV       A,R3
   \   000011   F0           MOVX      @DPTR,A
    812              byte SendData[3] = "BP";
   \   000012   90....       MOV       DPTR,#`?<Constant "BP">`
   \   000015   AC..         MOV       R4,?XSP + 0
   \   000017   AD..         MOV       R5,?XSP + 1
   \   000019   7403         MOV       A,#0x3
   \   00001B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    813              SendData[2] = s;
   \   00001E   7402         MOV       A,#0x2
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E9           MOV       A,R1
   \   000024   F0           MOVX      @DPTR,A
    814          #if defined ( LCD_SUPPORTED )
    815              HalLcdWriteStringValue("beep info:", SampleApp_Single_DstAddr.addr.shortAddr, 16, 4);
   \   000025                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000025   90....       MOV       DPTR,#SampleApp_Single_DstAddr
   \   000028   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00002E   7C04         MOV       R4,#0x4
   \   000030   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000033   12....       LCALL     ?DEALLOC_XSTACK8
    816          #endif
    817              // µ÷ÓÃAF_DataRequest½«Êý¾ÝÎÞÏß¹ã²¥³öÈ¥
    818              if( AF_DataRequest( &SampleApp_Single_DstAddr,   //·¢ËÍÄ¿µÄµØÖ·£«¶ËµãµØÖ·ºÍ´«ËÍÄ£Ê½
    819                                  &SampleApp_epDesc,            //Ô´(´ð¸´»òÈ·ÈÏ)ÖÕ¶ËµÄÃèÊö£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©Ô´EP
    820                                  SAMPLEAPP_SINGLE_CLUSTERID, //±»ProfileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    821                                  3,                // ·¢ËÍÊý¾Ý³¤¶È
    822                                  SendData,                          // ·¢ËÍÊý¾Ý»º³åÇø
    823                                  &SampleApp_TransID,           // ÈÎÎñIDºÅ
    824                                  AF_DISCV_ROUTE,               // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    825                                  AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
   \   000036                ; Setup parameters for call to function AF_DataRequest
   \   000036   75..1E       MOV       ?V0,#0x1e
   \   000039   78..         MOV       R0,#?V0
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003E   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000041   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000044   78..         MOV       R0,#?V0
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   7403         MOV       A,#0x3
   \   00004B   12....       LCALL     ?XSTACK_DISP100_8
   \   00004E   88..         MOV       ?V0,R0
   \   000050   89..         MOV       ?V1,R1
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   75..03       MOV       ?V0,#0x3
   \   00005A   75..00       MOV       ?V1,#0x0
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000067   7920         MOV       R1,#0x20
   \   000069   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   00006B   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00006D   7A..         MOV       R2,#SampleApp_Single_DstAddr & 0xff
   \   00006F   7B..         MOV       R3,#(SampleApp_Single_DstAddr >> 8) & 0xff
   \   000071   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   \   000077   E9           MOV       A,R1
   \   000078   6007         JZ        ??SampleApp_SendBeepMessage_0
    826              {
    827              }
    828              else
    829              {
    830                  HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \   00007A                ; Setup parameters for call to function HalLedSet
   \   00007A   7A01         MOV       R2,#0x1
   \   00007C   7901         MOV       R1,#0x1
   \   00007E   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    831                  // Error occurred in request to send.
    832              }
    833              //#else
    834          
    835              //#endif
    836          }
   \                     ??SampleApp_SendBeepMessage_0:
   \   000081   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000003   7409         MOV       A,#0x9
   \   000005   22           RET
    837          
    838          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    839          void SampleApp_SendAddrMessage(uint8 dev[], int dev_num)
   \                     SampleApp_SendAddrMessage:
    840          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    841              //#if defined(ZDO_COORDINATOR)
    842          
    843              // µ÷ÓÃAF_DataRequest½«Êý¾ÝÎÞÏß¹ã²¥³öÈ¥
    844              if( AF_DataRequest( &SampleApp_Periodic_DstAddr,   //·¢ËÍÄ¿µÄµØÖ·£«¶ËµãµØÖ·ºÍ´«ËÍÄ£Ê½
    845                                  &SampleApp_epDesc,            //Ô´(´ð¸´»òÈ·ÈÏ)ÖÕ¶ËµÄÃèÊö£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©Ô´EP
    846                                  SAMPLEAPP_PERIODIC_CLUSTERID, //±»ProfileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    847                                  (dev_num+1)*2,                // ·¢ËÍÊý¾Ý³¤¶È
    848                                  dev,                          // ·¢ËÍÊý¾Ý»º³åÇø
    849                                  &SampleApp_TransID,           // ÈÎÎñIDºÅ
    850                                  AF_DISCV_ROUTE,               // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    851                                  AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV       ?V0,#0x1e
   \   000008   78..         MOV       R0,#?V0
   \   00000A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV       R0,#?V0
   \   000015   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000018   8A..         MOV       ?V0,R2
   \   00001A   8B..         MOV       ?V1,R3
   \   00001C   78..         MOV       R0,#?V0
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   EC           MOV       A,R4
   \   000022   2401         ADD       A,#0x1
   \   000024   F5..         MOV       ?V0,A
   \   000026   E4           CLR       A
   \   000027   3D           ADDC      A,R5
   \   000028   F5..         MOV       ?V1,A
   \   00002A   E5..         MOV       A,?V0
   \   00002C   25E0         ADD       A,0xE0 /* A   */
   \   00002E   F5..         MOV       ?V0,A
   \   000030   E5..         MOV       A,?V1
   \   000032   33           RLC       A
   \   000033   F5..         MOV       ?V1,A
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   75..01       MOV       ?V0,#0x1
   \   00003D   75..00       MOV       ?V1,#0x0
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000045   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004B   E9           MOV       A,R1
   \   00004C   6007         JZ        ??SampleApp_SendAddrMessage_0
    852              {
    853              }
    854              else
    855              {
    856                  HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \   00004E                ; Setup parameters for call to function HalLedSet
   \   00004E   7A01         MOV       R2,#0x1
   \   000050   7901         MOV       R1,#0x1
   \   000052   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    857                  // Error occurred in request to send.
    858              }
    859              //#else
    860          
    861              //#endif
    862          }
   \                     ??SampleApp_SendAddrMessage_0:
   \   000055                REQUIRE ?Subroutine3
   \   000055                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   7920         MOV       R1,#0x20
   \   000002   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000004   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000006   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000008   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00000A                REQUIRE ??Subroutine35_0
   \   00000A                ; // Fall through to label ??Subroutine35_0
    863          
    864          
    865          
    866          /*********************************************************************
    867          * @fn      SampleApp_SendPeriodicMessage
    868          *
    869          * @brief   Send the periodic message.
    870          *
    871          * @param   none
    872          *
    873          * @return  none
    874          */
    875          //·ÖÎö·¢ËÍÖÜÆÚÐÅÏ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    876          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    877          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    878              //#if defined(ZDO_COORDINATOR)
    879          
    880              byte SendData[3]="D1";
   \   00000A   90....       MOV       DPTR,#`?<Constant "D1">`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7403         MOV       A,#0x3
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    881          #if defined(ZDO_COORDINATOR)
    882              uint8 i = 0;
    883              freq_count++;
   \   000016   90....       MOV       DPTR,#freq_count
   \   000019   12....       LCALL     ?Subroutine12 & 0xFFFF
    884              if(freq_count == 2)
   \                     ??CrossCallReturnLabel_12:
   \   00001C   90....       MOV       DPTR,#freq_count
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6402         XRL       A,#0x2
   \   000022   7002         JNZ       ??SampleApp_SendPeriodicMessage_0
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   000026   703E         JNZ       ??SampleApp_SendPeriodicMessage_1
    885              {
    886                  for(i = 1; i <= device_num; i++)
   \   000028   7E01         MOV       R6,#0x1
   \   00002A   8029         SJMP      ??SampleApp_SendPeriodicMessage_2
    887                  {
    888                      if(online[i] == 0)
   \                     ??SampleApp_SendPeriodicMessage_3:
   \   00002C   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00002F   701C         JNZ       ??SampleApp_SendPeriodicMessage_4
    889                      {
    890                          HalLcdWriteStringValue("dev lost:", i, 10, 3);
   \   000031                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000031   8E..         MOV       ?V0,R6
   \   000033   E4           CLR       A
   \   000034   F5..         MOV       ?V1,A
   \   000036   F5..         MOV       ?V2,A
   \   000038   F5..         MOV       ?V3,A
   \   00003A   78..         MOV       R0,#?V0
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00003F   7C03         MOV       R4,#0x3
   \   000041   790A         MOV       R1,#0xa
   \   000043   7A..         MOV       R2,#`?<Constant "dev lost:">` & 0xff
   \   000045   7B..         MOV       R3,#(`?<Constant "dev lost:">` >> 8) & 0xff
   \   000047   12....       LCALL     ??Subroutine33_0 & 0xFFFF
    891                      }
   \                     ??CrossCallReturnLabel_62:
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
    892                      online[i] = 0;
   \                     ??SampleApp_SendPeriodicMessage_4:
   \   00004D   EE           MOV       A,R6
   \   00004E   F8           MOV       R0,A
   \   00004F   12....       LCALL     ?Subroutine26 & 0xFFFF
    893                  }
   \                     ??CrossCallReturnLabel_34:
   \   000052   E4           CLR       A
   \   000053   F0           MOVX      @DPTR,A
   \   000054   0E           INC       R6
   \                     ??SampleApp_SendPeriodicMessage_2:
   \   000055   90....       MOV       DPTR,#device_num
   \   000058   EE           MOV       A,R6
   \   000059   F8           MOV       R0,A
   \   00005A   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00005D   50CD         JNC       ??SampleApp_SendPeriodicMessage_3
    894          
    895                  freq_count  = 0;
   \   00005F   90....       MOV       DPTR,#freq_count
   \   000062   E4           CLR       A
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   F0           MOVX      @DPTR,A
    896              }
    897          #endif
    898          
    899              // µ÷ÓÃAF_DataRequest½«Êý¾ÝÎÞÏß¹ã²¥³öÈ¥
    900              if( AF_DataRequest( &SampleApp_Periodic_DstAddr,//·¢ËÍÄ¿µÄµØÖ·£«¶ËµãµØÖ·ºÍ´«ËÍÄ£Ê½
    901                                  &SampleApp_epDesc,//Ô´(´ð¸´»òÈ·ÈÏ)ÖÕ¶ËµÄÃèÊö£¨±ÈÈç²Ù×÷ÏµÍ³ÖÐÈÎÎñIDµÈ£©Ô´EP
    902                                  SAMPLEAPP_PERIODIC_CLUSTERID, //±»ProfileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    903                                  3,       // ·¢ËÍÊý¾Ý³¤¶È
    904                                  SendData,// ·¢ËÍÊý¾Ý»º³åÇø
    905                                  &SampleApp_TransID,     // ÈÎÎñIDºÅ
    906                                  AF_DISCV_ROUTE,      // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    907                                  AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )  //´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   000066                ; Setup parameters for call to function AF_DataRequest
   \   000066   75..1E       MOV       ?V0,#0x1e
   \   000069   78..         MOV       R0,#?V0
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006E   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000071   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000074   78..         MOV       R0,#?V0
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000079   7403         MOV       A,#0x3
   \   00007B   12....       LCALL     ?XSTACK_DISP100_8
   \   00007E   88..         MOV       ?V0,R0
   \   000080   89..         MOV       ?V1,R1
   \   000082   78..         MOV       R0,#?V0
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000087   75..03       MOV       ?V0,#0x3
   \   00008A   75..00       MOV       ?V1,#0x0
   \   00008D   78..         MOV       R0,#?V0
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000092   75..01       MOV       ?V0,#0x1
   \   000095   78..         MOV       R0,#?V0
   \   000097   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009A   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV       A,R1
   \   0000A1   6007         JZ        ??SampleApp_SendPeriodicMessage_5
    908              {
    909              }
    910              else
    911              {
    912                  HalLedSet(HAL_LED_1, HAL_LED_MODE_ON);
   \   0000A3                ; Setup parameters for call to function HalLedSet
   \   0000A3   7A01         MOV       R2,#0x1
   \   0000A5   7901         MOV       R1,#0x1
   \   0000A7   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    913                  // Error occurred in request to send.
    914              }
    915              //#else
    916          
    917              //#endif
    918          }
   \                     ??SampleApp_SendPeriodicMessage_5:
   \   0000AA   02....       LJMP      ?Subroutine1 & 0xFFFF
    919          
    920          /*********************************************************************
    921          * @fn      SampleApp_SendFlashMessage
    922          *
    923          * @brief   Send the flash message to group 1.
    924          *
    925          * @param   flashTime - in milliseconds
    926          *
    927          * @return  none
    928          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    929          void SampleApp_SendFlashMessage( uint16 flashTime,uint16 data)  //´ËÊµÑéÃ»ÓÐÓÃµ½£¬ºóÃæÔÙ·ÖÎö
   \                     SampleApp_SendFlashMessage:
    930          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    931              uint8 buffer[4];
    932              buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV       DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   90....       MOV       DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX      A,@DPTR
   \   000019   04           INC       A
   \   00001A   F0           MOVX      @DPTR,A
    933              buffer[1] = data;
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   EC           MOV       A,R4
   \   000021   F0           MOVX      @DPTR,A
    934              buffer[2] = data;
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   EC           MOV       A,R4
   \   000028   F0           MOVX      @DPTR,A
    935              buffer[3] = data;
   \   000029   7403         MOV       A,#0x3
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   EC           MOV       A,R4
   \   00002F   F0           MOVX      @DPTR,A
    936          
    937              if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    938                                   SAMPLEAPP_FLASH_CLUSTERID,
    939                                   4,
    940                                   buffer,
    941                                   &SampleApp_TransID,
    942                                   AF_DISCV_ROUTE,
    943                                   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000030                ; Setup parameters for call to function AF_DataRequest
   \   000030   75..1E       MOV       ?V0,#0x1e
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000038   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   00003B   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   7403         MOV       A,#0x3
   \   000045   12....       LCALL     ?XSTACK_DISP100_8
   \   000048   88..         MOV       ?V0,R0
   \   00004A   89..         MOV       ?V1,R1
   \   00004C   78..         MOV       R0,#?V0
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   75..04       MOV       ?V0,#0x4
   \   000054   75..00       MOV       ?V1,#0x0
   \   000057   78..         MOV       R0,#?V0
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005C   75..02       MOV       ?V0,#0x2
   \   00005F   78..         MOV       R0,#?V0
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   7920         MOV       R1,#0x20
   \   000066   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000068   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00006A   7A..         MOV       R2,#SampleApp_Flash_DstAddr & 0xff
   \   00006C   7B..         MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   00006E   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
    944              {
    945              }
    946              else
    947              {
    948                  // Error occurred in request to send.
    949              }
    950          }
   \   000074   7404         MOV       A,#0x4
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
   \   000079   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment INTVEC, offset 0x5b, root
   \                     `??T3_ISR::??INTVEC 91`:
   \   00005B   02....       LJMP       (T3_ISR)

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 LED"
   \            35333020
   \            4C454400

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for main_flag>`:
   \   000000   0100         DW 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??InitT1::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitT1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??InitT3::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitT3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??beep0::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    beep0

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??beep1::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    beep1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??beep2::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    beep2

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??call_dev_change::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    call_dev_change

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??mode_change::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    mode_change

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_MessageMSGCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SApp_ProcessMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendBeepMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendBeepMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendAddrMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendAddrMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendPeriodicMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendFlashMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "sel_dev:">`:
   \   000000   73656C5F     DB "sel_dev:"
   \            6465763A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "model:">`:
   \   000000   6D6F6465     DB "model:"
   \            6C3A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "rssi:">`:
   \   000000   72737369     DB "rssi:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "src addr:">`:
   \   000000   73726320     DB "src addr:"
   \            61646472
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "total device:">`:
   \   000000   746F7461     DB "total device:"
   \            6C206465
   \            76696365
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "dev_NO.">`:
   \   000000   6465765F     DB "dev_NO."
   \            4E4F2E00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "beep info:">`:
   \   000000   62656570     DB "beep info:"
   \            20696E66
   \            6F3A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DevAnnce:">`:
   \   000000   44657641     DB "DevAnnce:"
   \            6E6E6365
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "l_addr:">`:
   \   000000   6C5F6164     DB "l_addr:"
   \            64723A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BP">`:
   \   000000   425000       DB "BP"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "D1">`:
   \   000000   443100       DB "D1"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "dev lost:">`:
   \   000000   64657620     DB "dev lost:"
   \            6C6F7374
   \            3A00    
    951          
    952          /*********************************************************************
    953          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     11   InitT1
      0     11   InitT3
      0     42   SApp_ProcessMsgCBs
        0     30   -> HalLcdWriteStringValue
        0     26   -> SampleApp_SendAddrMessage
        0     29   -> osal_memcpy
        0     26   -> osal_memset
      0     21   SampleApp_HandleKeys
        0      9   -> call_dev_change
        0      9   -> mode_change
      0     14   SampleApp_Init
        0     11   -> HalLcdWriteString
        0     11   -> InitT1
        0     11   -> InitT3
        0     11   -> RegisterForKeys
        0     11   -> ZDO_RegisterForZDOMsg
        0     11   -> afRegister
        0     11   -> aps_AddGroup
        0     14   -> osal_memcpy
      0     35   SampleApp_MessageMSGCB
        0     23   -> HalLcdWriteStringValue
        0     19   -> HalLedSet
        0     19   -> NLME_GetShortAddr
        0     19   -> abs
        0     19   -> beep0
        0     19   -> beep1
        0     22   -> osal_memcpy
        0     19   -> osal_memset
      0     12   SampleApp_ProcessEvent
        0     12   -> SApp_ProcessMsgCBs
        0     12   -> SampleApp_HandleKeys
        0     12   -> SampleApp_MessageMSGCB
        0     12   -> SampleApp_SendPeriodicMessage
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> osal_rand
        0     12   -> osal_start_timerEx
      0     45   SampleApp_SendAddrMessage
        0     19   -> AF_DataRequest
        0     10   -> HalLedSet
      1     36   SampleApp_SendBeepMessage
        0     24   -> AF_DataRequest
        0     19   -> HalLcdWriteStringValue
        0     15   -> HalLedSet
      1     23   SampleApp_SendFlashMessage
        0     23   -> AF_DataRequest
      0     36   SampleApp_SendPeriodicMessage
        0     24   -> AF_DataRequest
        0     19   -> HalLcdWriteStringValue
        0     15   -> HalLedSet
      0     14   T3_ISR
        0     14   -> beep0
        0     14   -> beep1
      0     19   beep0
      0     19   beep1
      0      0   beep2
      2     25   call_dev_change
        0     16   -> HalLcdWriteStringValue
      0     25   mode_change
        0     16   -> HalLcdWriteStringValue
        0     12   -> SampleApp_SendBeepMessage


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ?<Constant "BP">
       3  ?<Constant "D1">
      10  ?<Constant "DevAnnce:">
       8  ?<Constant "Group 1">
      10  ?<Constant "SampleApp">
      11  ?<Constant "beep info:">
      10  ?<Constant "dev lost:">
       8  ?<Constant "dev_NO.">
       8  ?<Constant "l_addr:">
       7  ?<Constant "model:">
       6  ?<Constant "rssi:">
       9  ?<Constant "sel_dev:">
      10  ?<Constant "src addr:">
      14  ?<Constant "total device:">
      12  ?<Initializer for AppTitle>
       2  ?<Initializer for main_flag>
       6  ??Subroutine28_0
       3  ??Subroutine29_0
       5  ??Subroutine30_0
      13  ??Subroutine31_0
      11  ??Subroutine32_0
       6  ??Subroutine33_0
      10  ??Subroutine34_0
       6  ??Subroutine35_0
       6  ?Subroutine0
       2  ?Subroutine1
       3  ?Subroutine10
      11  ?Subroutine11
       5  ?Subroutine12
      10  ?Subroutine13
       6  ?Subroutine14
       8  ?Subroutine15
       6  ?Subroutine16
       5  ?Subroutine17
      11  ?Subroutine18
      10  ?Subroutine19
       8  ?Subroutine2
      15  ?Subroutine20
      10  ?Subroutine21
      11  ?Subroutine22
       8  ?Subroutine23
       9  ?Subroutine24
       2  ?Subroutine25
      11  ?Subroutine26
      13  ?Subroutine27
       5  ?Subroutine3
       6  ?Subroutine4
      13  ?Subroutine5
       3  ?Subroutine6
      10  ?Subroutine7
       6  ?Subroutine8
      15  ?Subroutine9
      12  AppTitle
       1  CLKCONCMD
       1  CLKCONSTA
      65  InitT1
       6  InitT1::?relay
      19  InitT3
       6  InitT3::?relay
       1  P0DIR
       1  P0SEL
       1  P2DIR
       1  P2SEL
       1  PERCFG
     321  SApp_ProcessMsgCBs
       6  SApp_ProcessMsgCBs::?relay
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
       6  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
      27  SampleApp_HandleKeys
       6  SampleApp_HandleKeys::?relay
     199  SampleApp_Init
       6  SampleApp_Init::?relay
     602  SampleApp_MessageMSGCB
       6  SampleApp_MessageMSGCB::?relay
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
     178  SampleApp_ProcessEvent
       6  SampleApp_ProcessEvent::?relay
      85  SampleApp_SendAddrMessage
       6  SampleApp_SendAddrMessage::?relay
     132  SampleApp_SendBeepMessage
       6  SampleApp_SendBeepMessage::?relay
     124  SampleApp_SendFlashMessage
       6  SampleApp_SendFlashMessage::?relay
     173  SampleApp_SendPeriodicMessage
       6  SampleApp_SendPeriodicMessage::?relay
      12  SampleApp_SimpleDesc
      12  SampleApp_Single_DstAddr
       1  SampleApp_TaskID
       1  SampleApp_TransID
       6  SampleApp_epDesc
       1  T1CC0H
       1  T1CC0L
       1  T1CTL
       1  T3CTL
     130  T3_ISR
       3  T3_ISR::??INTVEC 91
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON
       9  beep0
       6  beep0::?relay
       3  beep1
       6  beep1::?relay
       5  beep2
       6  beep2::?relay
       2  beep_flag
     177  call_dev_change
       6  call_dev_change::?relay
       2  count
      64  device
       2  device_num
       2  distance_flag
       2  dst_dev
       2  freq_count
     128  long_addr
       2  main_flag
     117  mode_change
       6  mode_change::?relay
      32  online
       2  period_count
       2  sel_dev
       2  time_flag

 
 2 511 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     3 bytes in segment INTVEC
   143 bytes in segment NEAR_CODE
    14 bytes in segment SFR_AN
    14 bytes in segment XDATA_I
    14 bytes in segment XDATA_ID
   135 bytes in segment XDATA_ROM_C
   307 bytes in segment XDATA_Z
 
   253 bytes of CODE     memory (+  3 bytes shared)
   135 bytes of CONST    memory
     0 bytes of DATA     memory (+ 14 bytes shared)
 2 511 bytes of HUGECODE memory
   321 bytes of XDATA    memory

Errors: none
Warnings: none
