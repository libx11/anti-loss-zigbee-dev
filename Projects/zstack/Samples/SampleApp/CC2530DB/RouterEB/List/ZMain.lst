###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               31/May/2018  15:16:39
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\anti-lost-dev-code\Projects\zstack\ZMain\TI2530DB\ZMain.c
#    Command line       =  
#        -f C:\Users\libx\AppData\Local\Temp\EW8758.tmp
#        (E:\anti-lost-dev-code\Projects\zstack\ZMain\TI2530DB\ZMain.c -D
#        ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List
#        -lA
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List
#        --diag_suppress Pe001,Pa010 -o
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\ZMain.lst
#    Object file        =  
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj\ZMain.r51
#
###############################################################################

E:\anti-lost-dev-code\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2010-09-17 16:25:30 -0700 (Fri, 17 Sep 2010) $
      4            Revision:       $Revision: 23835 $ V1.0 ALD Andy
      5          
      6            Description:    Startup and shutdown code for ZStack
      7            Notes:          This version targets the Chipcon CC2530
      8          
      9          
     10            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at https://aldsz.taobao.com
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #ifndef NONWK
     46          #include "AF.h"
     47          #endif
     48          #include "hal_adc.h"

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     49          #include "hal_flash.h"
     50          #include "hal_lcd.h"
     51          #include "hal_led.h"
     52          #include "hal_drivers.h"
     53          #include "OnBoard.h"
     54          #include "OSAL.h"
     55          #include "OSAL_Nv.h"
     56          #include "ZComDef.h"
     57          #include "ZMAC.h" 
     58          
     59          /*********************************************************************
     60           * LOCAL FUNCTIONS
     61           */
     62          
     63          static void zmain_ext_addr( void );
     64          #if defined ZCL_KEY_ESTABLISH
     65          static void zmain_cert_init( void );
     66          #endif
     67          static void zmain_dev_info( void );
     68          static void zmain_vdd_check( void );
     69          
     70          #ifdef LCD_SUPPORTED
     71          static void zmain_lcd_init( void );
     72          #endif
     73          
     74          extern uint8 AppTitle[]; //Ó¦ÓÃ³ÌÐòÃû³Æ
     75          
     76          /*********************************************************************
     77           * @fn      main
     78           * @brief   First function called after startup.
     79           * @return  don't care
     80           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     81          int main( void )
   \                     main:
     82          {
   \   000000                ; Auto size: 0
     83            // Turn off interrupts
     84            osal_int_disable( INTS_ALL );
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV       R1,#-0x1
   \   000002   12....       LCALL     `??osal_int_disable::?relay`; Banked call to: osal_int_disable
     85          
     86            // Initialization for board related stuff such as LEDs
     87            HAL_BOARD_INIT();
   \   000005   53BEFB       ANL       0xbe,#0xfb
   \                     ??main_0:
   \   000008   E59D         MOV       A,0x9d
   \   00000A   A2E6         MOV       C,0xE0 /* A   */.6
   \   00000C   50FA         JNC       ??main_0
   \   00000E   00           NOP
   \   00000F   78F8         MOV       R0,#-0x8
   \   000011   7901         MOV       R1,#0x1
   \                     ??main_1:
   \   000013   00           NOP
   \   000014   E8           MOV       A,R0
   \   000015   24FF         ADD       A,#-0x1
   \   000017   18           DEC       R0
   \   000018   E9           MOV       A,R1
   \   000019   34FF         ADDC      A,#-0x1
   \   00001B   F9           MOV       R1,A
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   70F3         JNZ       ??main_1
   \   000020   75C600       MOV       0xc6,#0x0
   \                     ??main_2:
   \   000023   E59E         MOV       A,0x9e
   \   000025   70FC         JNZ       ??main_2
   \   000027   43BE04       ORL       0xbe,#0x4
   \   00002A   906270       MOV       DPTR,#0x6270
   \   00002D   7408         MOV       A,#0x8
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   C290         CLR       0x90.0
   \   000032   43FE01       ORL       0xfe,#0x1
   \   000035   C291         CLR       0x90.1
   \   000037   43FE02       ORL       0xfe,#0x2
   \   00003A   C294         CLR       0x90.4
   \   00003C   43FE10       ORL       0xfe,#0x10
   \   00003F   438F01       ORL       0x8f,#0x1
     88          
     89            // Make sure supply voltage is high enough to run
     90            zmain_vdd_check();
   \   000042   7E10         MOV       R6,#0x10
   \                     ??main_3:
   \   000044                ; Setup parameters for call to function HalAdcCheckVdd
   \   000044   794A         MOV       R1,#0x4a
   \   000046   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000049   E9           MOV       A,R1
   \   00004A   60F8         JZ        ??main_3
   \   00004C   1E           DEC       R6
   \   00004D   EE           MOV       A,R6
   \   00004E   70F4         JNZ       ??main_3
     91          
     92            // Initialize board I/O
     93            InitBoard( OB_COLD );
   \   000050                ; Setup parameters for call to function InitBoard
   \   000050   7900         MOV       R1,#0x0
   \   000052   12....       LCALL     `??InitBoard::?relay`; Banked call to: InitBoard
     94          
     95            // Initialze HAL drivers
     96            HalDriverInit();
   \   000055                ; Setup parameters for call to function HalDriverInit
   \   000055   12....       LCALL     `??HalDriverInit::?relay`; Banked call to: HalDriverInit
     97          
     98            // Initialize NV System
     99            osal_nv_init( NULL );
   \   000058                ; Setup parameters for call to function osal_nv_init
   \   000058   7A00         MOV       R2,#0x0
   \   00005A   7B00         MOV       R3,#0x0
   \   00005C   12....       LCALL     `??osal_nv_init::?relay`; Banked call to: osal_nv_init
    100          
    101            // Initialize the MAC
    102            ZMacInit();
   \   00005F                ; Setup parameters for call to function ZMacInit
   \   00005F   12....       LCALL     `??ZMacInit::?relay`; Banked call to: ZMacInit
    103          
    104            // Determine the extended address
    105            zmain_ext_addr();
   \   000062                ; Setup parameters for call to function zmain_ext_addr
   \   000062   12....       LCALL     `??zmain_ext_addr::?relay`; Banked call to: zmain_ext_addr
    106          
    107          #if defined ZCL_KEY_ESTABLISH
    108            // Initialize the Certicom certificate information.
    109            zmain_cert_init();
    110          #endif
    111          
    112            // Initialize basic NV items
    113            zgInit();
   \   000065                ; Setup parameters for call to function zgInit
   \   000065   12....       LCALL     `??zgInit::?relay`; Banked call to: zgInit
    114          
    115          #ifndef NONWK
    116            // Since the AF isn't a task, call it's initialization routine
    117            afInit();
    118          #endif
    119          
    120            // Initialize the operating system
    121            osal_init_system();
   \   000068                ; Setup parameters for call to function osal_init_system
   \   000068   12....       LCALL     `??osal_init_system::?relay`; Banked call to: osal_init_system
    122          
    123            // Allow interrupts
    124            osal_int_enable( INTS_ALL );
   \   00006B                ; Setup parameters for call to function osal_int_enable
   \   00006B   79FF         MOV       R1,#-0x1
   \   00006D   12....       LCALL     `??osal_int_enable::?relay`; Banked call to: osal_int_enable
    125          
    126            // Final board initialization
    127            InitBoard( OB_READY );
   \   000070                ; Setup parameters for call to function InitBoard
   \   000070   7902         MOV       R1,#0x2
   \   000072   12....       LCALL     `??InitBoard::?relay`; Banked call to: InitBoard
    128          
    129            // Display information about this device
    130            zmain_dev_info();
   \   000075                ; Setup parameters for call to function zmain_dev_info
   \   000075   12....       LCALL     `??zmain_dev_info::?relay`; Banked call to: zmain_dev_info
    131          
    132            /* Display the device info on the LCD */
    133          #ifdef LCD_SUPPORTED
    134            zmain_lcd_init();
   \   000078                ; Setup parameters for call to function HalLcdWriteString
   \   000078   7900         MOV       R1,#0x0
   \   00007A   7A..         MOV       R2,#`?<Constant "TexasInstruments">` & 0xff
   \   00007C   7B..         MOV       R3,#(`?<Constant "TexasInstruments">` >> 8) & 0xff
   \   00007E   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    135          #endif
    136          
    137          #ifdef WDT_IN_PM1
    138            /* If WDT is used, this is a good place to enable it. */
    139            WatchDogEnable( WDTIMX );
    140          #endif
    141          
    142            osal_start_system(); // No Return from here
   \   000081                ; Setup parameters for call to function osal_start_system
   \   000081   12....       LCALL     `??osal_start_system::?relay`; Banked call to: osal_start_system
    143          
    144            return 0;  // Shouldn't get here.
   \   000084   7A00         MOV       R2,#0x0
   \   000086   7B00         MOV       R3,#0x0
   \   000088   02....       LJMP      ?BRET
   \   00008B                REQUIRE SLEEPCMD
   \   00008B                REQUIRE SLEEPSTA
   \   00008B                REQUIRE CLKCONCMD
   \   00008B                REQUIRE CLKCONSTA
   \   00008B                REQUIRE _A_P1
   \   00008B                REQUIRE P1DIR
   \   00008B                REQUIRE P0INP
    145          } // main()
    146          
    147          /*********************************************************************
    148           * @fn      zmain_vdd_check
    149           * @brief   Check if the Vdd is OK to run the processor.
    150           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    151           *********************************************************************/
    152          static void zmain_vdd_check( void )
    153          {
    154            uint8 cnt = 16;
    155            
    156            do {
    157              while (!HalAdcCheckVdd(VDD_MIN_RUN));
    158            } while (--cnt);
    159          }
    160          
    161          /**************************************************************************************************
    162           * @fn          zmain_ext_addr
    163           *
    164           * @brief       Execute a prioritized search for a valid extended address and write the results
    165           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    166           *
    167           * input parameters
    168           *
    169           * None.
    170           *
    171           * output parameters
    172           *
    173           * None.
    174           *
    175           * @return      None.
    176           **************************************************************************************************
    177           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    178          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    179          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    180            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7408         MOV       A,#0x8
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    181            uint8 writeNV = TRUE;
    182          
    183            // First check whether a non-erased extended address exists in the OSAL NV.
    184            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    185                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    186                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   000016                ; Setup parameters for call to function osal_nv_item_init
   \   000016   F5..         MOV       ?V0,A
   \   000018   F5..         MOV       ?V1,A
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   7C08         MOV       R4,#0x8
   \   000021   7D00         MOV       R5,#0x0
   \   000023   7A01         MOV       R2,#0x1
   \   000025   7B00         MOV       R3,#0x0
   \   000027   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002A   7402         MOV       A,#0x2
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002F   E9           MOV       A,R1
   \   000030   7051         JNZ       ??zmain_ext_addr_0
   \   000032                ; Setup parameters for call to function osal_nv_read
   \   000032   75....       MOV       ?V0,#aExtendedAddress & 0xff
   \   000035   75....       MOV       ?V1,#(aExtendedAddress >> 8) & 0xff
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   75..08       MOV       ?V0,#0x8
   \   000040   75..00       MOV       ?V1,#0x0
   \   000043   78..         MOV       R0,#?V0
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000048   7C00         MOV       R4,#0x0
   \   00004A   7D00         MOV       R5,#0x0
   \   00004C   7A01         MOV       R2,#0x1
   \   00004E   7B00         MOV       R3,#0x0
   \   000050   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000053   7404         MOV       A,#0x4
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
   \   000058   E9           MOV       A,R1
   \   000059   7028         JNZ       ??zmain_ext_addr_0
   \   00005B                ; Setup parameters for call to function osal_memcmp
   \   00005B   A8..         MOV       R0,?XSP + 0
   \   00005D   A9..         MOV       R1,?XSP + 1
   \   00005F   88..         MOV       ?V0,R0
   \   000061   89..         MOV       ?V1,R1
   \   000063   75..00       MOV       ?V2,#0x0
   \   000066   78..         MOV       R0,#?V0
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006B   7C08         MOV       R4,#0x8
   \   00006D   7D00         MOV       R5,#0x0
   \   00006F   79..         MOV       R1,#aExtendedAddress & 0xff
   \   000071   7A..         MOV       R2,#(aExtendedAddress >> 8) & 0xff
   \   000073   7B00         MOV       R3,#0x0
   \   000075   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000078   7403         MOV       A,#0x3
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007D   E9           MOV       A,R1
   \   00007E   7003         JNZ       $+5
   \   000080   02....       LJMP      ??zmain_ext_addr_1 & 0xFFFF
    187            {
    188              // Attempt to read the extended address from the location on the lock bits page
    189              // where the programming tools know to reserve it.
    190              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   000083                ; Setup parameters for call to function HalFlashRead
   \   000083   75..08       MOV       ?V0,#0x8
   \   000086   75..00       MOV       ?V1,#0x0
   \   000089   78..         MOV       R0,#?V0
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   7C..         MOV       R4,#aExtendedAddress & 0xff
   \   000090   7D..         MOV       R5,#(aExtendedAddress >> 8) & 0xff
   \   000092   7AE8         MOV       R2,#-0x18
   \   000094   7B07         MOV       R3,#0x7
   \   000096   797F         MOV       R1,#0x7f
   \   000098   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00009B   7402         MOV       A,#0x2
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
    191          
    192              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000A0                ; Setup parameters for call to function osal_memcmp
   \   0000A0   A8..         MOV       R0,?XSP + 0
   \   0000A2   A9..         MOV       R1,?XSP + 1
   \   0000A4   88..         MOV       ?V0,R0
   \   0000A6   89..         MOV       ?V1,R1
   \   0000A8   75..00       MOV       ?V2,#0x0
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B0   7C08         MOV       R4,#0x8
   \   0000B2   7D00         MOV       R5,#0x0
   \   0000B4   79..         MOV       R1,#aExtendedAddress & 0xff
   \   0000B6   7A..         MOV       R2,#(aExtendedAddress >> 8) & 0xff
   \   0000B8   7B00         MOV       R3,#0x0
   \   0000BA   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000BD   7403         MOV       A,#0x3
   \   0000BF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C2   E9           MOV       A,R1
   \   0000C3   6035         JZ        ??zmain_ext_addr_2
    193              {
    194                // Attempt to read the extended address from the designated location in the Info Page.
    195                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000C5                ; Setup parameters for call to function osal_memcmp
   \   0000C5   78..         MOV       R0,#?V0
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CA   7C08         MOV       R4,#0x8
   \   0000CC   7D00         MOV       R5,#0x0
   \   0000CE   790C         MOV       R1,#0xc
   \   0000D0   7A78         MOV       R2,#0x78
   \   0000D2   7B00         MOV       R3,#0x0
   \   0000D4   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000D7   7403         MOV       A,#0x3
   \   0000D9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DC   E9           MOV       A,R1
   \   0000DD   7054         JNZ       ??zmain_ext_addr_3
    196                {
    197                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000DF                ; Setup parameters for call to function osal_memcpy
   \   0000DF   75..0C       MOV       ?V0,#0xc
   \   0000E2   75..78       MOV       ?V1,#0x78
   \   0000E5   78..         MOV       R0,#?V0
   \   0000E7   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000EA   7C08         MOV       R4,#0x8
   \   0000EC   7D00         MOV       R5,#0x0
   \   0000EE   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   0000F0   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   0000F2   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000F5   7403         MOV       A,#0x3
   \   0000F7   12....       LCALL     ?DEALLOC_XSTACK8
    198                }
    199                else  // No valid extended address was found.
    200                {
    201                  uint8 idx;
    202                  
    203          #if !defined ( NV_RESTORE )
    204                  writeNV = FALSE;  // Make this a temporary IEEE address
    205          #endif
    206          
    207                  /* Attempt to create a sufficiently random extended address for expediency.
    208                   * Note: this is only valid/legal in a test environment and
    209                   *       must never be used for a commercial product.
    210                   */
    211                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
    212                  {
    213                    uint16 randy = osal_rand();
    214                    aExtendedAddress[idx++] = LO_UINT16(randy);
    215                    aExtendedAddress[idx++] = HI_UINT16(randy);
    216                  }
    217                  // Next-to-MSB identifies ZigBee devicetype.
    218          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    219                  aExtendedAddress[idx++] = 0x10;
    220          #elif ZG_BUILD_RTRONLY_TYPE
    221                  aExtendedAddress[idx++] = 0x20;
    222          #else
    223                  aExtendedAddress[idx++] = 0x30;
    224          #endif
    225                  // MSB has historical signficance.
    226                  aExtendedAddress[idx] = 0xF8;
    227                }
    228              }
    229          
    230              if (writeNV)
    231              {
    232                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   0000FA                ; Setup parameters for call to function osal_nv_write
   \   0000FA   75....       MOV       ?V0,#aExtendedAddress & 0xff
   \   0000FD   75....       MOV       ?V1,#(aExtendedAddress >> 8) & 0xff
   \   000100   78..         MOV       R0,#?V0
   \   000102   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000105   75..08       MOV       ?V0,#0x8
   \   000108   75..00       MOV       ?V1,#0x0
   \   00010B   78..         MOV       R0,#?V0
   \   00010D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000110   7C00         MOV       R4,#0x0
   \   000112   7D00         MOV       R5,#0x0
   \   000114   7A01         MOV       R2,#0x1
   \   000116   7B00         MOV       R3,#0x0
   \   000118   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00011B   7404         MOV       A,#0x4
   \   00011D   12....       LCALL     ?DEALLOC_XSTACK8
    233              }
    234            }
    235          
    236            // Set the MAC PIB extended address according to results from above.
    237            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   000120                ; Setup parameters for call to function ZMacSetReq
   \   000120   7A..         MOV       R2,#aExtendedAddress & 0xff
   \   000122   7B..         MOV       R3,#(aExtendedAddress >> 8) & 0xff
   \   000124   79E2         MOV       R1,#-0x1e
   \   000126   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    238          }
   \   000129   7408         MOV       A,#0x8
   \   00012B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012E   7F03         MOV       R7,#0x3
   \   000130   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??zmain_ext_addr_3:
   \   000133   7E00         MOV       R6,#0x0
   \                     ??zmain_ext_addr_4:
   \   000135                ; Setup parameters for call to function osal_rand
   \   000135   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000138   8A..         MOV       ?V0,R2
   \   00013A   EE           MOV       A,R6
   \   00013B   FA           MOV       R2,A
   \   00013C   74..         MOV       A,#aExtendedAddress & 0xff
   \   00013E   2A           ADD       A,R2
   \   00013F   F582         MOV       DPL,A
   \   000141   E4           CLR       A
   \   000142   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   000144   F583         MOV       DPH,A
   \   000146   E5..         MOV       A,?V0
   \   000148   F0           MOVX      @DPTR,A
   \   000149   0E           INC       R6
   \   00014A   EE           MOV       A,R6
   \   00014B   F8           MOV       R0,A
   \   00014C   12....       LCALL     ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00014F   EB           MOV       A,R3
   \   000150   F0           MOVX      @DPTR,A
   \   000151   0E           INC       R6
   \   000152   EE           MOV       A,R6
   \   000153   C3           CLR       C
   \   000154   9406         SUBB      A,#0x6
   \   000156   40DD         JC        ??zmain_ext_addr_4
   \   000158   08           INC       R0
   \   000159   12....       LCALL     ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00015C   7420         MOV       A,#0x20
   \   00015E   F0           MOVX      @DPTR,A
   \   00015F   08           INC       R0
   \   000160   74..         MOV       A,#aExtendedAddress & 0xff
   \   000162   28           ADD       A,R0
   \   000163   F582         MOV       DPL,A
   \   000165   E4           CLR       A
   \   000166   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   000168   F583         MOV       DPH,A
   \   00016A   74F8         MOV       A,#-0x8
   \   00016C   F0           MOVX      @DPTR,A
   \   00016D   80B1         SJMP      ??zmain_ext_addr_1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   74..         MOV       A,#aExtendedAddress & 0xff
   \   000002   2E           ADD       A,R6
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#(aExtendedAddress >> 8) & 0xff
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET
    239          
    240          #if defined ZCL_KEY_ESTABLISH
    241          /**************************************************************************************************
    242           * @fn          zmain_cert_init
    243           *
    244           * @brief       Initialize the Certicom certificate information.
    245           *
    246           * input parameters
    247           *
    248           * None.
    249           *
    250           * output parameters
    251           *
    252           * None.
    253           *
    254           * @return      None.
    255           **************************************************************************************************
    256           */
    257          static void zmain_cert_init(void)
    258          {
    259            uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
    260            uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
    261              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    262              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    263              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    264              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    265              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    266              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    267            };
    268          
    269            (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
    270            (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
    271          
    272            // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
    273            // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
    274            if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL))    ||
    275                (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData))  ||
    276                (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
    277            {
    278              // Attempt to read the certificate data from its corresponding location on the lock bits page.
    279              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
    280                                                   ZCL_KE_CA_PUBLIC_KEY_LEN);
    281              // If the certificate data is not NULL, use it to update the corresponding NV items.
    282              if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
    283              {
    284                (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
    285                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
    286                                                     ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
    287                (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
    288                                    ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
    289                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
    290                                                  ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
    291                (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
    292              }
    293            }
    294          }
    295          #endif
    296          
    297          /**************************************************************************************************
    298           * @fn          zmain_dev_info
    299           *
    300           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    301           *
    302           * input parameters
    303           *
    304           * None.
    305           *
    306           * output parameters
    307           *
    308           * None.
    309           *
    310           * @return      None.
    311           **************************************************************************************************
    312           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    313          static void zmain_dev_info(void)
   \                     zmain_dev_info:
    314          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    315          #ifdef LCD_SUPPORTED
    316            uint8 i;
    317            uint8 *xad;
    318            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    319          
    320            // Display the extended address.
    321            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
   \   00000A   78..         MOV       R0,#(aExtendedAddress + 7) & 0xff
   \   00000C   79..         MOV       R1,#((aExtendedAddress + 7) >> 8) & 0xff
    322          
    323            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
   \   00000E   7A00         MOV       R2,#0x0
    324            {
    325              uint8 ch;
    326              ch = (*xad >> 4) & 0x0F;
   \                     ??zmain_dev_info_0:
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \   000014   E0           MOVX      A,@DPTR
   \   000015   C4           SWAP      A
   \   000016   540F         ANL       A,#0xf
   \   000018   FC           MOV       R4,A
    327              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   000019   8A..         MOV       ?V0,R2
   \   00001B   7401         MOV       A,#0x1
   \   00001D   2A           ADD       A,R2
   \   00001E   FA           MOV       R2,A
   \   00001F   EC           MOV       A,R4
   \   000020   C3           CLR       C
   \   000021   940A         SUBB      A,#0xa
   \   000023   5004         JNC       ??zmain_dev_info_1
   \   000025   7B30         MOV       R3,#0x30
   \   000027   8002         SJMP      ??zmain_dev_info_2
   \                     ??zmain_dev_info_1:
   \   000029   7B37         MOV       R3,#0x37
   \                     ??zmain_dev_info_2:
   \   00002B   EC           MOV       A,R4
   \   00002C   2B           ADD       A,R3
   \   00002D   C0E0         PUSH      A
   \   00002F   AC..         MOV       R4,?V0
   \   000031   85..82       MOV       DPL,?XSP + 0
   \   000034   85..83       MOV       DPH,?XSP + 1
   \   000037   E582         MOV       A,DPL
   \   000039   2C           ADD       A,R4
   \   00003A   F582         MOV       DPL,A
   \   00003C   E4           CLR       A
   \   00003D   3583         ADDC      A,DPH
   \   00003F   F583         MOV       DPH,A
   \   000041   D0E0         POP       A
   \   000043   F0           MOVX      @DPTR,A
    328              ch = *xad & 0x0F;
   \   000044   8882         MOV       DPL,R0
   \   000046   8983         MOV       DPH,R1
   \   000048   E0           MOVX      A,@DPTR
   \   000049   540F         ANL       A,#0xf
   \   00004B   FC           MOV       R4,A
    329              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   00004C   EA           MOV       A,R2
   \   00004D   FF           MOV       R7,A
   \   00004E   7401         MOV       A,#0x1
   \   000050   2A           ADD       A,R2
   \   000051   FA           MOV       R2,A
   \   000052   EC           MOV       A,R4
   \   000053   C3           CLR       C
   \   000054   940A         SUBB      A,#0xa
   \   000056   5004         JNC       ??zmain_dev_info_3
   \   000058   7B30         MOV       R3,#0x30
   \   00005A   8002         SJMP      ??zmain_dev_info_4
   \                     ??zmain_dev_info_3:
   \   00005C   7B37         MOV       R3,#0x37
   \                     ??zmain_dev_info_4:
   \   00005E   EC           MOV       A,R4
   \   00005F   2B           ADD       A,R3
   \   000060   C0E0         PUSH      A
   \   000062   85..82       MOV       DPL,?XSP + 0
   \   000065   85..83       MOV       DPH,?XSP + 1
   \   000068   E582         MOV       A,DPL
   \   00006A   2F           ADD       A,R7
   \   00006B   F582         MOV       DPL,A
   \   00006D   E4           CLR       A
   \   00006E   3583         ADDC      A,DPH
   \   000070   F583         MOV       DPH,A
   \   000072   D0E0         POP       A
   \   000074   F0           MOVX      @DPTR,A
    330            }
   \   000075   E8           MOV       A,R0
   \   000076   24FF         ADD       A,#-0x1
   \   000078   18           DEC       R0
   \   000079   E9           MOV       A,R1
   \   00007A   34FF         ADDC      A,#-0x1
   \   00007C   F9           MOV       R1,A
   \   00007D   EA           MOV       A,R2
   \   00007E   C3           CLR       C
   \   00007F   9410         SUBB      A,#0x10
   \   000081   408D         JC        ??zmain_dev_info_0
    331            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
   \   000083   7410         MOV       A,#0x10
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   E4           CLR       A
   \   000089   F0           MOVX      @DPTR,A
    332            
    333            //DrawRectFill(0 ,0 ,128,128,GREEN);//±³¾°É«
    334            DrawRectFill(3 ,20 ,122,106,WHITE); //ÏÔÊ¾´°¿Ú
   \   00008A                ; Setup parameters for call to function DrawRectFill
   \   00008A   75..FF       MOV       ?V2,#-0x1
   \   00008D   75..FF       MOV       ?V3,#-0x1
   \   000090   78..         MOV       R0,#?V2
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   75..6A       MOV       ?V2,#0x6a
   \   000098   75..00       MOV       ?V3,#0x0
   \   00009B   78..         MOV       R0,#?V2
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A0   75..7A       MOV       ?V2,#0x7a
   \   0000A3   78..         MOV       R0,#?V2
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   7C14         MOV       R4,#0x14
   \   0000AA   7D00         MOV       R5,#0x0
   \   0000AC   7A03         MOV       R2,#0x3
   \   0000AE   7B00         MOV       R3,#0x0
   \   0000B0   12....       LCALL     `??DrawRectFill::?relay`; Banked call to: DrawRectFill
   \   0000B3   7406         MOV       A,#0x6
   \   0000B5   12....       LCALL     ?DEALLOC_XSTACK8
    335             
    336            Color    = BLACK; //Ç°¾°É«
   \   0000B8   90....       MOV       DPTR,#Color
   \   0000BB   E4           CLR       A
   \   0000BC   F0           MOVX      @DPTR,A
   \   0000BD   A3           INC       DPTR
   \   0000BE   F0           MOVX      @DPTR,A
    337            Color_BK = GREEN; //±³¾°É«
   \   0000BF   90....       MOV       DPTR,#Color_BK
   \   0000C2   74E0         MOV       A,#-0x20
   \   0000C4   F0           MOVX      @DPTR,A
   \   0000C5   A3           INC       DPTR
   \   0000C6   7407         MOV       A,#0x7
   \   0000C8   F0           MOVX      @DPTR,A
    338            LCD_write_EN_string(64-7*osal_strlen((char *)AppTitle)/2,3,AppTitle); //ÏÔÊ¾±êÌâ
   \   0000C9                ; Setup parameters for call to function osal_strlen
   \   0000C9   7A..         MOV       R2,#AppTitle & 0xff
   \   0000CB   7B..         MOV       R3,#(AppTitle >> 8) & 0xff
   \   0000CD   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   0000D0                ; Setup parameters for call to function LCD_write_EN_string
   \   0000D0   7C..         MOV       R4,#AppTitle & 0xff
   \   0000D2   7D..         MOV       R5,#(AppTitle >> 8) & 0xff
   \   0000D4   EA           MOV       A,R2
   \   0000D5   75F007       MOV       B,#0x7
   \   0000D8   A4           MUL       AB
   \   0000D9   F8           MOV       R0,A
   \   0000DA   AAF0         MOV       R2,B
   \   0000DC   75F007       MOV       B,#0x7
   \   0000DF   EB           MOV       A,R3
   \   0000E0   A4           MUL       AB
   \   0000E1   2A           ADD       A,R2
   \   0000E2   F9           MOV       R1,A
   \   0000E3   7A02         MOV       R2,#0x2
   \   0000E5   7B00         MOV       R3,#0x0
   \   0000E7   12....       LCALL     ?S_DIV_MOD
   \   0000EA   7440         MOV       A,#0x40
   \   0000EC   C3           CLR       C
   \   0000ED   98           SUBB      A,R0
   \   0000EE   F9           MOV       R1,A
   \   0000EF   7A03         MOV       R2,#0x3
   \   0000F1   12....       LCALL     `??LCD_write_EN_string::?relay`; Banked call to: LCD_write_EN_string
    339            
    340            Color    = BLACK; //Ç°¾°É«
   \   0000F4   90....       MOV       DPTR,#Color
   \   0000F7   E4           CLR       A
   \   0000F8   F0           MOVX      @DPTR,A
   \   0000F9   A3           INC       DPTR
   \   0000FA   F0           MOVX      @DPTR,A
    341            Color_BK = WHITE; //±³¾°É«
   \   0000FB   90....       MOV       DPTR,#Color_BK
   \   0000FE   74FF         MOV       A,#-0x1
   \   000100   F0           MOVX      @DPTR,A
   \   000101   A3           INC       DPTR
   \   000102   F0           MOVX      @DPTR,A
    342            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_3 );
   \   000103                ; Setup parameters for call to function HalLcdWriteString
   \   000103   7902         MOV       R1,#0x2
   \   000105   7A..         MOV       R2,#`?<Constant "IEEE: ">` & 0xff
   \   000107   7B..         MOV       R3,#(`?<Constant "IEEE: ">` >> 8) & 0xff
   \   000109   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    343            Color    = BLUE;                    
   \   00010C   90....       MOV       DPTR,#Color
   \   00010F   741F         MOV       A,#0x1f
   \   000111   F0           MOVX      @DPTR,A
   \   000112   A3           INC       DPTR
   \   000113   E4           CLR       A
   \   000114   F0           MOVX      @DPTR,A
    344            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_4 );
   \   000115                ; Setup parameters for call to function HalLcdWriteString
   \   000115   7903         MOV       R1,#0x3
   \   000117   AA..         MOV       R2,?XSP + 0
   \   000119   AB..         MOV       R3,?XSP + 1
   \   00011B   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    345            
    346            
    347            
    348            
    349            
    350            /**********************************************\
    351            
    352            Color    = RED; 
    353            LCD_write_CN_string(9, 95, "ÉîÛÚÊÐ°²ÁªµÂ¿Æ¼¼");
    354            Color    = BLACK; 
    355            LCD_write_CN_string(9, 110, "³ÏÐÅÁ¢×ã");
    356            Color    = MAGENTA; 
    357            LCD_write_CN_string(63,110, "´´ÐÂÖÂÔ¶");  
    358            
    359            
    360            \***************************************************/
    361            
    362            
    363            
    364            
    365            
    366          #endif
    367          }
   \   00011E   7411         MOV       A,#0x11
   \   000120   12....       LCALL     ?DEALLOC_XSTACK8
   \   000123   7F04         MOV       R7,#0x4
   \   000125   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??main::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zmain_ext_addr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zmain_dev_info::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_dev_info

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IEEE: ">`:
   \   000000   49454545     DB "IEEE: "
   \            3A2000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TexasInstruments">`:
   \   000000   54657861     DB "TexasInstruments"
   \            73496E73
   \            7472756D
   \            656E7473
   \            00      
    368          
    369          #ifdef LCD_SUPPORTED
    370          /*********************************************************************
    371           * @fn      zmain_lcd_init
    372           * @brief   Initialize LCD at start up.
    373           * @return  none
    374           *********************************************************************/
    375          static void zmain_lcd_init ( void )
    376          {
    377          #ifdef SERIAL_DEBUG_SUPPORTED
    378            {
    379              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    380          
    381          #if defined( MT_MAC_FUNC )
    382          #if defined( ZDO_COORDINATOR )
    383                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    384          #else
    385                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    386          #endif // ZDO
    387          #elif defined( MT_NWK_FUNC )
    388          #if defined( ZDO_COORDINATOR )
    389                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    390          #else
    391                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    392          #endif // ZDO
    393          #endif // MT_FUNC
    394            }
    395          #endif // SERIAL_DEBUG_SUPPORTED
    396          }
    397          #endif
    398          
    399          /*********************************************************************
    400          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   main
        0      0   -> HalAdcCheckVdd
        0      0   -> HalDriverInit
        0      0   -> HalLcdWriteString
        0      0   -> InitBoard
        0      0   -> ZMacInit
        0      0   -> osal_init_system
        0      0   -> osal_int_disable
        0      0   -> osal_int_enable
        0      0   -> osal_nv_init
        0      0   -> osal_start_system
        0      0   -> zgInit
        0      0   -> zmain_dev_info
        0      0   -> zmain_ext_addr
      1     35   zmain_dev_info
        0     35   -> DrawRectFill
        0     29   -> HalLcdWriteString
        0     29   -> LCD_write_EN_string
        0     29   -> osal_strlen
      1     23   zmain_ext_addr
        0     21   -> HalFlashRead
        0     19   -> ZMacSetReq
        0     22   -> osal_memcmp
        0     22   -> osal_memcpy
        0     21   -> osal_nv_item_init
        0     23   -> osal_nv_read
        0     23   -> osal_nv_write
        0     19   -> osal_rand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "IEEE: ">
      17  ?<Constant "TexasInstruments">
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      11  ?Subroutine0
       1  CLKCONCMD
       1  CLKCONSTA
       1  P0INP
       1  P1DIR
       1  SLEEPCMD
       1  SLEEPSTA
       1  _A_P1
     139  main
       6  main::?relay
     296  zmain_dev_info
       6  zmain_dev_info::?relay
     367  zmain_ext_addr
       6  zmain_ext_addr::?relay

 
 813 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
   7 bytes in segment SFR_AN
  32 bytes in segment XDATA_ROM_C
 
  18 bytes of CODE     memory
  32 bytes of CONST    memory
   0 bytes of DATA     memory (+ 7 bytes shared)
 813 bytes of HUGECODE memory

Errors: none
Warnings: none
