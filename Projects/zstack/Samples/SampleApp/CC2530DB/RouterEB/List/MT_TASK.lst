###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               31/May/2018  15:16:29
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  E:\anti-lost-dev-code\Components\mt\MT_TASK.c
#    Command line       =  
#        -f C:\Users\libx\AppData\Local\Temp\EW60E9.tmp
#        (E:\anti-lost-dev-code\Components\mt\MT_TASK.c -D ZTOOL_P1 -D MT_TASK
#        -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List
#        -lA
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List
#        --diag_suppress Pe001,Pa010 -o
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\ -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\MT_TASK.lst
#    Object file        =  
#        E:\anti-lost-dev-code\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj\MT_TASK.r51
#
###############################################################################

E:\anti-lost-dev-code\Components\mt\MT_TASK.c
      1          /***************************************************************************************************
      2            Filename:       MT_TASK.c
      3            Revised:        $Date: 2011-06-07 15:36:01 -0700 (Tue, 07 Jun 2011) $
      4            Revision:       $Revision: 26245 $
      5          
      6            Description:    MonitorTest Task handling routines
      7          
      8            Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT_TASK.h"
     45          #include "MT.h"
     46          #include "MT_DEBUG.h"
     47          #include "MT_UART.h"
     48          #include "MT_UTIL.h"
     49          #include "MT_SYS.h"
     50          
     51          #if !defined( NONWK )
     52          #include "MT_ZDO.h"
     53          #include "MT_AF.h"
     54          #endif  /* NONWK */
     55          
     56          #include "hal_uart.h"
     57          #include "OSAL_Memory.h"
     58          
     59          /***************************************************************************************************
     60           * LOCAL FUNCTIONS
     61           ***************************************************************************************************/
     62          
     63          static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg );
     64          
     65          /***************************************************************************************************
     66           * GLOBALS
     67           ***************************************************************************************************/
     68          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     69          uint8 MT_TaskID;
   \                     MT_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     70          
     71          /***************************************************************************************************
     72           * @fn      MT_TaskInit
     73           *
     74           * @brief  MonitorTest Task Initialization.  This function is put into the
     75           *         task table.
     76           *
     77           * @param   task_id - task ID of the MT Task
     78           *
     79           * @return  void
     80           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     81          void MT_TaskInit(uint8 task_id)
   \                     MT_TaskInit:
     82          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
     83            MT_TaskID = task_id;
   \   000007   90....       MOV       DPTR,#MT_TaskID
   \   00000A   F0           MOVX      @DPTR,A
     84          
     85            /* Initialize the Serial port */
     86            MT_UartInit();
   \   00000B                ; Setup parameters for call to function MT_UartInit
   \   00000B   12....       LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
     87          
     88            /* Register taskID - Do this after UartInit() because it will reset the taskID */
     89            MT_UartRegisterTaskID(task_id);
   \   00000E                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00000E   EE           MOV       A,R6
   \   00000F   F9           MOV       R1,A
   \   000010   12....       LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
     90          
     91            osal_set_event(task_id, MT_SECONDARY_INIT_EVENT);
   \   000013                ; Setup parameters for call to function osal_set_event
   \   000013   7A10         MOV       R2,#0x10
   \   000015   7B00         MOV       R3,#0x0
   \   000017   EE           MOV       A,R6
   \   000018   F9           MOV       R1,A
   \   000019   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
     92          }
   \   00001C   7F01         MOV       R7,#0x1
   \   00001E   02....       LJMP      ?BANKED_LEAVE_XDATA
     93          
     94          /**************************************************************************************************
     95           * @fn      MT_ProcessEvent
     96           *
     97           * @brief   MonitorTest Task Event Processor.  This task is put into the task table.
     98           *
     99           * @param   task_id - task ID of the MT Task
    100           * @param   events - event(s) for the MT Task
    101           *
    102           * @return  Bit mask of the unprocessed MT Task events.
    103           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    104          UINT16 MT_ProcessEvent(uint8 task_id, uint16 events)
   \                     MT_ProcessEvent:
    105          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    106            /* Could be multiple events, so switch won't work */
    107            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   7003         JNZ       $+5
   \   00000D   02....       LJMP      ??MT_ProcessEvent_0 & 0xFFFF
    108            {
    109              uint8 *msg_ptr = osal_msg_receive(task_id);
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000013   8A..         MOV       ?V4,R2
   \   000015   8B..         MOV       ?V5,R3
    110          
    111              if (msg_ptr != NULL)
   \   000017   EA           MOV       A,R2
   \   000018   4B           ORL       A,R3
   \   000019   7003         JNZ       $+5
   \   00001B   02....       LJMP      ??MT_ProcessEvent_1 & 0xFFFF
    112              {
    113                MT_ProcessIncomingCommand((mtOSALSerialData_t *)msg_ptr);
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V0,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F5..         MOV       ?V1,A
   \   00002B   8A82         MOV       DPL,R2
   \   00002D   8B83         MOV       DPH,R3
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   14           DEC       A
   \   000031   6079         JZ        ??MT_ProcessEvent_2
   \   000033   14           DEC       A
   \   000034   6071         JZ        ??MT_ProcessEvent_3
   \   000036   24FE         ADD       A,#-0x2
   \   000038   6023         JZ        ??MT_ProcessEvent_4
   \   00003A   24FE         ADD       A,#-0x2
   \   00003C   601A         JZ        ??MT_ProcessEvent_5
   \   00003E   24E2         ADD       A,#-0x1e
   \   000040   7071         JNZ       ??MT_ProcessEvent_6
   \   000042                ; Setup parameters for call to function MTProcessAppRspMsg
   \   000042   85..82       MOV       DPL,?V0
   \   000045   85..83       MOV       DPH,?V1
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   2405         ADD       A,#0x5
   \   00004E   F9           MOV       R1,A
   \   00004F   AA..         MOV       R2,?V0
   \   000051   AB..         MOV       R3,?V1
   \   000053   12....       LCALL     `??MTProcessAppRspMsg::?relay`; Banked call to: MTProcessAppRspMsg
   \   000056   805B         SJMP      ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_5:
   \   000058                ; Setup parameters for call to function MT_ProcessDebugStr
   \   000058   12....       LCALL     `??MT_ProcessDebugStr::?relay`; Banked call to: MT_ProcessDebugStr
   \   00005B   8056         SJMP      ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_4:
   \   00005D   85..82       MOV       DPL,?V0
   \   000060   85..83       MOV       DPH,?V1
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   E0           MOVX      A,@DPTR
   \   000067   2405         ADD       A,#0x5
   \   000069   F5..         MOV       ?V2,A
   \   00006B                ; Setup parameters for call to function MT_UartCalcFCS
   \   00006B   74FE         MOV       A,#-0x2
   \   00006D   25..         ADD       A,?V2
   \   00006F   F9           MOV       R1,A
   \   000070   85..82       MOV       DPL,?V0
   \   000073   85..83       MOV       DPH,?V1
   \   000076   A3           INC       DPTR
   \   000077   AA82         MOV       R2,DPL
   \   000079   AB83         MOV       R3,DPH
   \   00007B   12....       LCALL     `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
   \   00007E   E9           MOV       A,R1
   \   00007F   C0E0         PUSH      A
   \   000081   A8..         MOV       R0,?V2
   \   000083   E5..         MOV       A,?V0
   \   000085   28           ADD       A,R0
   \   000086   F8           MOV       R0,A
   \   000087   E4           CLR       A
   \   000088   35..         ADDC      A,?V1
   \   00008A   F9           MOV       R1,A
   \   00008B   E8           MOV       A,R0
   \   00008C   24FF         ADD       A,#-0x1
   \   00008E   F582         MOV       DPL,A
   \   000090   E9           MOV       A,R1
   \   000091   34FF         ADDC      A,#-0x1
   \   000093   F583         MOV       DPH,A
   \   000095   D0E0         POP       A
   \   000097   F0           MOVX      @DPTR,A
   \   000098                ; Setup parameters for call to function HalUARTWrite
   \   000098   AC..         MOV       R4,?V2
   \   00009A   7D00         MOV       R5,#0x0
   \   00009C   AA..         MOV       R2,?V0
   \   00009E   AB..         MOV       R3,?V1
   \   0000A0   7900         MOV       R1,#0x0
   \   0000A2   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   0000A5   800C         SJMP      ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_3:
   \   0000A7                ; Setup parameters for call to function MT_ProcessDebugMsg
   \   0000A7   12....       LCALL     `??MT_ProcessDebugMsg::?relay`; Banked call to: MT_ProcessDebugMsg
   \   0000AA   8007         SJMP      ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_2:
   \   0000AC                ; Setup parameters for call to function MT_ProcessIncoming
   \   0000AC   AA..         MOV       R2,?V0
   \   0000AE   AB..         MOV       R3,?V1
   \   0000B0   12....       LCALL     `??MT_ProcessIncoming::?relay`; Banked call to: MT_ProcessIncoming
    114          
    115                osal_msg_deallocate(msg_ptr);
   \                     ??MT_ProcessEvent_6:
   \   0000B3                ; Setup parameters for call to function osal_msg_deallocate
   \   0000B3   AA..         MOV       R2,?V4
   \   0000B5   AB..         MOV       R3,?V5
   \   0000B7   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    116              }
    117          
    118              /* Return unproccessed events */
    119              return (events ^ SYS_EVENT_MSG);
   \                     ??MT_ProcessEvent_1:
   \   0000BA   EE           MOV       A,R6
   \   0000BB   FA           MOV       R2,A
   \   0000BC   EF           MOV       A,R7
   \   0000BD   6480         XRL       A,#0x80
   \   0000BF   8065         SJMP      ??MT_ProcessEvent_7
    120            }
    121          
    122            if ( events & MT_SECONDARY_INIT_EVENT )
   \                     ??MT_ProcessEvent_0:
   \   0000C1   EA           MOV       A,R2
   \   0000C2   5410         ANL       A,#0x10
   \   0000C4   6008         JZ        ??MT_ProcessEvent_8
    123            {
    124              MT_Init();
   \   0000C6                ; Setup parameters for call to function MT_Init
   \   0000C6   12....       LCALL     `??MT_Init::?relay`; Banked call to: MT_Init
    125              /* Return unproccessed events */
    126              return (events ^ MT_SECONDARY_INIT_EVENT);
   \   0000C9   EE           MOV       A,R6
   \   0000CA   6410         XRL       A,#0x10
   \   0000CC   8056         SJMP      ??MT_ProcessEvent_9
    127            }
    128          
    129            if ( events & MT_ZTOOL_SERIAL_RCV_BUFFER_FULL )
   \                     ??MT_ProcessEvent_8:
   \   0000CE   EA           MOV       A,R2
   \   0000CF   5402         ANL       A,#0x2
   \   0000D1   6006         JZ        ??MT_ProcessEvent_10
    130            {
    131              /* Return unproccessed events */
    132              return (events ^ MT_ZTOOL_SERIAL_RCV_BUFFER_FULL);
   \   0000D3   EA           MOV       A,R2
   \   0000D4   6402         XRL       A,#0x2
   \   0000D6   FA           MOV       R2,A
   \   0000D7   8054         SJMP      ??MT_ProcessEvent_11
    133            }
    134          
    135          #if !defined( NONWK )
    136            if ( events & MT_AF_EXEC_EVT )
   \                     ??MT_ProcessEvent_10:
   \   0000D9   EA           MOV       A,R2
   \   0000DA   5408         ANL       A,#0x8
   \   0000DC   6008         JZ        ??MT_ProcessEvent_12
    137            {
    138              MT_AfExec();
   \   0000DE                ; Setup parameters for call to function MT_AfExec
   \   0000DE   12....       LCALL     `??MT_AfExec::?relay`; Banked call to: MT_AfExec
    139              return (events ^ MT_AF_EXEC_EVT);
   \   0000E1   EE           MOV       A,R6
   \   0000E2   6408         XRL       A,#0x8
   \   0000E4   803E         SJMP      ??MT_ProcessEvent_9
    140            }
    141          #endif  /* NONWK */
    142          
    143            /* Handle MT_SYS_OSAL_START_TIMER callbacks */
    144          #if defined MT_SYS_FUNC
    145            if ( events & (MT_SYS_OSAL_EVENT_MASK))
   \                     ??MT_ProcessEvent_12:
   \   0000E6   EB           MOV       A,R3
   \   0000E7   540F         ANL       A,#0xf
   \   0000E9   603E         JZ        ??MT_ProcessEvent_13
    146            {
    147              if (events & MT_SYS_OSAL_EVENT_0)
   \   0000EB   EB           MOV       A,R3
   \   0000EC   5408         ANL       A,#0x8
   \   0000EE   6009         JZ        ??MT_ProcessEvent_14
    148              {
    149                MT_SysOsalTimerExpired(0x00);
   \   0000F0                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   0000F0   7900         MOV       R1,#0x0
   \   0000F2   12....       LCALL     `??MT_SysOsalTimerExpired::?relay`; Banked call to: MT_SysOsalTimerExpired
    150                events ^= MT_SYS_OSAL_EVENT_0;
   \   0000F5   7408         MOV       A,#0x8
   \   0000F7   6F           XRL       A,R7
   \   0000F8   FF           MOV       R7,A
    151              }
    152          
    153              if (events & MT_SYS_OSAL_EVENT_1)
   \                     ??MT_ProcessEvent_14:
   \   0000F9   EF           MOV       A,R7
   \   0000FA   5404         ANL       A,#0x4
   \   0000FC   6009         JZ        ??MT_ProcessEvent_15
    154              {
    155                MT_SysOsalTimerExpired(0x01);
   \   0000FE                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   0000FE   7901         MOV       R1,#0x1
   \   000100   12....       LCALL     `??MT_SysOsalTimerExpired::?relay`; Banked call to: MT_SysOsalTimerExpired
    156                events ^= MT_SYS_OSAL_EVENT_1;
   \   000103   7404         MOV       A,#0x4
   \   000105   6F           XRL       A,R7
   \   000106   FF           MOV       R7,A
    157              }
    158          
    159              if (events & MT_SYS_OSAL_EVENT_2)
   \                     ??MT_ProcessEvent_15:
   \   000107   EF           MOV       A,R7
   \   000108   5402         ANL       A,#0x2
   \   00010A   6009         JZ        ??MT_ProcessEvent_16
    160              {
    161                MT_SysOsalTimerExpired(0x02);
   \   00010C                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   00010C   7902         MOV       R1,#0x2
   \   00010E   12....       LCALL     `??MT_SysOsalTimerExpired::?relay`; Banked call to: MT_SysOsalTimerExpired
    162                events ^= MT_SYS_OSAL_EVENT_2;
   \   000111   7402         MOV       A,#0x2
   \   000113   6F           XRL       A,R7
   \   000114   FF           MOV       R7,A
    163              }
    164          
    165              if (events & MT_SYS_OSAL_EVENT_3)
   \                     ??MT_ProcessEvent_16:
   \   000115   EF           MOV       A,R7
   \   000116   5401         ANL       A,#0x1
   \   000118   6009         JZ        ??MT_ProcessEvent_17
    166              {
    167                MT_SysOsalTimerExpired(0x03);
   \   00011A                ; Setup parameters for call to function MT_SysOsalTimerExpired
   \   00011A   7903         MOV       R1,#0x3
   \   00011C   12....       LCALL     `??MT_SysOsalTimerExpired::?relay`; Banked call to: MT_SysOsalTimerExpired
    168                events ^= MT_SYS_OSAL_EVENT_3;
   \   00011F   7401         MOV       A,#0x1
   \   000121   6F           XRL       A,R7
   \   000122   FF           MOV       R7,A
    169              }
    170          
    171              return events;
   \                     ??MT_ProcessEvent_17:
   \   000123   EE           MOV       A,R6
   \                     ??MT_ProcessEvent_9:
   \   000124   FA           MOV       R2,A
   \   000125   EF           MOV       A,R7
   \                     ??MT_ProcessEvent_7:
   \   000126   FB           MOV       R3,A
   \   000127   8004         SJMP      ??MT_ProcessEvent_11
    172            }
    173          #endif
    174          
    175            /* Discard or make more handlers */
    176            return 0;
   \                     ??MT_ProcessEvent_13:
   \   000129   7A00         MOV       R2,#0x0
   \   00012B   7B00         MOV       R3,#0x0
   \                     ??MT_ProcessEvent_11:
   \   00012D   7F06         MOV       R7,#0x6
   \   00012F   02....       LJMP      ?BANKED_LEAVE_XDATA
    177          
    178          } /* MT_ProcessEvent() */
    179          
    180          /***************************************************************************************************
    181           * @fn      MT_ProcessIncomingCommand
    182           *
    183           * @brief
    184           *
    185           *   Process Event Messages.
    186           *
    187           * @param   *msg - pointer to event message
    188           *
    189           * @return
    190           ***************************************************************************************************/
    191          static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg )
    192          {
    193            uint8 len, *msg_ptr = msg->msg;
    194          
    195            /* Use the first byte of the message as the command ID */
    196            switch ( msg->hdr.event )
    197            {
    198              case CMD_SERIAL_MSG:
    199                MT_ProcessIncoming(msg_ptr);
    200                break;
    201          
    202              case CMD_DEBUG_MSG:
    203                MT_ProcessDebugMsg( (mtDebugMsg_t *)msg );
    204                break;
    205          
    206              case CB_FUNC:
    207                /*
    208                  Build SPI message here instead of redundantly calling MT_BuildSPIMsg
    209                  because we have copied data already in the allocated message
    210                */
    211          
    212                /* msg_ptr is the beginning of the intended SPI message */
    213                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
    214          
    215                /*
    216                  FCS goes to the last byte in the message and is calculated over all
    217                  the bytes except FCS and SOP
    218                */
    219                msg_ptr[len-1] = MT_UartCalcFCS(msg_ptr + 1, (uint8)(len-2));
    220          
    221          #ifdef MT_UART_DEFAULT_PORT
    222                HalUARTWrite ( MT_UART_DEFAULT_PORT, msg_ptr, len );
    223          #endif
    224                break;
    225          
    226              case CMD_DEBUG_STR:
    227                MT_ProcessDebugStr( (mtDebugStr_t *)msg );
    228                break;
    229          
    230          #if !defined ( NONWK )
    231              case MT_SYS_APP_RSP_MSG:
    232                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
    233                MTProcessAppRspMsg( msg_ptr, len );
    234                break;
    235          #endif  // NONWK
    236          
    237          #if defined (MT_UTIL_FUNC)
    238          #if defined ZCL_KEY_ESTABLISH
    239              case ZCL_KEY_ESTABLISH_IND:
    240                MT_UtilKeyEstablishInd((keyEstablishmentInd_t *)msg);
    241                break;
    242          #endif
    243          #endif
    244          #ifdef MT_ZDO_CB_FUNC
    245              case ZDO_STATE_CHANGE:
    246                MT_ZdoStateChangeCB((osal_event_hdr_t *)msg);
    247                break;
    248          #endif
    249          
    250              default:
    251                break;
    252            }
    253          }
    254          
    255          #ifdef MT_TASK
    256          /***************************************************************************************************
    257           * @fn      MT_TransportAlloc
    258           *
    259           * @brief   Allocate memory for transport msg
    260           *
    261           * @param   uint8 cmd0 - The first byte of the MT command id containing the command type and subsystem.
    262           *          uint8 len - length
    263           *
    264           * @return  pointer the allocated memory or NULL if fail to allocate the memory
    265           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    266          uint8 *MT_TransportAlloc(uint8 cmd0, uint8 len)
   \                     MT_TransportAlloc:
    267          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
    268            uint8 *p;
    269          
    270            (void)cmd0;  // Intentionally unreferenced parameter
    271          
    272            /* Allocate a buffer of data length + SOP+CMD+FCS (5 bytes) */
    273            p = osal_msg_allocate(len + SPI_0DATA_MSG_LEN);
   \   000006                ; Setup parameters for call to function osal_msg_allocate
   \   000006   2405         ADD       A,#0x5
   \   000008   FA           MOV       R2,A
   \   000009   E4           CLR       A
   \   00000A   3400         ADDC      A,#0x0
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
    274          
    275            if (p)
   \   000014   E582         MOV       A,DPL
   \   000016   4583         ORL       A,DPH
   \   000018   6007         JZ        ??MT_TransportAlloc_0
    276            {
    277              p++; /* Save space for SOP_VALUE, msg structure */
    278              return p;
   \   00001A   A3           INC       DPTR
   \   00001B   AA82         MOV       R2,DPL
   \   00001D   AB83         MOV       R3,DPH
   \   00001F   8004         SJMP      ??MT_TransportAlloc_1
    279            }
    280            else
    281            {
    282              return NULL;
   \                     ??MT_TransportAlloc_0:
   \   000021   7A00         MOV       R2,#0x0
   \   000023   7B00         MOV       R3,#0x0
    283            }
   \                     ??MT_TransportAlloc_1:
   \   000025                REQUIRE ?Subroutine0
   \   000025                ; // Fall through to label ?Subroutine0
    284          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    285          
    286          /***************************************************************************************************
    287           * @fn      MT_TransportSend
    288           *
    289           * @brief   Fill in SOP and FCS then send out the msg
    290           *
    291           * @param   uint8 *pBuf - pointer to the message that contains CMD, length, data and FCS
    292           *
    293           * @return  None
    294           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          void MT_TransportSend(uint8 *pBuf)
   \                     MT_TransportSend:
    296          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    297            uint8 *msgPtr;
    298            uint8 dataLen = pBuf[0]; /* Data length is on byte #1 from the pointer */
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F8           MOV       R0,A
    299          
    300            /* Move back to the SOP */
    301            msgPtr = pBuf-1;
   \   00000B   EA           MOV       A,R2
   \   00000C   24FF         ADD       A,#-0x1
   \   00000E   F5..         MOV       ?V0,A
   \   000010   EB           MOV       A,R3
   \   000011   34FF         ADDC      A,#-0x1
   \   000013   F5..         MOV       ?V1,A
    302          
    303            /* Insert SOP */
    304            msgPtr[0] = MT_UART_SOF;
   \   000015   85..82       MOV       DPL,?V0
   \   000018   F583         MOV       DPH,A
   \   00001A   74FE         MOV       A,#-0x2
   \   00001C   F0           MOVX      @DPTR,A
    305          
    306            /* Insert FCS */
    307            msgPtr[SPI_0DATA_MSG_LEN - 1 + dataLen] = MT_UartCalcFCS (pBuf, (3 + dataLen));
   \   00001D   E8           MOV       A,R0
   \   00001E   FE           MOV       R6,A
   \   00001F                ; Setup parameters for call to function MT_UartCalcFCS
   \   00001F   7403         MOV       A,#0x3
   \   000021   28           ADD       A,R0
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
   \   000026   E5..         MOV       A,?V0
   \   000028   2E           ADD       A,R6
   \   000029   F582         MOV       DPL,A
   \   00002B   E4           CLR       A
   \   00002C   35..         ADDC      A,?V1
   \   00002E   F583         MOV       DPH,A
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E9           MOV       A,R1
   \   000035   F0           MOVX      @DPTR,A
    308          
    309            /* Send to UART */
    310          #ifdef MT_UART_DEFAULT_PORT
    311            HalUARTWrite(MT_UART_DEFAULT_PORT, msgPtr, dataLen + SPI_0DATA_MSG_LEN);
   \   000036                ; Setup parameters for call to function HalUARTWrite
   \   000036   EE           MOV       A,R6
   \   000037   2405         ADD       A,#0x5
   \   000039   FC           MOV       R4,A
   \   00003A   E4           CLR       A
   \   00003B   3400         ADDC      A,#0x0
   \   00003D   FD           MOV       R5,A
   \   00003E   AA..         MOV       R2,?V0
   \   000040   AB..         MOV       R3,?V1
   \   000042   7900         MOV       R1,#0x0
   \   000044   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    312          #endif
    313          
    314            /* Deallocate */
    315            osal_msg_deallocate(msgPtr);
   \   000047                ; Setup parameters for call to function osal_msg_deallocate
   \   000047   AA..         MOV       R2,?V0
   \   000049   AB..         MOV       R3,?V1
   \   00004B   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    316          }
   \   00004E   80..         SJMP      ?Subroutine0

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_TaskInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TaskInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_TransportAlloc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TransportAlloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_TransportSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TransportSend
    317          #endif /* MT_TASK */
    318          /***************************************************************************************************
    319           ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   MT_ProcessEvent
        0     14   -> HalUARTWrite
        0     14   -> MTProcessAppRspMsg
        0     14   -> MT_AfExec
        0     14   -> MT_Init
        0     14   -> MT_ProcessDebugMsg
        0     14   -> MT_ProcessDebugStr
        0     14   -> MT_ProcessIncoming
        0     14   -> MT_SysOsalTimerExpired
        0     14   -> MT_UartCalcFCS
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
      0      9   MT_TaskInit
        0      9   -> MT_UartInit
        0      9   -> MT_UartRegisterTaskID
        0      9   -> osal_set_event
      0     10   MT_TransportAlloc
        0     10   -> osal_msg_allocate
      1     10   MT_TransportSend
        0     10   -> HalUARTWrite
        0     10   -> MT_UartCalcFCS
        0     10   -> osal_msg_deallocate


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?Subroutine0
     306  MT_ProcessEvent
       6  MT_ProcessEvent::?relay
       1  MT_TaskID
      33  MT_TaskInit
       6  MT_TaskInit::?relay
      37  MT_TransportAlloc
       6  MT_TransportAlloc::?relay
      80  MT_TransportSend
       6  MT_TransportSend::?relay

 
 461 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   1 byte  in segment XDATA_Z
 
  24 bytes of CODE     memory
 461 bytes of HUGECODE memory
   1 byte  of XDATA    memory

Errors: none
Warnings: none
